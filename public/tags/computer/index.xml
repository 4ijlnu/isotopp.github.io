<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer on Die wunderbare Welt von Isotopp</title>
    <link>/tags/computer.html</link>
    <description>Recent content in computer on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/computer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Projektschmerzen</title>
      <link>/2021/10/01/projektschmerzen.html</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/10/01/projektschmerzen.html</guid>
      <description>Es beginnt mit einem Tweet von Manuel Atug :
 &amp;ldquo;Wegen Überlastung der Server: #Notruf-App vorerst nicht mehr in App-Stores&amp;rdquo;
 und der Tweet verlinkte einen (inzwischen nicht mehr existierenden) Artikel beim Deutschlandfunk. Christoph Petrausch erklärt, wie solche Projekte falsch laufen können:
 Sowas erfordert eine Fehlerkultur. Du musst als Organisation in der Lage sein, nach so einem Incident einen Schritt zurückzutreten. Alle Fakten auf den Tisch zu legen und zu fragen: Warum kam es dazu?</description>
    </item>
    
    <item>
      <title>Software Defined Silicon</title>
      <link>/2021/09/30/software-defined-silicon.html</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/09/30/software-defined-silicon.html</guid>
      <description>Golem titelt Intel will Xeon-Funktionen als Lizenz-Update verkaufen :
 Intel will Xeon-Funktionen als Lizenz-Update verkaufen.
Mit dem Software Defined Silicon will Intel in Xeon-Hardware zunächst abgeschaltete Funktionen künftig als Lizenz-Upgrade bereitstellen.
 Manuel Atug ranted darüber auf Twitter:
Wenn dir die eigene Hardware nicht mehr gehört&amp;hellip; Intel will Xeon-Funktionen als Lizenz-Update verkaufen &amp;ldquo;Mit dem Software Defined Silicon will Intel in Xeon-Hardware zunächst abgeschaltete Funktionen künftig als Lizenz-Upgrade bereitstellen.&amp;quot;
Ich antwortete :</description>
    </item>
    
    <item>
      <title>Computer science</title>
      <link>/2021/09/07/computer-science.html</link>
      <pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/09/07/computer-science.html</guid>
      <description>Lilith Wittmann asked on Twitter:
 Why do we have so much dangerous software in Germany?
Because we don&amp;rsquo;t have the competency anywhere (administration, enterprise or science) to understand the complexity of software.
 My take was :
 Computer science is easy. It is the science of Zeroes and Ones, and it does not get any more complicated anywhere.
Computer science piles abstractions on top of each other, though, 30 layers deep and with non-linear interactions.</description>
    </item>
    
    <item>
      <title>Epochalypse</title>
      <link>/2021/08/18/epochalypse.html</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/08/18/epochalypse.html</guid>
      <description>I had reason to look into the UNIX Eschaton, the time when the signed 32 bit counter of seconds since Midnight, 1970-01-01 UTC overflows. Going to Wikipedia , I learned we will die two years earlier, because in 2036-02-07, 06:28:16 UTC NTP will kill us all:
 At 06:28:16 UTC on Thursday, 7 February 2036, Network Time Protocol will loop over to the next epoch, as the 32-bit time stamp value used in NTP (unsigned, but based on 1 January 1900) will overflow.</description>
    </item>
    
    <item>
      <title>fork, exec, wait and exit</title>
      <link>/2020/12/28/fork-exec-wait-and-exit.html</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/12/28/fork-exec-wait-and-exit.html</guid>
      <description>This is the [english version of a 2007 article]({% link _posts/2007-01-07-fork-exec-wait-und-exit.md %}).
In de.comp.os.unix.linux.misc somebody asked:
  Are commands in a script executed strictly sequentially, that is, will the next command only be executed when the previous command has completed, or will the shell automatically start the next command if the system has spare capacity? Can I change the default behavior - whatever it may be - in any way?</description>
    </item>
    
    <item>
      <title>Rechenzentren und ihren Stromverbrauch regulieren</title>
      <link>/2020/11/01/rechenzentren-und-ihren-stromverbrauch-regulieren.html</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/11/01/rechenzentren-und-ihren-stromverbrauch-regulieren.html</guid>
      <description>Es gibt ein Interview mit Stefan Ramesohl vom Umweltministerium (des Bundes) in Netzpolitik.org: &amp;ldquo;Warum niemand weiß, wie viele Rechenzentren es in Europa gibt &amp;rdquo;. Im Wesentlichen hat das Umweltministerium angesagt, daß es auf europäischer Ebene Rechenzentren erfassen und katalogisieren will, um in einem zweiten Schritt den Energieverbrauch von Rechenzentren zu regulieren.
Das ist sehr spannend, denn derzeit gibt es keine Übersicht über Rechenzentren in Europa, und tatsächlich sind einige Rechenzentrumsbetreiber sehr paranoid, was den genauen Standort ihrer Hardware angeht und wieviel und welche Hardware darin ist oder was diese tut.</description>
    </item>
    
    <item>
      <title>When a file changes, do a thing</title>
      <link>/2019/11/19/when-a-file-changes-do-a-thing.html</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/19/when-a-file-changes-do-a-thing.html</guid>
      <description>When developing there is often an edit-compile-test cycle, or an edit-distribute-changes cycle or a similar repetetive task. You could poll changes, for example with cron every minute or similarly, but that is wasteful and slow.
All modern operating systems have mechanisms for processes to subscribe to file or directory changes. In MacOS, we do have the File System Events API since 10.5, in Linux we got three different implementations (as described in LWN ): The original dnotify, its replacement inotify and the even more recent fanotify (which got its own LWN article ).</description>
    </item>
    
    <item>
      <title>Everything was a file, but we got better</title>
      <link>/2019/11/14/everything-was-a-file-but-we-got-better.html</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/14/everything-was-a-file-but-we-got-better.html</guid>
      <description>I fell into the Twitters again. @CarrickDB joked about Unix, Files and Directories:
 And that is a case of &amp;ldquo;Haha, only serious&amp;rdquo;. Because directories used to be files, and that was a bad time. Check out the V7 Unix mkdir command. At this point in history we do not have a mkdir(2) syscall, yet, so we need to construct the entire directory in multiple steps.
 mknod(2) an inode that has the S_IFDIR flag set , even if that macro does not even exist yet.</description>
    </item>
    
    <item>
      <title>Filling disk space fast</title>
      <link>/2019/11/11/filling-disk-space-fast.html</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/11/11/filling-disk-space-fast.html</guid>
      <description>Some of the databases at work are a tad on the large side, in the high 2-digit terabytes of size. Copying these to new machines at the moment takes a rather long time, multiple days, up to a week. Speeding it up pays twice, because with shorter copy times there is also less binlog to catch up.
I have been looking into disk copy speeds in order to better understand the limits.</description>
    </item>
    
    <item>
      <title>Ceph and NVME - not a good combination?</title>
      <link>/2019/07/16/ceph-and-nvme-not-a-good-combination.html</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/07/16/ceph-and-nvme-not-a-good-combination.html</guid>
      <description>Saving an older twitter thread on Ceph .
 I just have finished reading Part 4: RHCS 3.2 Bluestore Advanced Performance Investigation and now I do not know what to say.
Ceph set out with the idea to make storage a commodity by using regular PCs + a lot of local hard disks + software to make inexpensive storage. For that, you ran a number of control processes and an OSD process per disk (&amp;ldquo;object storage demon&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>Not quite storage any more</title>
      <link>/2019/06/14/not-quite-storage-any-more.html</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/14/not-quite-storage-any-more.html</guid>
      <description>While I was testing away on all the SSD and NVME toys, I got my hand on a test box with even stranger that usual equipment. It was a Dual Platinum-8280 box with a really weird amount of memory: 7.5 TB.
“8280 ”. This is a machine with a “2” in the second digit, indicating Cascade Lake , CLX.
And one thing that is new with CLX is “Intel Optane Persistent Memory Technology”.</description>
    </item>
    
    <item>
      <title>Adventures in Storageland</title>
      <link>/2019/06/13/adventures-in-storageland.html</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/13/adventures-in-storageland.html</guid>
      <description>Adventures in Storageland   Devices   In the last few weeks, I have been benchmarking server storage in order to get a better idea what the state of the hardware is these days. There is a summary with recommendations at the end of this article. Storage technology
In the past, we had stored data on rotating disks.
An open hard disk chassis. You can see the topmost of a stack of disks, and the arm with the r/w heads.</description>
    </item>
    
    <item>
      <title>Conway&#39;s Law</title>
      <link>/2018/01/12/conways-law.html</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/12/conways-law.html</guid>
      <description>Melvin Conway is a compiler developer and systems designer, who is well known for the eponymous Conway&amp;rsquo;s Law . Various phrasings exist of that, and one popular is
 Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.
 The original paper and an introductory paragraph can be found on his website . It&amp;rsquo;s worth reading, because there are more useful insights to be found in the original writeup.</description>
    </item>
    
    <item>
      <title>d = a*b&#43;c at scale</title>
      <link>/2017/11/25/d-abc-at-scale.html</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/25/d-abc-at-scale.html</guid>
      <description>Introduction to GPUs (PDF)
So you already know how your CPU works, basically, and want to understand what your GPU does differently. Ofer Rosenberg has you covered: Introduction to GPUs does what it says on the tin.
The NVIDIA take on this can be found in An Introduction to Modern GPU Architecture by Ashu Rege, but because this is from 2008, it&amp;rsquo;s showing it&amp;rsquo;s age. The first 15 slides or so focus more on the gaming aspect and less on the technology, but are full of matching screenshots.</description>
    </item>
    
    <item>
      <title>Power budgets for computing resources - portable and stationary</title>
      <link>/2017/11/07/power-budgets-for-computing-resources-portable-and-stationary.html</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/07/power-budgets-for-computing-resources-portable-and-stationary.html</guid>
      <description>Fanless devices   A cellphone or tablet is a fanless device. So is the 12&amp;quot; Macbook. That means you can do whatever is possible at any point in time within a TDP of approximately 5W.
Here is the power consumption of my cellphone over a 12h period. The scale on the left is mW, down is discharge, up is recharge (plugged in). It&amp;rsquo;s basically limited to 5W, and that only for short periods of time.</description>
    </item>
    
    <item>
      <title>Unicode is over and it dies over Emoji</title>
      <link>/2017/11/05/unicode-is-over-and-it-dies-over-emoji.html</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/05/unicode-is-over-and-it-dies-over-emoji.html</guid>
      <description>In 1982, Scott Fahlmann invented the use of :-) and :-( for marking up emotions or semantic context in written online communication. That was a great idea.
The :-) is just a symbol for an emotion.
It is specifically not a human face, it does not have a hair color, eye color, skin color or other human attributes. It is universal. Then some cellphone maker turned that into , anthropomorphising it.</description>
    </item>
    
    <item>
      <title>Latency Numbers, visualised and memorised</title>
      <link>/2017/10/12/latency-numbers-visualised-and-memorised.html</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/12/latency-numbers-visualised-and-memorised.html</guid>
      <description>There is a well known Github Gist &amp;ldquo;Latency Numbers Every Programmer Should Know &amp;rdquo;, which explains which things take how long.
 Scaled Latency Numbers If you scale these things down 3 billion times, a clock cycle (0.3ns) becomes a second. And suddenly things are relateable. (Tweet )
 Another attempt to visualize this , not entirely unlike this XKCD .</description>
    </item>
    
    <item>
      <title>So you want to write a Shell script</title>
      <link>/2017/08/07/so-you-want-to-write-a-shell-script.html</link>
      <pubDate>Mon, 07 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/07/so-you-want-to-write-a-shell-script.html</guid>
      <description>So some people, companies even, have guidelines that describe how to write shell scripts , or even unit tests for shell scripts , as if &amp;ldquo;UNIX Shell&amp;rdquo; was a programming language.
That&amp;rsquo;s wrong.
&amp;ldquo;Modern Shells&amp;rdquo; are based on a language that has been written without a formal language specification. The source looked like this , because somebody didn&amp;rsquo;t like C and wanted Algol, abusing the preprocessor . The original functionality and language rules had to be reverse engineered from that source, and original shell has a lot of weird rules and quirks :</description>
    </item>
    
    <item>
      <title>Twitter so: Testing in Production</title>
      <link>/2017/08/01/twitter-so-testing-in-production.html</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/01/twitter-so-testing-in-production.html</guid>
      <description>Matthew Dutton: »@mipsytipsy I thought &amp;ldquo;You have to test in production&amp;rdquo; was a bold statement and would love to hear more of your thoughts on the topic.«
Charity Majors: »Hmmm, you&amp;rsquo;re not the only one to call this out. I&amp;rsquo;ll add it to my list of &amp;ldquo;articles to write someday&amp;rdquo; ? but here&amp;rsquo;s the gist: We have always tested in production, just not well. And obviously, I&amp;rsquo;m not advising anyone to do less of the usual pre-production testing methods, but at some point, esp with distributed systems, you just can&amp;rsquo;t usefully mimic the qualities of size and chaos that tease out the long thin tail of bugs.</description>
    </item>
    
    <item>
      <title>Illegal and undocumented instructions</title>
      <link>/2017/07/28/illegal-and-undocumented-instructions.html</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/28/illegal-and-undocumented-instructions.html</guid>
      <description>Illegal and undocumented instructions are not a new thing. The Commodore 64 CPU, a 6502 with a few additional I/O lines, was known to have them. Since on current CPUs we can completely VLSI simulate a 6502 in Javascript we also understand where they come from.
Pagetable.com has a wonderful article on this . So how about current CPUs? Modern CPUs are vastly bigger and more complicated than a 6502, and they are also set up very differently.</description>
    </item>
    
    <item>
      <title>Threads vs. Watts</title>
      <link>/2017/07/19/threads-vs-watts.html</link>
      <pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/19/threads-vs-watts.html</guid>
      <description>So I have been testing, again. My hapless test subject this time is a Dell Box, an R630. It has a comfortable 384GB of memory, one of two 25 GBit/s ports active, and it comes with two E5-2690v4 CPUs. That gives it 14 cores per die, 28 cores in total, or with hyperthreading, 56 threads.
$ cat /proc/cpuinfo | grep &#39;model name&#39; | uniq -c 56 model name : Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.</description>
    </item>
    
    <item>
      <title>New Technology vs Planned Obsolescence</title>
      <link>/2017/07/07/new-technology-vs-planned-obsolescence.html</link>
      <pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/07/new-technology-vs-planned-obsolescence.html</guid>
      <description>based on an old Google plus article from 2015: What you observe as Planned Obsolescence is often the natural outcome of fast product cycles that are necessary for any new technology. When a new thing arrives in the market, it is often barely viable, a minimum viable product .
We are remembering the iPhone 1 as revolutionary, but we chose to forget about is slowness, its clunkyness and the very limited feature set it had.</description>
    </item>
    
    <item>
      <title>Friday Deploys, and other harmful BOFH memes</title>
      <link>/2017/07/03/friday-deploys-and-other-harmful-bofh-memes.html</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/03/friday-deploys-and-other-harmful-bofh-memes.html</guid>
      <description>Glorifying toil, glorifying organisational ossification
So somebody posted this on G+, and it&amp;rsquo;s a classic example for a thing that I classify as BOFH memes. That&amp;rsquo;s a group of memes and stories from operations people from a time past glorifying the toil and nastiness of operations.
This is going away now, for some time, and people identifying with BOFH thinking or finding it funny need to change, or go out of job.</description>
    </item>
    
    <item>
      <title>&#34;Usage Patterns and the Economics of the Public Cloud&#34;</title>
      <link>/2017/06/12/usage-patterns-and-the-economics-of-the-public-cloud.html</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/12/usage-patterns-and-the-economics-of-the-public-cloud.html</guid>
      <description>The paper (PDF ) is, to say it in the words of Sascha Konietzko, eine ausgesprochene Verbindung von Schlau und Dumm (&amp;ldquo;a very special combination of smart and stupid&amp;rdquo;).
The site mcafee.cc is not related to the corporation of the same name, but the site of one of the authors, R. Preston McAfee.
The paper looks at the utilization data from a number of public clouds, and tries to apply some dynamic price finding logic to it.</description>
    </item>
    
    <item>
      <title>Shit found on github: bork</title>
      <link>/2017/06/12/shit-found-on-github-bork.html</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/12/shit-found-on-github-bork.html</guid>
      <description>I&amp;gt; Good Morning!
M&amp;gt; And to you, too!
I&amp;gt; I hope you have a nice and technically reliable start into a new week full of hope!
I&amp;gt; Here, catch. https://github.com/mattly/bork M&amp;gt; »A bash DSL for config management« And it&amp;rsquo;s not even chistmas, ye
I&amp;gt; &amp;ldquo;the Swedish Chef Puppet of Config Management. [&amp;hellip;] Bork is written against Bash 3.2 and common unix utilities such as sed, awk and grep. It is designed to work on any UNIX-based system and maintain awareness of platform differences between BSD and GPL versions of unix utilities.</description>
    </item>
    
    <item>
      <title>Zero Tests and Testing in Production</title>
      <link>/2017/05/29/zero-tests-and-testing-in-production.html</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/29/zero-tests-and-testing-in-production.html</guid>
      <description>There is a pretty cool Twitter thread by Sarah Mei, starting at
Thread I spammed into this at /14 .
@samphippen :
 Big secret: there exist vast tranches of business contexts in which having literally zero tests is fine.
 @sarahmei :
 Been thinking about this. Conventional wisdom says you need a comprehensive set of regression tests to go green before you release code. /1
You want to know that your changes didn&amp;rsquo;t break something elsewhere in the app.</description>
    </item>
    
    <item>
      <title>Rolling out patches and changes, often and fast</title>
      <link>/2017/05/18/rolling-out-patches-and-changes-often-and-fast.html</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/18/rolling-out-patches-and-changes-often-and-fast.html</guid>
      <description>Fefe had a short pointer to an article Patching is Hard . It is, but you can make it a lot easier by doing a few things right. I did s small writeup (in German ) to explain this, which Fefe posted.
I do have an older talk on this, titled &amp;ldquo;8 rollouts a day&amp;rdquo; (more like 30 these days). There are slides and a recording . The Devops talk &amp;ldquo;Go away or I will replace you with a little shell script&amp;rdquo; addresses it, too, but from a different angle (slides , recording ).</description>
    </item>
    
    <item>
      <title>Handling Wannacrypt - a few words about technical debt</title>
      <link>/2017/05/15/handling-wannacrypt-a-few-words-about-technical-debt.html</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/15/handling-wannacrypt-a-few-words-about-technical-debt.html</guid>
      <description>So Microsoft had a bug in their systems. Many of their sytems. For many years. That happens. People write code. These people write bugs. Microsoft over the years has become decently good with fixing bugs and rolling out upgrades, quickly. That&amp;rsquo;s apparently important, because we all are not good enough at not writing bugs. So if we cannot prevent them, we need to be able to fix them and then bring these fixes to the people.</description>
    </item>
    
    <item>
      <title>node.js idea of an inode is approximately broken</title>
      <link>/2017/04/19/node-js-idea-of-an-inode-is-approximately-broken.html</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/04/19/node-js-idea-of-an-inode-is-approximately-broken.html</guid>
      <description>The Tweet points to the bug report . After the facepalming there is still a lot to say about that.
About the bug:   There is a system call stat(2) in Posix, which returns a struct stat as a result. Part of that data structure is a field st_ino, which contains the inode number of that file. That number is a unique file identifier, a 64 bit bit pattern.</description>
    </item>
    
    <item>
      <title>When you commit to git, how long does it matter?</title>
      <link>/2017/03/20/when-you-commit-to-git-how-long-does-it-matter.html</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/20/when-you-commit-to-git-how-long-does-it-matter.html</guid>
      <description>Commit to git Erik Bernhardsson has been running Big Data on Git repositories of various kinds. He was trying to find out what the half-life of code is. That is, when you commit to a repository, your code becomes part of a project, but eventually other code will replace it and it will no longer be part of the current version. How stable is the codebase, what is the half-life of code?</description>
    </item>
    
    <item>
      <title>How does the 8008 processor work?</title>
      <link>/2017/03/15/how-does-the-8008-processor-work.html</link>
      <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/15/how-does-the-8008-processor-work.html</guid>
      <description>The historic 8008 processor is 45 years old: It was released on the 13th of March 1972. Ken Shirriff has a blog post that explains features of the CPU, from a die photo.
Compared to modern CPUs, the 8008 is weird in multiple ways: The storage for the stack is on chip instead of in memory, and it is not accessed in linear order for weird transistor saving reasons. Things have changed since then a lot, but back then, a central processing unit was usually not a single die, but a bunch of discrete electronics on a board.</description>
    </item>
    
    <item>
      <title>B.boring</title>
      <link>/2017/03/13/b-boring.html</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/13/b-boring.html</guid>
      <description>Some time ago, I gave a talk about boring technology at Booking , which means choosing the simplest, stable and maintainable solution you can get away with for solving a problem at a given scale.
Apparently Dan McKinley has similar views, which he explained in Choose Boring Technology . The writeup explains nicely what boring technology is, and why to prefer this. Never forget your mission, which is business, not technology.</description>
    </item>
    
    <item>
      <title>github updates its TOS, and they are not trying to cheat</title>
      <link>/2017/03/09/github-updates-its-tos-and-they-are-not-trying-to-cheat.html</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/09/github-updates-its-tos-and-they-are-not-trying-to-cheat.html</guid>
      <description>Every single time a big Silicon Valley company updates their Terms of Service, there is somebody who mis-interprets the change as an attempt to landgrab, or take ownership of the things being uploaded to the service.
This time it affects github.
Their new TOS has a section on User-Generated Content , which in github&amp;rsquo;s case is all the repositories, snippets and other stuff they are hosting. In order to do the stuff they are doing on their users behalf, they need a lot of legal permissions on the stuff you are sending to them.</description>
    </item>
    
    <item>
      <title>The History of Moore&#39;s Law</title>
      <link>/2017/02/07/the-history-of-moores-law.html</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/07/the-history-of-moores-law.html</guid>
      <description>Commodore 64, Evan-Amos @ Wikipedia As Moore&amp;rsquo;s Law shows signs of coming to an end, the Guardian has an article about the history of computing from the Intel 4004 to current tech, and how with the Internet of Shit and Chips and Networking in everything, all of our computers are becoming just one computer.
 Everyone knows that modern computers are better than old ones. But it is hard to convey just how much better, for no other consumer technology has improved at anything approaching a similar pace.</description>
    </item>
    
    <item>
      <title>Unlearning Descriptive Statistics</title>
      <link>/2017/02/06/unlearning-descriptive-statistics.html</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/06/unlearning-descriptive-statistics.html</guid>
      <description>Anscombe&amp;rsquo;s Quartet by Schutz
Unlearning Descriptive Statistics explains many things you should know about working with Numbers that your Statistics Class in University probably did not explain properly. If they did, maybe Graphite would not hurt so much, with all the Averaging going on where it shouldn&amp;rsquo;t, and maybe Gill Tene would not have had to give talks like How NOT to measure latency (which is awesome, by the way and if you haven&amp;rsquo;t seen this talk, do it right now).</description>
    </item>
    
    <item>
      <title>Grumpy</title>
      <link>/2017/01/25/grumpy.html</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/01/25/grumpy.html</guid>
      <description>So Python is a beautiful language, which is also kind of slow. And the more cores you have, the worse it gets, because of the GIL in the most popular implementations. Other languages are much better at concurrency, one of them supposedly being Go. So Geeks at Google have been pondering the problem, and came up with a Python-to-Go compiler called Grumpy.
Read more about it in their blog . In rigged benchmarks it looks awesome, and under real world load it supposedly performs quite well.</description>
    </item>
    
    <item>
      <title>Be simple. Be boring. Be obvious.</title>
      <link>/2016/09/01/be-simple-be-boring-be-obvious.html</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/09/01/be-simple-be-boring-be-obvious.html</guid>
      <description>On Core.Infra day, I was invited to speak. This is my talk. There were many like it, but this was mine.
In operations, code is not your friend.   This is about what I did the two years I have not been around here. I first worked for Booking in 2006 as a MySQL consultant doing databasey things. I joined Booking as an employee later, in 2008. By then, I was working in Amsterdam, but living in Berlin, so I was flying around quite a bit.</description>
    </item>
    
    <item>
      <title>HDFS - billig im Cluster speichern</title>
      <link>/2012/06/11/hdfs-billig-im-cluster-speichern.html</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/06/11/hdfs-billig-im-cluster-speichern.html</guid>
      <description>Wer Clustern will, der muß erst mal einen solchen haben. Also, einen Cluster von möglichst vielen Rechnern. Die Anforderungen sind dabei klar: Man möchte Hardware haben, die möglichst billig ist - für Serverplatten, Speicher mit Fehlerkorrektur (ECC), und dergleichen Luxus ist kein Geld da, denn man möchte das gesparte Geld lieber in mehr Rechner stecken.
Also Billighardware kaufen? Nein! Denn auch die laufenden Kosten möchte man niedrig halten - der Rechner sollte also klein sein, und möglichst geringe laufende Kosten haben, also möglichst wenig Strom aufnehmen und bei möglichst hohen Zuluft-Temperaturen noch funktionieren.</description>
    </item>
    
    <item>
      <title>Wie man einen Graph plottet</title>
      <link>/2012/03/12/wie-man-einen-graph-plottet.html</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/03/12/wie-man-einen-graph-plottet.html</guid>
      <description>Ein total kaputtes Stück Graph.
Das da ist das, was ich bekomme, wenn ich mir eine Woche Daten in dem Datenbank-Monitoringprodukt meiner Wahl anschaue. Aber das spielt keine Rolle. Ich kann mir so ziemlich jeden Zeitreihengraphen anschauen, aus so ungefähr jedem Stück Software, das mir zur Installation zur Verfügung steht, und falls es nicht rrdtools ist, ist es genau so kaputt.
Das ist bemerkenswert, weil der Plot wahrscheinlich von einem Rudel Diplom- oder Master-Abgänger gebaut worden ist.</description>
    </item>
    
    <item>
      <title>Architektur heißt umbauen</title>
      <link>/2012/03/06/architektur-hei-t-umbauen.html</link>
      <pubDate>Tue, 06 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/03/06/architektur-hei-t-umbauen.html</guid>
      <description>Teatro di Marcello , Rom
Das auf dem Bild da ist das Theater des Marcellus, in Rom. Das Foto habe ich Anfang 2006 aufgenommen, als ich dienstlich bei einem Kunden ganz in der Nähe war.
Das Marcellustheater ist nach Marcus Marcellus benannt, einem Neffen von Kaiser Augustus, und wurde so um 13 vor Christus fertig gestellt. Es ist später verfallen, dann im Mittelalter als Festung genutzt worden, im 16. Jahrhundert dann in eine Palastresidenz umgewandelt worden.</description>
    </item>
    
    <item>
      <title>Testing in Production</title>
      <link>/2011/12/02/testing-in-production.html</link>
      <pubDate>Fri, 02 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/12/02/testing-in-production.html</guid>
      <description>Mitte November ist auf The Testing Planet ein Artikel von Seth Eliot (Microsoft) erschienen mit dem Titel Testing in Production . Eliot schreibt über Software Services, also Dienste, die auf einer Website laufen, sodaß die User keine Anwendungen installieren müssen (Wir erinnern uns: Microsoft ist noch immer ganz groß darin, Software auf physikalischen read-only Medien an Benutzer zu verschicken, auch wenn diese Software seit einer Dekade kaum mehr als ein Loader für Updates über das Internet ist und nach der Installation vom Medium erst einmal alle eben installierten Dateien durch das heruntergeladene Update durch neuere Versionen ersetzt werden).</description>
    </item>
    
    <item>
      <title>Der Trojaner nach dem Trojaner</title>
      <link>/2011/10/15/der-trojaner-nach-dem-trojaner.html</link>
      <pubDate>Sat, 15 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/10/15/der-trojaner-nach-dem-trojaner.html</guid>
      <description>Ich bin Informatiker, kein Jurist. Die Juristen und Verwaltungsmenschen, die ich kenne, haben mich jedoch gelehrt, daß Menschen in Deutschland Handlungsfreiheit haben - sie können tun, was immer sie wollen, solange dem nicht ein Verbot durch ein Gesetz entgegensteht. Dem Staate jedoch, so erklärten sie mir, ist diese Freiheit nicht gegeben: Grundlage allen staatlichen Handelns muß ein Gesetz sein.
Darum ist der von der Firma Digitask im Auftrag der bayrischen Staatsregierung entwickelte und nahezu bundesweit eingesetzte Staatstrojaner so ein Problem: Die rechtliche Grundlage für seinen Einsatz ist nämlich mindestens strittig, wenn nicht sogar offensichtlich nicht gegeben.</description>
    </item>
    
    <item>
      <title>Dennis Ritchie (Sep 1941-Okt 2011)</title>
      <link>/2011/10/13/dennis-ritchie-sep-1941-okt-2011.html</link>
      <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/10/13/dennis-ritchie-sep-1941-okt-2011.html</guid>
      <description>Das da ist Dennis Ritchie , dmr .
Dennis Ritchie schrieb zusammen mit Ken Thompson und vielen anderen Menschen in den späten 60er und den 70er Jahren die ersten Versionen des Unix-Betriebssystems, von dem viele der Systeme, die wir heute einsetzen, direkt abstammen oder substantiell beeinflußt wurden. Zusammen mit Brian Kernighan entwarf er die Programmiersprache C. Ritchie schrieb auch die Dokumentation zu diesen Systemen, und jeder Informatikstudent auf diesem Planeten hat seine Bücher &amp;lsquo;The C Programming Language&amp;rsquo; und eine Version des &amp;lsquo;Unix Programmers Manual&amp;rsquo; lesen müssen - sie sind noch heute im Druck.</description>
    </item>
    
    <item>
      <title>X11 auf dem Weg nach draußen</title>
      <link>/2011/05/10/x11-auf-dem-weg-nach-drau-en.html</link>
      <pubDate>Tue, 10 May 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/05/10/x11-auf-dem-weg-nach-drau-en.html</guid>
      <description>Im September 1987 wurde die Version 11 des X-Protokolls erfunden. Damals war alles schlimm: Wir hatten keinen Speicher, keine leistungsfähigen CPUs, keine Fonts, schon gar keine Vektorfonts, keine Farbe, schon gar keine Echtfarbe ohne Paletten, keine Transparency und vor allen Dingen keine Ahnung.
X11 war für Unix das Displaysystem der Wahl. Es macht eine ganze Menge Dinge falsch: Zum Beispiel lebt es unter der Annahme, daß das Grafiksubsystem des Rechners keine Rechenpower und wenig Speicher hat.</description>
    </item>
    
    <item>
      <title>NAT ist kein Sicherheitsfeature</title>
      <link>/2010/11/28/nat-ist-kein-sicherheitsfeature.html</link>
      <pubDate>Sun, 28 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/11/28/nat-ist-kein-sicherheitsfeature.html</guid>
      <description>Neulich hatte ich wieder einmal die Standard-Diskussion mit jemandem, der gegen IPV6 war, weil er dann ja kein NAT mehr habe. Dadurch, so die Argumentation, würde er ja die Sicherheitsfunktionen verlieren - derzeit verhindere sein Türstopper-Plastikrouter halt, daß man seine internen Rechner von außen angreifen könne.
Diesen Zahn zu ziehen ist oft eine schmerzhafte Operation. Aber schon immer galt: NAT ist kein Sicherheits-Feature. Ganz besonders nicht das NAT, das auf einem Türstopper-Plastikrouter läuft.</description>
    </item>
    
    <item>
      <title>Warum ich Urlaub brauche</title>
      <link>/2010/08/22/warum-ich-urlaub-brauche.html</link>
      <pubDate>Sun, 22 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/08/22/warum-ich-urlaub-brauche.html</guid>
      <description>Meine Firma verwendet SAP. Zum Glück habe ich damit nicht viel zu tun, außer um meine Beurteilungen abzusegnen und Urlaub zu beantragen. Das heißt, ich verwende SAP maximal 3 mal im Jahr. Bis vor kurzem hatte unser SAP keine LDAP-Anbindung. Ich hatte also ein SAP-Login, das von meinem Firmen-Login verschieden war und auch ein anderes Paßwort hatte. Da ich nur so ca. 3 Mal im Jahr ins SAP muß, ist das Paßwort unweigerlich abgelaufen, wenn ich mich in das SAP einloggen will.</description>
    </item>
    
    <item>
      <title>&#34;Intelligente&#34; Stromzähler</title>
      <link>/2010/08/19/intelligente-stromz-hler.html</link>
      <pubDate>Thu, 19 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/08/19/intelligente-stromz-hler.html</guid>
      <description>Ich habe letztes Jahr [hier]({% link _posts/2009-06-05-wie-viel-strom-verbraucht-ein-stromz-hler.md %}) und [hier]({% link _posts/2009-07-06-stromz-hler-revisited.md %}) ja schon mal was über &amp;ldquo;intelligente&amp;rdquo; Stromzähler geschrieben, zu deren Einbau wir ja nun alle verpflichtet sind, wenn wir renovieren oder neu bauen.
Das Thema rollt nun auch langsam in das Licht der Öffentlichkeit, etwa schreibt der Spiegel in Teure Ersparnis :
 Das Sparpotential des intelligenten Stromnetzes werde &amp;ldquo;enorm überschätzt&amp;rdquo;, resümiert Energieberater Klafka. Zuweilen verursache ein intelligenter Zähler sogar erst mal zusätzlichen Stromverbrauch, weil die Tarifdaten rund um die Uhr übertragen werden müssen.</description>
    </item>
    
    <item>
      <title>Smart Meters revisited</title>
      <link>/2010/02/22/smart-meters-revisited.html</link>
      <pubDate>Mon, 22 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/02/22/smart-meters-revisited.html</guid>
      <description>Im Juni letzten Jahres fragte ich &amp;ldquo;Wieviel Strom verbraucht ein Stromzähler?&amp;rdquo;, und dort haben wir auch am Rande Sicherheitsaspekte und Probleme mit solcher Technologie gestreift.
Andere Leute haben sich in der Zwischenzeit intensiver mit diesen Dingen beschäftigt. Die Ergebnisse sind nicht gut. In Reverse Engineering a Smart Meter baut Nate Lawson mal seinen Stromzähler auseinander: &amp;ldquo;But how vulnerable was I actually?&amp;rdquo;. Das Öffnen des Gehäuses war recht einfach, die vorgefundene Security minimal, und das Lock-Bit auf dem Controller war nicht gesetzt.</description>
    </item>
    
    <item>
      <title>Adventures in Mac OS X maintenance</title>
      <link>/2010/02/19/adventures-in-mac-os-x-maintenance.html</link>
      <pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/02/19/adventures-in-mac-os-x-maintenance.html</guid>
      <description>Nachdem ich neulich meinen Mac in den Service geben mußte, ich für die Zeit einen Ersatz-Mac hatte und ich also zwischen beiden Systemen hin- und her installieren mußte, hier die deutsche Übersetzung einer kleinen Zusammenfassung, die ich für die Firma geschrieben habe.
Offensichtlich ist es sehr praktisch, dem großen Mac-Gott Time Machine eine Platte zu opfern, weil niemand Backup will und Time Machine sehr gut in Restore ist. In meinem Fall verwende ich eine WD Elements 1TB dafür (etwa 85€), andere in der Firma wollen was kleineres und mit USB Power, nehmen also eine WD Passport (500G @ 92€).</description>
    </item>
    
    <item>
      <title>Alte Prospekte</title>
      <link>/2009/11/18/alte-prospekte.html</link>
      <pubDate>Wed, 18 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/11/18/alte-prospekte.html</guid>
      <description>Beim Aufräumen habe ich noch ein paar alte Prospekte gefunden und mal eben eingescannt.
CBM 4001 Series, Stand Januar 1982.   CBM 8001 Series, Stand Januar 1982.   CBM 8050 Diskettenlaufwerk (das Große mit der hohen Kapazität).   Commodore MMF 9000 (Ja, so was gab es mal):   Color Genie:   Sirius 1 (kleiner Katalog):   Sirius 1   großer Katalog, mit dem ganzen Business Chic der 80er - um diese Zeit liefen Dallas und Denver Clan:</description>
    </item>
    
    <item>
      <title>Wieviel Speicher brauchst Du denn?</title>
      <link>/2009/10/09/wieviel-speicher-brauchst-du-denn.html</link>
      <pubDate>Fri, 09 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/10/09/wieviel-speicher-brauchst-du-denn.html</guid>
      <description>Linux mapped die Speicherseiten zweiter Prozesse. Dabei wird speicher geteilt, oder Seiten sind noch ungeladen. Manche Seiten werden beim ersten Schreibzugriff kopiert (Copy-on-Write).
Manchmal muß man viel erklären, um eine einfache Frage beantworten zu können: Wieviel Speicher belegt ein Programm in Linux? Diese Frage war bisher überraschend schwer zu beantworten. Da ist einmal die Ausgabe von ps axuwww oder top:
[root@mc01bpmdb-02 ~]# ps axu | egrep &#39;(mysql[d]|USER)&#39; USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND .</description>
    </item>
    
    <item>
      <title>Unix-&#34;Standards&#34;</title>
      <link>/2009/07/26/unix-standards.html</link>
      <pubDate>Sun, 26 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/07/26/unix-standards.html</guid>
      <description>Die Geschichte von Unix ist eine Geschichte der gescheiterten oder unbrauchbaren Standards - ihre Zahl ist Legion.
Egal in welche Richtung man schaut: Sun zum Beispiel hatte einmal einen auf Postscript basierenden Desktop - NeWS , der in gewissser Weise X11 um Jahrzehnte voraus war, sich aber nie hat durchsetzen können, unter anderem deswegen, weil das Ding von Sun als Waffe gegen andere Unix-Anbieter verwendet worden war und quasi tot-lizensiert wurde, gefolgt vonOpen Look und dann dem Motif-basierenden CDE .</description>
    </item>
    
    <item>
      <title>Stromzähler revisited</title>
      <link>/2009/07/06/stromz-hler-revisited.html</link>
      <pubDate>Mon, 06 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/07/06/stromz-hler-revisited.html</guid>
      <description>Neulich fragte ich noch [Wieviel Strom verbraucht ein Stromzähler?]({% link _posts/2009-06-05-wie-viel-strom-verbraucht-ein-stromz-hler.md %}):
 Von den Sicherheits- und Datenschutzaspekten mal abgesehen…
 Von diesen Aspekten kann man nun nicht mehr absehen, denn EnBWs Yellowstrom implementiert den maximalen FAIL. Im Spiegel wird unter dem Titel EnBW lässt Stromzähler zwitschern ernsthaft erwogen, Twitter als Nachrichtentransport vom Zähler zum Endverbraucher und als Kommandotransport vom Endverbraucher zum Endgerät (mit dem Zähler als Haushalts-Server und X10 Kommandozentrale) zu implementieren.</description>
    </item>
    
    <item>
      <title>Wie viel Strom verbraucht ein Stromzähler?</title>
      <link>/2009/06/05/wie-viel-strom-verbraucht-ein-stromz-hler.html</link>
      <pubDate>Fri, 05 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/06/05/wie-viel-strom-verbraucht-ein-stromz-hler.html</guid>
      <description>Ab 2010 soll ja die Umrüstung von Stromzählern auf sogenannte Smart Meter verpflichtend werden. Das sind kleine embedded Computer, die den Stromverbrauch eines Haushaltes laufend an den Stromanbieter zurück melden. Der &amp;ldquo;Vorteil&amp;rdquo; für den Verbraucher ist ein tageszeit-abhängiger Strompreis. Von den Sicherheits- und Datenschutzaspekten mal abgesehen - was sind eigentlich die Konsequenzen für den Stromverbrauch durch die Zähler selbst?
In Deutschland gibt es laut Destatis 39.7 Millionen Haushalte. Das kann man also mal als Mindestanzahl der Stromzähler in Deutschland ansetzen, anderswo sind 44 Millionen Zähler in Deutschland gemeldet.</description>
    </item>
    
    <item>
      <title>The Importance Of FAIL</title>
      <link>/2008/05/30/the-importance-of-fail.html</link>
      <pubDate>Fri, 30 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/05/30/the-importance-of-fail.html</guid>
      <description>Wenn man mit Featureentwicklern spricht, dann reden sie immer gerne über tolle neue Dinge die sie gerade eingebaut haben.
Ich bin bei Featureentwicklern und Projektmanagern echt unbeliebt.
Ich rede gerne über Kosten, und über FAIL. Das habe ich mit vielen anderen Sysadmins, Bibliotheksentwicklern und Kernelcodern gemeinsam. Wenn man dort einmal mithört - zum Beispiel auf der Linux Kernel Mailingliste oder unter Stammtischgesprächen von Sysadmins - dann fällt einem bald etwas auf: Dort redet man in der Regel nicht von tollen neuen Features oder was jetzt optimiert worden ist, sondern dort redet man in der Regel von Fehlern, die aufgetreten sind oder von schlechtesten Fällen, und wie man sie triggert.</description>
    </item>
    
    <item>
      <title>Historische Kernelsourcen</title>
      <link>/2008/05/27/historische-kernelsourcen.html</link>
      <pubDate>Tue, 27 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/05/27/historische-kernelsourcen.html</guid>
      <description>In anderen Artikeln habe ich ja schon an Hand von http://lxr.linux.no/ Strukturen im Linux-Kernel referenziert und in Erklärungen verwendet.
Auf Tamacom gibt es zum Vergleich die Quellen von Linux 2.6, FreeBSD 7, NetBSD 4.x, OpenBSD 4.x, GNU Hurd 0.3 und OpenSolaris zum verlinken. Auch liegen dort ein UNIX V7 Kernel und ein 4.3BSD rum.
Minnie hat eine schöne Sequenz wirklich alter Unix-Trees, der die Entwicklung der 70er Jahre und einige BSD-Trees miteinander vergleicht.</description>
    </item>
    
    <item>
      <title>Steve Ballmer lernt noch was</title>
      <link>/2008/05/10/steve-ballmer-lernt-noch-was.html</link>
      <pubDate>Sat, 10 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/05/10/steve-ballmer-lernt-noch-was.html</guid>
      <description>[Steve Ballmer schläft derzeit schlecht]({% link _posts/2008-04-20-steve-ballmer-lernt-etwas.md %}). Da bin ich mir ziemlich sicher. Spätestens seit ich bei Till einen EEE-PC von Asus in den Fingern hatte.
Der EEE ist häßlich, aus Plastik und die Tastatur ist für meine Finger zu klein und das Touchpad ist hypersensitiv. Aber das Ding tut alles, was ich jemals von ihm wollen könnte. Es hat WLAN, eine Kamera, es hat Firefox, Open Office, Mplayer und Skype.</description>
    </item>
    
    <item>
      <title>Microsoft, Yahoo! und was nun?</title>
      <link>/2008/05/06/microsoft-yahoo-und-was-nun.html</link>
      <pubDate>Tue, 06 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/05/06/microsoft-yahoo-und-was-nun.html</guid>
      <description>Microsoft will Yahoo! kaufen, aber Yahoo! will nicht.
[Microsoft lernt, daß Yahoo! vielleicht gar keine so gute Idee ist]({% link _posts/2008-04-20-steve-ballmer-lernt-etwas.md %}).
Und außerdem zu teuer - Microsoft geht weg . \Der Markt denkt kurz - die Yahoo!-Aktien fallen , Yahoo! wird auf Drängen seiner Aktionäre weich.
Nun sind es nicht die Aktionäre, die den Umsatz machen, sondern die Entwickler. Yahoo! ist eine Firma mit einer fest etablierten und reichen Open Source Kultur.</description>
    </item>
    
    <item>
      <title>Steve Ballmer lernt etwas</title>
      <link>/2008/04/20/steve-ballmer-lernt-etwas.html</link>
      <pubDate>Sun, 20 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/04/20/steve-ballmer-lernt-etwas.html</guid>
      <description>Microsoft&amp;rsquo;s Ballmer gives unvarnished take on Windows, online businesses :
 He sought feedback from the crowd of IT pros, many of whom have dedicated their careers to becoming expert in Microsoft&amp;rsquo;s products, on which Internet search engine they use. &amp;ldquo;How many of you use Live Search as your default?&amp;rdquo; Ballmer asked.
A smattering of hands went up. Tepid applause. &amp;ldquo;How many of you use Yahoo search as your default?&amp;rdquo; Far fewer hands went up and the room was relative quiet, until it filled with laughter.</description>
    </item>
    
    <item>
      <title>fork, exec, wait und exit</title>
      <link>/2007/01/07/fork-exec-wait-und-exit.html</link>
      <pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>/2007/01/07/fork-exec-wait-und-exit.html</guid>
      <description>In de.comp.os.unix.linux.misc fragte jemand:
  Werden in einem Skript die Befehle streng sequentiell ausgeführt, d.h. der nächste erst bearbeitet, wenn der Vorgänger vollständig ausgeführt ist, oder wird automatisch bei unvollständiger Auslastung des Systems bereits der nächste Befehl angefangen? Läßt sich das Standardverhalten - wie auch immer es sein mag - bei Bedarf ändern?   Wenn man in ein Shellbuch schaut, wird einem an der einen oder anderen Stelle möglicherweise erläutert, daß die Shell jeden Befehl in einem eigenen Prozeß abarbeitet.</description>
    </item>
    
    <item>
      <title>Fragmentierung (für Jannik)</title>
      <link>/2006/05/08/fragmentierung-f-r-jannik.html</link>
      <pubDate>Mon, 08 May 2006 00:00:00 +0000</pubDate>
      
      <guid>/2006/05/08/fragmentierung-f-r-jannik.html</guid>
      <description>ircnet, #lug-kiel, am 7. und 8. Mai.
Jannik wundert sich über fsck&amp;rsquo;s Meldung
/: 130834/6553600 Dateien (1.1% nicht zusammenhängend), 1007700/13107200 Blöcke Ist das schlimm? Jannik: hmm.. /:
130834/6553600 Dateien (1.1% nicht zusammenhängend), 1007700/13107200 Blöcke Sieht so aus als wäre mein Dateisystem fragmentiert gewesen o.O? Ich dachte, so etwas kennt Linux nicht.
tholle: Linux oder das Dateisystem? ;-)
Isotopp: Seufz. &amp;ldquo;1.1% nicht zusammenhängend&amp;rdquo; Natürlich können Dateien in nicht fortlaufenden Blocknummern gespeichert sein.</description>
    </item>
    
    <item>
      <title>User und Gruppen, Prozesse und Dateien</title>
      <link>/2005/11/01/user-und-gruppen-prozesse-und-dateien.html</link>
      <pubDate>Tue, 01 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>/2005/11/01/user-und-gruppen-prozesse-und-dateien.html</guid>
      <description>Heute im Irc stellte eine Teilnehmerin den folgenden Fragenschwall:
 Wie finde ich eigentlich heraus, was für Gruppen es auf einem Linuxsystem gibt? Wie füge ich da jemanden hinzu? Lege ich den zuerst als User an, ganz normal? Und: Wenn ich einen Ordner anlege, der nur für eine bestimmte Gruppe zugänglich sein soll, mache ich das doch über File Permissions, oder habe ich falsch gedacht?
 Die offensichtliche Antwort, das Nachsehen in /etc/group, funktioniert bei modernen Unixen nicht mehr zwingend, denn Gruppendefinitionen können nicht nur in lokalen Dateien stehen, sondern auch aus dem NIS, dem NIS+, einem LDAP oder einem Active Directory kommen.</description>
    </item>
    
    <item>
      <title>Dynamisch geladener Code</title>
      <link>/2005/10/08/dynamisch-geladener-code.html</link>
      <pubDate>Sat, 08 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>/2005/10/08/dynamisch-geladener-code.html</guid>
      <description>Inzwischen bin ich so weit, daß ich viele Unix-Kommandozeilenprogramme zwar nützlich finde, aber in einem größeren Maßstab als unhandlich und schlecht wiederzuverwenden ansehe. Das liegt daran, daß das Konzept der Pipeline und der Kommandozeile zwar sehr mächtig sind, insbesondere wenn man sie mit einer guten Shell verwendet, aber einen nur so weit bringen.
Manchmal muß man doch richtigen Code schreiben, und wenn man dann den Compiler oder auch nur eine Scriptsprache schwingen muß, dann nützen einem die ganzen Kommandozeilen-Utilities gar nichts mehr.</description>
    </item>
    
    <item>
      <title>It&#39;s all about the Pentiums</title>
      <link>/2004/10/09/it-s-all-about-the-pentiums.html</link>
      <pubDate>Sat, 09 Oct 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/10/09/it-s-all-about-the-pentiums.html</guid>
      <description>Schon Weird Al hat gewußt: It&amp;rsquo;s all about the Pentiums, baby . Im Falle eines Rechenzentrums kann man durch den Einsatz von Blades nicht nur Strom sparen, sondern auch die Leistungsdichte erhöhen (also Platz sparen) und das Management verbessern.
Ich hatte die letzten paar Wochen Gelegenheit, Bladecenter von HP und IBM zu sehen. Beide haben sehr unterschiedliche Konzepte&amp;hellip;
Über Blades   Blades bestehen aus einem Einschub, dem Enclosure, in den meist vertikal die Rechnereinschübe eingesteckt werden (daher der Name Blade für die Einschübe).</description>
    </item>
    
    <item>
      <title>Netzmasken über den Augen</title>
      <link>/2004/09/14/netzmasken-ueber-den-augen.html</link>
      <pubDate>Tue, 14 Sep 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/09/14/netzmasken-ueber-den-augen.html</guid>
      <description>Heute habe ich einem jüngeren Kollegen Netmasks und Broadcast-Adressen beibringen wollen, und habe eine Runde über Stellenwertsysteme, Logarithmen, den Unterschied zwischen Ziffer und Zahl und dergleichen Dinge mehr drehen müssen. Mir sind diese Dinge damals mehr oder weniger zugeflogen - einmal weil so etwas an der Schule unterrichtet worden ist, und zum anderen, weil ich einige Jahre mit verschiedenen Assemblern rumhantiert habe, bevor ich meine erste Hochsprache (C64 Basic zählt wohl nicht als solche :) gelernt habe.</description>
    </item>
    
    <item>
      <title>Alte Säcke online</title>
      <link>/2004/07/05/alte-saecke-online.html</link>
      <pubDate>Mon, 05 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/07/05/alte-saecke-online.html</guid>
      <description>Ältestes auffindbares USENET Posting von mir . Das war vor 15 Jahren.</description>
    </item>
    
    <item>
      <title>Static vs. dynamic typing</title>
      <link>/2004/05/02/static-vs-dynamic-typing.html</link>
      <pubDate>Sun, 02 May 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/05/02/static-vs-dynamic-typing.html</guid>
      <description>Irgendwann Ende der 80er fiel mir ein Zortech C++ Compiler in die Hand. Den mochte ich, weil er anders als das cfront auf dem AIX ein nativer Compiler war. Ich habe also das VP/ix in meinem SCO Xenix hochgefahren, ein MS-DOS rein installiert und ein wenig mit der Sprache rumexperimentiert.
Ich habe zu dieser Zeit bei einem Erwachsenenbildungswerk Programmierkurse gegeben und eine der fortgeschrittenen Standardaufgaben, mit denen ich meine Schüler gequält habe, waren dynamische Strings (&amp;ldquo;Schreiben Sie eine lgets()-Funktion, die beliebig lange Strings aus einer Datei lesen kann&amp;rdquo;) und dynamische Arrays (&amp;ldquo;Schreiben Sie einen Satz Funktionen, mit denen Sie ein Array variabler Größe verwalten können&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>GNU GPL in Deutschland</title>
      <link>/2004/04/15/gnu-gpl-in-deutschland.html</link>
      <pubDate>Thu, 15 Apr 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/04/15/gnu-gpl-in-deutschland.html</guid>
      <description>(via Groklaw )
Sitecom GmbH in Freising ist das Ziel einer einstweiligen Verfügung des Netfilter/Iptables-Projektes. Demnach ist es Sitecom untersagt, ihr auf Netfilter basierendes Produkt weiter zu vertreiben, bis sie allen Bedingungen der GPL nachkommen.
Die GPL (General Public License) ist eine Lizenz. Sie gibt einem das Recht, ein urheberrechtlich geschütztes Werk (hier: netfilter/iptables) zu verwenden, zu modifizieren und zu verbreiten, wenn man den Verpflichtungen der Lizenz nachkommt.
Im Fall gewöhnlicher Lizenzen bedeutet dies meist eine Zahlung von Lizenzgebühren.</description>
    </item>
    
    <item>
      <title>ObjC - oder warum DCOP so kompliziert ist</title>
      <link>/2003/10/24/objc-oder-warum-dcop-so-kompliziert-ist.html</link>
      <pubDate>Fri, 24 Oct 2003 00:00:00 +0000</pubDate>
      
      <guid>/2003/10/24/objc-oder-warum-dcop-so-kompliziert-ist.html</guid>
      <description>Methoden mit Klasse   Am Wochenende hatte ich mit Till eine recht coole Unterhaltung über die Innereien von Qt. Qt hat den Signal-Slot-Mechanismus, mit dem es Methoden von Objekten aufruft.
Dazu werden einige Methoden eines Objektes in eine spezielle Runtime-Tabelle der Klasse eingetragen, mit Namen. Das sind Slots.
Signale sind Platzhalter für Funktionsnamen, die in eine andere Tabelle eingetragen werden können. Mit connect() macht man so einen Eintrag: Man kopiert den Namen einer Funktion (genauer: eines Slots) in den Signalplatzhalter.</description>
    </item>
    
  </channel>
</rss>
