<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on Die wunderbare Welt von Isotopp</title>
    <link>/tags/php.html</link>
    <description>Recent content in php on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Feb 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Watchman</title>
      <link>/2018/02/01/watchman.html</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/01/watchman.html</guid>
      <description>Today I was looking for a way to subscribe to file changes in a directory in MacOS, in order to trigger automatically running commands whenever files change. Turns out Homebrew has &amp;ldquo;fswatch&amp;rdquo;, which tells you when things change, but little else.
Turns out Homebrew has &amp;ldquo;watchman&amp;rdquo;, which does all this, and on multiple trees, finds changes across restarts and automatically manages a set of commands for different file endings.</description>
    </item>
    
    <item>
      <title>PHP: Understanding unserialize()</title>
      <link>/2017/08/11/php-understanding-unserialize.html</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/11/php-understanding-unserialize.html</guid>
      <description>The history of serialize() and unserialize() in PHP begins with Boris Erdmann and me, and we have to go 20 years back in time. This is the day of the prerelease versions of PHP 3, some time in 1998 .
Boris and I were working on code for a management system for employee education for German Telekom. The front side is a web shop that sells classes and courses, the back end is a complex structure that manages attendance, keeps track of a line manager approval hierarchy and provides alternative dates for overfull classes.</description>
    </item>
    
    <item>
      <title>PHP 7: mysql extension deprecated</title>
      <link>/2017/01/23/php-7-mysql-extension-deprecated.html</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/01/23/php-7-mysql-extension-deprecated.html</guid>
      <description>In mysql() nach PHP 7 retten , Charly Kühnast explains how you can get the deprecated and disabled mysql extension back in PHP 7. You shouldn&amp;rsquo;t. There are many reasons for this.
One of them being that none of the newer features in MySQL can be used with the old mysql extensions. There is an overview in the PHP documentation that explains exactly what you are missing.
One of the things that you are missing is support for prepared statements.</description>
    </item>
    
    <item>
      <title>15 Jahre PHP</title>
      <link>/2010/06/07/15-jahre-php.html</link>
      <pubDate>Mon, 07 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/06/07/15-jahre-php.html</guid>
      <description>Morgen ist der 8. Juni 2010, und damit wird PHP 15 Jahre alt .
Die aktuelle Version von PHP ist 5.3.
Seit [dem letzten großen Jubiläum]({% link _posts/2005-06-07-zehn-jahre-php.md %}) vor 5 Jahren hat sich PHP weiterentwickelt:
 PHP 5.1 vom 24. November 2005 war in erster Linie ein Performance-Release, PHP 5.2 folgte kaum ein Jahr später, am 2. November 2006, und brachte weitere Performanceverbesserungen, die immer noch viel zu wenig verwendete ext/filter und den FAQ-Klassiker &amp;lsquo;upload progress tracking&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Connection Scoped State bei MySQL</title>
      <link>/2009/04/19/connection-scoped-state-bei-mysql.html</link>
      <pubDate>Sun, 19 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/04/19/connection-scoped-state-bei-mysql.html</guid>
      <description>Aus einer Diskussion in der deutschsprachigen MySQL Gruppe im USENET. Dort ging es um die Frage, warum phpMyAdmin ein eingeschränktes Werkzeug ist und bei vielen Helfern im Netz unbeliebt. Meine Antwort lautete so:
phpMyAdmin unterliegt wie auch viele grafische Werkzeuge für MySQL (darunter auch jene, die von MySQL selbst bereitgestellt werden) einigen besonderen Einschränkungen. Diese sind prinzipbedingt und daher auch nicht leicht zu beheben.
Aber von vorne:
In MySQL ist es so, daß die Connection einen besonderen Kontext oder Scope darstellt.</description>
    </item>
    
    <item>
      <title>Inhaltliche und kulturelle Steuerung von Foren</title>
      <link>/2008/07/23/inhaltliche-und-kulturelle-steuerung-von-foren.html</link>
      <pubDate>Wed, 23 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/07/23/inhaltliche-und-kulturelle-steuerung-von-foren.html</guid>
      <description>(Update: 2020-06-19 Russian version contributed by Vladimir Htr)
Many years ago, late in 1999, I was involved in the creation of de.comp.lang.php, a USENET newsgroup. Since the group was new I began a personal experiment to influence the communication culture of an [open USENET group]({% link _posts/2005-06-07-zehn-jahre-php.md %}).
That went on for four to five year, out of which I have been actively involved for two years, earning [good Karma]({% link _posts/2007-03-18-warum-alle-meine-texte-frei-im-netz-zu-lesen-sind.</description>
    </item>
    
    <item>
      <title>10 Jahre PHPLIB</title>
      <link>/2008/05/29/10-jahre-phplib.html</link>
      <pubDate>Thu, 29 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/05/29/10-jahre-phplib.html</guid>
      <description>Vor etwas mehr als 10 Jahren, am 19. Mai 1998, schrieb ich auf php-general von einer PHP Standardbibliothek.
 PHP should ship with, and install by default, a standard library. This library should offer certain standard functionality that is often required in larger web projects.The language itself does not need to support any of the functionality that should be in the library (see below). In fact, quite a lot of PHP special functions are probable candidates for library functions that could (and perhaps should) be removed from the language core, if you are into language purity (I am not).</description>
    </item>
    
    <item>
      <title>Parameterdeklarationen für Webseiten</title>
      <link>/2007/03/30/parameterdeklarationen-fur-webseiten.html</link>
      <pubDate>Fri, 30 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>/2007/03/30/parameterdeklarationen-fur-webseiten.html</guid>
      <description>Es ist mal wieder Zeit, sehr alte Hüte rauszukramen. Heute habe ich mir dienstlich eine Datenbank angesehen, die von PHP aus angesprochen wird. Das PHP, das dort verwendet wird, ist sehr loses PHP, also ohne die Verwendung eines großartiges Frameworks geschrieben. Entsprechend bin ich quasi sofort über SQL-Injections und XSS gefallen.
Denn schon nach kurzem Suchen findet man Code wie den folgenden:
$theValue = $_REQUEST[&amp;#39;theValue&amp;#39;]; ... if ($theValue != &amp;#34;&amp;#34;) { $where .</description>
    </item>
    
    <item>
      <title>Webanwendungen und der FHS</title>
      <link>/2005/06/13/webanwendungen-und-der-fhs.html</link>
      <pubDate>Mon, 13 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>/2005/06/13/webanwendungen-und-der-fhs.html</guid>
      <description>Auf der S9Y Mailingliste fragte ein zukünftiger Paketmaintainer nach, ob er Serendipity für seine Distribution packen solle und wir ihn dabei unterstützten wollen. Abgesehen von allgemeinen Überlegungen die dagegen sprechen, gibt es noch andere Gründe, die das nicht wünschenswert machen.
In den Bereich der allgemeinen Überlegungen fallen zum Beispiel die Releasezyklen von Distributionen: Sie sind in der Regel sehr viel länger als die von Webanwendungen wie Serendipity. Insbesondere sehr langwellige Distributionen wie Debian verteilen mit ihren Paketen Versionen der Software, die die Entwickler von S9Y nicht mehr unterstützen können und wollen.</description>
    </item>
    
    <item>
      <title>Zehn Jahre PHP</title>
      <link>/2005/06/07/zehn-jahre-php.html</link>
      <pubDate>Tue, 07 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>/2005/06/07/zehn-jahre-php.html</guid>
      <description>Wie anderswo angemerkt, ist morgen der 8. Juni 2005, und damit der 10. Geburtstag von PHP.
Was als kleines Tools zur Erstellung der Bewerbung von Rasmus Lerdorf angefangen hat, ist jetzt ein ausgewachsenes Tool zur Erstellung und Handhabung von Webanwendungen. PHP glänzt vor allen Dingen durch seine Integrationsfertigkeiten: es ist die Borg, die Glue Language des Web, die alle anderen Bibliotheken und Kommunikationswege assimiliert und zur Erreichung der eigenen Perfektion integriert.</description>
    </item>
    
    <item>
      <title>MySQL FLOSS Exception</title>
      <link>/2004/07/19/mysql-floss-exception.html</link>
      <pubDate>Mon, 19 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/07/19/mysql-floss-exception.html</guid>
      <description>Bereits letzten Donnerstag hat Zak Greant, die Community-Kontaktperson bei MySQL, die Version 1.5 der MySQL FLOSS License Exception veröffentlicht.
 Exception IntentWe want specified Free/Libre and Open Source Software (&amp;ldquo;FLOSS&amp;rdquo;) applications to be able to use specified GPL-licensed MySQL client libraries (the &amp;ldquo;Program&amp;rdquo;) despite the fact that not all FLOSS licenses are compatible with version 2 of the GNU General Public License (the &amp;ldquo;GPL&amp;rdquo;).
 Wir erinnern uns: Wie in [MySQL und die Lizenzen]({% link _posts/2004-03-14-mysql-und-die-lizenzen.</description>
    </item>
    
    <item>
      <title>Why PHPLIB did vanish</title>
      <link>/2004/07/15/why-phplib-did-vanish.html</link>
      <pubDate>Thu, 15 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/07/15/why-phplib-did-vanish.html</guid>
      <description>In &amp;ldquo;ADO-donkey&amp;rdquo; will prevail , johnlim writes:
 PHPLib was the most popular database library for PHP3. Today it seems to be a bit old and is no longer popular. I have never talked to the PHPLib developers, but I can speculate on the reasons:
 PHPLib has PHP3 functionality that is obsolete because it is provided natively by PHP today, such as sessions support. PHPLib tried to do too much.</description>
    </item>
    
    <item>
      <title>MySQL und die Lizenzen</title>
      <link>/2004/03/14/mysql-und-die-lizenzen.html</link>
      <pubDate>Sun, 14 Mar 2004 00:00:00 +0000</pubDate>
      
      <guid>/2004/03/14/mysql-und-die-lizenzen.html</guid>
      <description>Früher war alles besser. Früher zum Beispiel konnte MySQL gar nichts, und der Server stand unter der GPL , während der MySQL Client unter der LGPL stand und alles war gut. So gut, daß zum Beispiel das PHP Projekt den MySQL Client den PHP-Sourcen beigelegt hatte und daß man deswegen Mühe hatte, ein PHP zu finden, das nicht mit einer MySQL-Datenbank reden konnte. Dieses Bundling ist es unter anderem gewesen, das den Siegeszug der LAMP Plattform begründet hat.</description>
    </item>
    
  </channel>
</rss>
