<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Die wunderbare Welt von Isotopp</title>
    <link>/tags/testing.html</link>
    <description>Recent content in testing on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rolling back a rollout</title>
      <link>/2020/01/17/rolling-back-a-rollout.html</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/01/17/rolling-back-a-rollout.html</guid>
      <description>Florian Haas asks on Twitter :
&amp;ldquo;How do you solve reliable rollback. The definition of a reliable rollback being: &amp;lsquo;get reset &amp;ndash;hard &amp;rsquo;, &amp;lsquo;git push -f&amp;rsquo; and then magic happening that returns your infra to the exact state it was at .&amp;rdquo;
The problem is relatively easy to solve with modern infrastructure-as-code for anything that is stateless. It becomes a bit more involved when you are dealing with things with state, such as database instances or Zookeepers or similar things.</description>
    </item>
    
    <item>
      <title>Zero Tests and Testing in Production</title>
      <link>/2017/05/29/zero-tests-and-testing-in-production.html</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/29/zero-tests-and-testing-in-production.html</guid>
      <description>There is a pretty cool Twitter thread by Sarah Mei, starting at
Thread I spammed into this at /14 .
@samphippen :
 Big secret: there exist vast tranches of business contexts in which having literally zero tests is fine.
 @sarahmei :
 Been thinking about this. Conventional wisdom says you need a comprehensive set of regression tests to go green before you release code. /1
You want to know that your changes didn&amp;rsquo;t break something elsewhere in the app.</description>
    </item>
    
    <item>
      <title>Load, Load Testing and Benchmarking</title>
      <link>/2017/02/16/load-load-testing-and-benchmarking.html</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/16/load-load-testing-and-benchmarking.html</guid>
      <description>(This article also available in german language .)
So you have a new system and want to know what the load limits are. For that you want to run a benchmark.
Basic Benchmarking   The main plan looks like this:
The basic idea: Find a box, offer load, see what happens, learn.
You grab a box and find a method to generate load. Eventually the box will be fully loaded and you will notice this somehow.</description>
    </item>
    
    <item>
      <title>Load, Load Testing und Benchmarks</title>
      <link>/2012/08/28/load-load-testing-und-benchmarks.html</link>
      <pubDate>Tue, 28 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/08/28/load-load-testing-und-benchmarks.html</guid>
      <description>(Diesen Artikel gibt es auch in englischer Sprache .)
So. Du willst also wissen, was genau die Leistungsgrenzen Deines Systems sind. Und dazu möchtest Du einen Lasttest fahren, um Ergebnisse zu ermitteln.
Die Grundidee Deines Plans sieht so aus:
Du nimmt Deine Kiste und findest eine Methode, um Last zu generieren. Dann wirst Du schon merken, wie weit das geht und wann die Kiste ausgelastet ist.
Der erste Fehler: Den Lastgenerator auf der zu testenden Kiste laufen lassen.</description>
    </item>
    
    <item>
      <title>Testing in Production</title>
      <link>/2011/12/02/testing-in-production.html</link>
      <pubDate>Fri, 02 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/12/02/testing-in-production.html</guid>
      <description>Mitte November ist auf The Testing Planet ein Artikel von Seth Eliot (Microsoft) erschienen mit dem Titel Testing in Production . Eliot schreibt über Software Services, also Dienste, die auf einer Website laufen, sodaß die User keine Anwendungen installieren müssen (Wir erinnern uns: Microsoft ist noch immer ganz groß darin, Software auf physikalischen read-only Medien an Benutzer zu verschicken, auch wenn diese Software seit einer Dekade kaum mehr als ein Loader für Updates über das Internet ist und nach der Installation vom Medium erst einmal alle eben installierten Dateien durch das heruntergeladene Update durch neuere Versionen ersetzt werden).</description>
    </item>
    
  </channel>
</rss>
