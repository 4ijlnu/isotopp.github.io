<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on Die wunderbare Welt von Isotopp</title>
    <link>/tags/sql.html</link>
    <description>Recent content in sql on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL: NULL is NULL</title>
      <link>/2020/08/25/null-is-null.html</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/25/null-is-null.html</guid>
      <description>Question: Hey, I got a UNIQUE INDEX, but I can store multiple rows with the same value, NULL. That is surprising. Is that a bug?
 This is a rewrite of the same in German from 9 years ago .
 root@localhost[kris]&amp;gt;createtablet(ainteger,binteger,unique(a,b));QueryOK,0rowsaffected(0.09sec)root@localhost[kris]&amp;gt;insertintotvalues(1,2);QueryOK,1rowaffected(0.01sec)root@localhost[kris]&amp;gt;insertintotvalues(1,2);ERROR1062(23000):Duplicateentry&amp;#39;1-2&amp;#39;forkey&amp;#39;t.a&amp;#39;This does not work, as expected. But this does:
root@localhost[kris]&amp;gt;truncatetablet;QueryOK,0rowsaffected(0.16sec)root@localhost[kris]&amp;gt;insertintotvalues(1,NULL);QueryOK,1rowaffected(0.02sec)root@localhost[kris]&amp;gt;insertintotvalues(1,NULL);QueryOK,1rowaffected(0.03sec)root@localhost[kris]&amp;gt;select*fromt;+------+------+ |a|b|+------+------+ |1|NULL||1|NULL|+------+------+ 2rowsinset(0.00sec)Why is that?
This is usually where I point people at SQL for Smarties: Advanced SQL Programming .</description>
    </item>
    
    <item>
      <title>Zu Besuch bei Redis</title>
      <link>/2012/09/23/zu-besuch-bei-redis.html</link>
      <pubDate>Sun, 23 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/09/23/zu-besuch-bei-redis.html</guid>
      <description>&lt;p&gt;Hier ist eine wichtige Zahl: Ein Coredump von einem MySQL auf einer Maschine
mit knapp unter 200G Speicher dauert 15 Minuten.  Auf SSD.  Auf eine
Festplatte dauert der gleiche Coredump dann knapp über 30 Minuten.&lt;/p&gt;
&lt;p&gt;Warum ist das eine wichtige Zahl?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NULL is NULL</title>
      <link>/2011/11/04/null-is-null.html</link>
      <pubDate>Fri, 04 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/11/04/null-is-null.html</guid>
      <description>Q&amp;gt; Sag mal, NULL zählt nicht bei einem UNIQUE INDEX? Zum Beispiel ein UNIQUE INDEX auf (a,b) und dann
ab1212Das geht nicht, da Duplikate Key. Aber
ab1NULL1NULLwird zugelassen.
Kris&amp;gt; Du kaufst bitte mal SQL für Smarties: Advanced SQL Programming und ißt das dann auf.
mysql&amp;gt;select*fromt;+----+------+ |id|d|+----+------+ |1|NULL||2|2||3|3||4|NULL|+----+------+ 4rowsinset(0.00sec)mysql&amp;gt;selectcount(*)asa,count(d)asb,count(coalesce(d,0))ascfromt;+---+---+---+ |a|b|c|+---+---+---+ |4|2|4|+---+---+---+ 1rowinset(0.00sec)mysql&amp;gt;selectd,coalesce(d,0)asdcfromt;+------+------+ |d|dc|+------+------+ |NULL|0||2|2||3|3||NULL|0|+------+------+ 4rowsinset(0.00sec)Kris&amp;gt; Und außerdem
mysql&amp;gt;select0=0,1=1,0=1,NULL=0,NULL=1,NULL=NULL;+-----+-----+-----+--------+--------+-----------+ |0=0|1=1|0=1|NULL=0|NULL=1|NULL=NULL|+-----+-----+-----+--------+--------+-----------+ |1|1|0|NULL|NULL|NULL|+-----+-----+-----+--------+--------+-----------+ 1rowinset(0.00sec)Q&amp;gt; Ah, es liegt also daran, daß NULL kein Wert ist, sondern einfach NICHTS.</description>
    </item>
    
    <item>
      <title>&#39;a&#39; = &#39;b&#39; = &#39;c&#39;</title>
      <link>/2010/09/10/a-b-c.html</link>
      <pubDate>Fri, 10 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/09/10/a-b-c.html</guid>
      <description>Kurzer SQL WTF von heute:
mysql&amp;gt;SELECT&amp;#39;a&amp;#39;=&amp;#39;b&amp;#39;;0mysql&amp;gt;SELECT&amp;#39;a&amp;#39;=&amp;#39;b&amp;#39;=&amp;#39;c&amp;#39;;1Warum ist das so?
Im MySQL Sourcecode ist in sql/sql_yacc.yy definiert:
%left EQ EQUAL_SYM GE GT_SYM LE LT NE IS LIKE REGEXP IN_SYM Damit ist der Operator EQ (das Vergleichheitszeichen) als links-assoziativ definiert. Vergleiche von Vergleichen sind also zugelassen,
1 = 2 = 3 ist also ein zulässiges Konstrukt und es wird als ( 1 = 2 ) = 3 evaluiert.
Statt links-assoziativ könnte es auch als rechts-assoziativ 1 = (2 = 3) oder als nicht-assoziativ (ein Mehrfachvergleich ist unzulässig) definiert sein.</description>
    </item>
    
    <item>
      <title>Covering indexes und MVCC</title>
      <link>/2010/09/09/covering-indexes-und-mvcc.html</link>
      <pubDate>Thu, 09 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/09/09/covering-indexes-und-mvcc.html</guid>
      <description>Für viele MySQL-Anwendungen sind Covering Indexes eine wichtige Sache. Domas hat einen Artikel darüber Wie Wikipedia von Covering Indexes profitiert , und auch sonst sind solche Indices für viele MySQLer ein täglicher Bestandteil der Optimierungsarbeit.
Nun las ich neulich in einem Artikel eine Seitenbemerkung, daß Postgres keine Covering Indices unterstützt und das scheint tatsächlich der Fall zu sein , auch wenn ich in der Doku selber keine Hinweise darauf gefunden habe.</description>
    </item>
    
    <item>
      <title>Die relationale Datenbank wird 40.</title>
      <link>/2010/06/08/die-relationale-datenbank-wird-40.html</link>
      <pubDate>Tue, 08 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/06/08/die-relationale-datenbank-wird-40.html</guid>
      <description>Nicht nur wird PHP im Juni 15 Jahre alt, sondern ein anderer, älterer Begleiter von PHP feiert ebenfalls ein Jubiläum:
Im Juni 1970 erschien in den Communications of the ACM der Artikel &amp;ldquo;A Relational Model of Data for Large Shared Data Banks &amp;rdquo; von E.F.Codd. Dieser Artikel ist die theoretische Grundlage für das, was später SQL und relationale Datenbanken werden sollte.
Seitdem MySQL und PHP vor 15 Jahren ausgezogen sind, das Web zu revolutionieren, ist SQL eine Haushaltssprache geworden - es ist inzwischen echt schwierig, Webspace zu kaufen, bei dem man nicht auch Zugriff auf eine MySQL-Datenbank hat, und entsprechend gehen HTML-, PHP- und SQL-Kenntnisse inzwischen einher.</description>
    </item>
    
    <item>
      <title>Was bedeutet eigentlich &#39;Relationale Algebra&#39;?</title>
      <link>/2010/04/28/was-bedeutet-eigentlich-relationale-algebra.html</link>
      <pubDate>Wed, 28 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/04/28/was-bedeutet-eigentlich-relationale-algebra.html</guid>
      <description>SQL ist eine Abfragesprache, die als mathematischen Unterbau die Relationenalgebra hat. Was genau ist das?
Da ist einmal der Begriff der &amp;ldquo;Algebra&amp;rdquo;. In der Wikipedia findet man die mathematische Definition der algebraischen Struktur, und sie ist, weil sie mathematischen Formalismen genügen muß, für den ungeübten ein wenig unhandlich zu lesen.
Dort steht aber nix anderes als &amp;lsquo;Wir haben eine Grundmenge A und einen definierten Satz von erlaubten Operationen auf A, und wir garantieren, das das Ergebnis jeder Operation wieder in A liegt.</description>
    </item>
    
    <item>
      <title>Gruppenweises TOP N in MySQL: Der Tabellengrößenreport</title>
      <link>/2010/03/09/gruppenweises-top-n-in-mysql-der-tabellengr-enreport.html</link>
      <pubDate>Tue, 09 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>/2010/03/09/gruppenweises-top-n-in-mysql-der-tabellengr-enreport.html</guid>
      <description>Jeder Datenbankserver bei uns hat ein Script laufen, daß den Inhalt von information_schema.tables jede Nacht einmal in eine Systemdatenbank in das DBA Schema kopiert. Dort haben wir dba.table_sizes:
root@sysmdb[dba]&amp;gt;showcreatetabletable_sizes\GTable:table_sizesCreateTable:CREATETABLE`table_sizes`(`hostname`varchar(64)NOTNULL,`datadir`varchar(64)CHARACTERSETlatin1COLLATElatin1_binNOTNULL,`report_date`dateNOTNULL,`table_schema`varchar(64)CHARACTERSETlatin1COLLATElatin1_binNOTNULL,`table_name`varchar(64)CHARACTERSETlatin1COLLATElatin1_binNOTNULL,`engine`varchar(64)NOTNULL,`data_length`bigint(20)NOTNULL,`index_length`bigint(20)NOTNULL,`table_rows`bigint(20)NOTNULL,UNIQUEKEY`hostname`(`hostname`,`datadir`,`report_date`,`table_schema`,`table_name`))ENGINE=InnoDBDEFAULTCHARSET=latin11rowinset(0.00sec)Gesucht war nun eine Query, die für jeden Sonntag eine Liste der 10 größten Tabellen eines bestimmten Servers &amp;lsquo;master&amp;rsquo; für 2010 produziert.
Die Lösung ist fragil insofern, als daß sie eine undokumentierte Eigenschaft des Servers ausnutzt. Aber sie ist auch schnell.
set@old:=&amp;#34;&amp;#34;,@count:=0;select\*from(select@count:=if(@old&amp;lt;=&amp;gt;report_date,@count+1,0)asc,@old:=report_dateasreport_date,hostname,table_name,(data_length+index_length)/1024/1024/1024asgbfromtable_sizeswheredate_format(report_date,&amp;#39;%W&amp;#39;)=&amp;#39;Sunday&amp;#39;andreport_date&amp;gt;&amp;#39;2010-01-01&amp;#39;andhostname=&amp;#39;master&amp;#39;anddatadir=&amp;#39;/mysql/bp/data/&amp;#39;andtable_schema=&amp;#39;bp&amp;#39;orderbyreport_date,gbdesc)astwheret.c&amp;lt;10;Wir definieren einen Zustandsspeicher @old, der das report_date der folgenden Zeile speichert und einen Zähler @count.</description>
    </item>
    
    <item>
      <title>Ein paar Gedanken zu Zeitreihendaten</title>
      <link>/2009/10/28/ein-paar-gedanken-zu-zeitreihendaten.html</link>
      <pubDate>Wed, 28 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/10/28/ein-paar-gedanken-zu-zeitreihendaten.html</guid>
      <description>Ich sitze hier auf der Open Source Monitoring Conference und unterhalte mich mit ein paar Nagios bzw. Icinga Entwicklern. Dabei hörte ich einen Haufen Flüche über NDO - Nagios Data Out. Ich schaue mir gerade die Dokumentation zum NDO Schema an und stelle fest, daß die Ideen hier auf eine Weise viele Fehler teilen, die auch dem MySQL Enterprise Manager Schema zugrunde liegen (Noch, das MEM-Team bastelt das grad um).</description>
    </item>
    
    <item>
      <title>Ein paar Gedanken zu Foreign Key Constraints</title>
      <link>/2009/10/20/ein-paar-gedanken-zu-foreign-key-constraints.html</link>
      <pubDate>Tue, 20 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>/2009/10/20/ein-paar-gedanken-zu-foreign-key-constraints.html</guid>
      <description>Ich lese gerade SQLite Foreign Key Support und ich muß sagen, ich kann mir ein leichtes Grinsen nicht verkneifen.
Also, ich finds ja gut, daß SQLite die Option für Foreign Key Constraints implementiert und ich finds sogar noch besser, daß mit DEFERRABLE INITIALLY DEFERRED sogar die einzig sinnvolle Weise das zu tun bereitgestellt wird, aber ich frag mich schon, wozu das gut sein soll.
Foreign Keys   Aber von vorne.</description>
    </item>
    
    <item>
      <title>MySQL: Integer Overflow</title>
      <link>/drafts/mysql-integer-overflow.html</link>
      <pubDate>Fri, 04 Jan 2008 00:00:00 +0000</pubDate>
      
      <guid>/drafts/mysql-integer-overflow.html</guid>
      <description>Der Fotodienst Flickr wurde vor 5 Jahren in Betrieb genommen. Am 29. Dezember wurde das Foto 2147483647 auf Flickr hochgeladen. Diese Zahl ist 2 hoch 31 minus 1, also MAXINT für einen 32 Bit Signed Integer. Dies hat zu einem Integer Overflow in einer Bibliothek geführt, die Signed Integer als ID für Flickr-Bilder verwendet hat. Hier sind ein paar simple Abfragen von INFORMATION_SCHEMA, mit denen man offensichtliche Designdummheiten bei Datenbankschemata finden kann: {% highlight console %} mysql&amp;gt; select table_schema, table_name, column_name, column_type from information_schema.</description>
    </item>
    
  </channel>
</rss>
