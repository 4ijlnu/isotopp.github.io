<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unix on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/unix.html</link>
    <description>Recent content in unix on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/unix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fertig gelesen: UNIX: A History and a Memoir</title>
      <link>https://blog.koehntopp.info/2021/09/05/fertig-gelesen-unix-a-history-and-a-memoir.html</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2021/09/05/fertig-gelesen-unix-a-history-and-a-memoir.html</guid>
      <description>The memoir of Brian Kernighan, and the story of how UNIX came to be and what working at Bell Labs was like at that time: UNIX: A History and a Memoir is required reading for anyone who wants to know where Unix concepts came from and what ideas were behind its inception.
 &amp;quot;UNIX: A History and a Memoir &amp;quot;, Brian Kernighan
Kernighan takes us through the history and the setting of Bell Labs, why it existed and what it did.</description>
    </item>
    
    <item>
      <title>Why do Ops and Sec people wear black</title>
      <link>https://blog.koehntopp.info/2020/08/19/why-do-ops-and-sec-people-wear-black.html</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/08/19/why-do-ops-and-sec-people-wear-black.html</guid>
      <description>For reasons that don&amp;rsquo;t need exploring at this juncture I tweeted  Once upon a time there were shared boxes, on which the local Unix easily had 200-300 users, Junior Developers at a University.
A /tmp/ls found easily 3-4 people per day that had . (dot) in their path.
No particular reason. Why?
 and followed up with
 Hope is not a strategy.
Neither is curl stackoverflow | sudo bash.</description>
    </item>
    
    <item>
      <title>Everything was a file, but we got better</title>
      <link>https://blog.koehntopp.info/2019/11/14/everything-was-a-file-but-we-got-better.html</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2019/11/14/everything-was-a-file-but-we-got-better.html</guid>
      <description>I fell into the Twitters again. @CarrickDB joked about Unix, Files and Directories:
 And that is a case of &amp;ldquo;Haha, only serious&amp;rdquo;. Because directories used to be files, and that was a bad time. Check out the V7 Unix mkdir command. At this point in history we do not have a mkdir(2) syscall, yet, so we need to construct the entire directory in multiple steps.
 mknod(2) an inode that has the S_IFDIR flag set , even if that macro does not even exist yet.</description>
    </item>
    
    <item>
      <title>But is it atomic?</title>
      <link>https://blog.koehntopp.info/2018/11/29/but-is-it-atomic.html</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2018/11/29/but-is-it-atomic.html</guid>
      <description>From Pluspora But is it atomic?   So a few days ago, a colleague asked “Why do we love files on disk?” and in the course of that discussion, I made a comment that, among other things, used the assumption that somebody is updating some file on some Linux system atomically. I wrote:
Let&amp;rsquo;s assume we are using local files, and we do so in a managed, sane way:</description>
    </item>
    
    <item>
      <title>Dennis Ritchie (Sep 1941-Okt 2011)</title>
      <link>https://blog.koehntopp.info/2011/10/13/dennis-ritchie-sep-1941-okt-2011.html</link>
      <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/10/13/dennis-ritchie-sep-1941-okt-2011.html</guid>
      <description>Das da ist Dennis Ritchie , dmr .
Dennis Ritchie schrieb zusammen mit Ken Thompson und vielen anderen Menschen in den späten 60er und den 70er Jahren die ersten Versionen des Unix-Betriebssystems, von dem viele der Systeme, die wir heute einsetzen, direkt abstammen oder substantiell beeinflußt wurden. Zusammen mit Brian Kernighan entwarf er die Programmiersprache C. Ritchie schrieb auch die Dokumentation zu diesen Systemen, und jeder Informatikstudent auf diesem Planeten hat seine Bücher &amp;lsquo;The C Programming Language&amp;rsquo; und eine Version des &amp;lsquo;Unix Programmers Manual&amp;rsquo; lesen müssen - sie sind noch heute im Druck.</description>
    </item>
    
    <item>
      <title>Acht Jahre SCO-Prozeß</title>
      <link>https://blog.koehntopp.info/2011/08/31/acht-jahre-sco-proze.html</link>
      <pubDate>Wed, 31 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2011/08/31/acht-jahre-sco-proze.html</guid>
      <description>Im März 2003 begann die Firma, die mal Caldera hieß und sich in SCO Group umbenannte, IBM auf eine Fantasiesumme von Schadenersatz zu verklagen, weil Ex-Caldera sich im Besitz des Unix-Copyrights wähnte und der Auffassung war, daß IBM im Rahmen seiner Linux-Initiative Ex-Caldera geraubmordkopiert hätte. Sich mit den Anwälten von IBM anzulegen ist eine unglaublich gute Idee, die der Idee, einen Feldzug in Rußland im Winter zu führen, in nichts nachsteht.</description>
    </item>
    
    <item>
      <title>Unix-&#34;Standards&#34;</title>
      <link>https://blog.koehntopp.info/2009/07/26/unix-standards.html</link>
      <pubDate>Sun, 26 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/07/26/unix-standards.html</guid>
      <description>Die Geschichte von Unix ist eine Geschichte der gescheiterten oder unbrauchbaren Standards - ihre Zahl ist Legion.
Egal in welche Richtung man schaut: Sun zum Beispiel hatte einmal einen auf Postscript basierenden Desktop - NeWS , der in gewissser Weise X11 um Jahrzehnte voraus war, sich aber nie hat durchsetzen können, unter anderem deswegen, weil das Ding von Sun als Waffe gegen andere Unix-Anbieter verwendet worden war und quasi tot-lizensiert wurde, gefolgt vonOpen Look und dann dem Motif-basierenden CDE .</description>
    </item>
    
    <item>
      <title>Historische Kernelsourcen</title>
      <link>https://blog.koehntopp.info/2008/05/27/historische-kernelsourcen.html</link>
      <pubDate>Tue, 27 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/05/27/historische-kernelsourcen.html</guid>
      <description>In anderen Artikeln habe ich ja schon an Hand von http://lxr.linux.no/ Strukturen im Linux-Kernel referenziert und in Erklärungen verwendet.
Auf Tamacom gibt es zum Vergleich die Quellen von Linux 2.6, FreeBSD 7, NetBSD 4.x, OpenBSD 4.x, GNU Hurd 0.3 und OpenSolaris zum verlinken. Auch liegen dort ein UNIX V7 Kernel und ein 4.3BSD rum.
Minnie hat eine schöne Sequenz wirklich alter Unix-Trees, der die Entwicklung der 70er Jahre und einige BSD-Trees miteinander vergleicht.</description>
    </item>
    
    <item>
      <title>fork und exec vs. CreateProcess</title>
      <link>https://blog.koehntopp.info/2007/01/07/fork-und-exec-vs-createprocess.html</link>
      <pubDate>Sun, 07 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2007/01/07/fork-und-exec-vs-createprocess.html</guid>
      <description>Disclaimer: Meine Windows-Kenntnisse sind beschränkt, veraltet und ausschließlich theoretischer Natur. Im Zweifel erzählt dieser Artikel Unsinn nach Hörensagen.
Nach dem Artikel form, exec, wait und exit habe ich mir aber einmal meine Kopie von Jeffrey Richters Windows - Programmierung für Experten (Advanced Windows) (1997) gegriffen und dort nachgeschlagen, wie man sich das mit den Prozessen und Programmen unter Windows vorstellt (oder jedenfalls vor 10 Jahren vorgestellt hat).
Windows hat zu diesem Zweck die Systemfunktion CreateProcess (10 Parameters).</description>
    </item>
    
    <item>
      <title>Filesysteme für theclaw (30 Jahre Unix Source)</title>
      <link>https://blog.koehntopp.info/2006/12/26/filesysteme-fuer-theclaw-30-jahre-unix-source.html</link>
      <pubDate>Tue, 26 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/12/26/filesysteme-fuer-theclaw-30-jahre-unix-source.html</guid>
      <description>&amp;mdash; Log opened Di Dez 26 15:52:09 2006
theclaw&amp;gt; Hey :] Spitze erklaerung zu ext2. Isotopp&amp;gt; Danke
theclaw&amp;gt; Bist du Kerneldeveloper?
Isotopp&amp;gt; Nein. Mysql Consultant.
theclaw&amp;gt; Hmm. Hab da was nicht verstanden bei der Erklärung. Und zwar: Was sind Datenblockzeiger?
Isotopp&amp;gt; Die Blockadressen von Datenblöcken einer Datei.
theclaw&amp;gt; Ich paste mal was
(0-11):9711-9722, (IND):9723, (12-267):9724-9979, (DIND):9980, (IND):9981, (268-523):9982-10237, (IND):10238, (524-779):10239-10494, (IND):10495, (780-1035):10496-10751, (IND):10752, (1036-1291):10753-11008, (IND):11009, (1292-1547):11010-11265, (IND):11266, (1548-1795):11267-11514 Isotopp&amp;gt; Habs im Originalartikel .</description>
    </item>
    
    <item>
      <title>User und Gruppen, Prozesse und Dateien</title>
      <link>https://blog.koehntopp.info/2005/11/01/user-und-gruppen-prozesse-und-dateien.html</link>
      <pubDate>Tue, 01 Nov 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/11/01/user-und-gruppen-prozesse-und-dateien.html</guid>
      <description>Heute im Irc stellte eine Teilnehmerin den folgenden Fragenschwall:
 Wie finde ich eigentlich heraus, was für Gruppen es auf einem Linuxsystem gibt? Wie füge ich da jemanden hinzu? Lege ich den zuerst als User an, ganz normal? Und: Wenn ich einen Ordner anlege, der nur für eine bestimmte Gruppe zugänglich sein soll, mache ich das doch über File Permissions, oder habe ich falsch gedacht?
 Die offensichtliche Antwort, das Nachsehen in /etc/group, funktioniert bei modernen Unixen nicht mehr zwingend, denn Gruppendefinitionen können nicht nur in lokalen Dateien stehen, sondern auch aus dem NIS, dem NIS+, einem LDAP oder einem Active Directory kommen.</description>
    </item>
    
    <item>
      <title>#!/bin/bash -- Brace Expansion</title>
      <link>https://blog.koehntopp.info/2005/10/08/bin-bash-brace-expansion.html</link>
      <pubDate>Sat, 08 Oct 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/10/08/bin-bash-brace-expansion.html</guid>
      <description>Eine Unix-Kommandoshell nimmt die Benutzereingabe und unterteilt sie in Worte. Das erste Wort einer Zeile ist ein Kommando, der Rest sind die Parameter des Kommandos. So weit so langweilig.
Interessant wird die Sache, weil eine Unix Shell gut mit Worten umgehen kann. So kann sie Worte ersetzen und dabei auch neue Worte generieren. Dies nennt man Expansion, und die Bash hat sehr viele Expansion-Mechanismen:
 brace expansion, tilde expansion, parameter expansion, variable expansion, arithmetic expansion, command substitution, word splitting und pathname expansion, sowie process substitution  werden in dieser Reihenfolge auf den Worten einer Zeile durchgeführt.</description>
    </item>
    
    <item>
      <title>Wieviel Load darf es denn sein?</title>
      <link>https://blog.koehntopp.info/2005/06/24/wieviel-load-darf-es-denn-sein.html</link>
      <pubDate>Fri, 24 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/06/24/wieviel-load-darf-es-denn-sein.html</guid>
      <description>In Wann ist die Serverload zu hoch? fragt Reimer:
 Die Frage, ob ein Serverload von n zu hoch sei, höre ich häufig. Die Antworten sind jedoch ebenso unterschiedlich. So wird häufig die Zahl 1,00 als normaler Wert gehandelt, aber genau so fallen Zahlen wie 5,00 und 8,00 etc.
 In Linux und Unix gibt es einige Zahlen, mit denen man die CPU-Auslastung des Systems ausdrücken kann. Da ist erst einmal die momentane CPU-Auslastung in Prozent, wie sie von top und anderen Tools angezeigt wird:</description>
    </item>
    
  </channel>
</rss>
