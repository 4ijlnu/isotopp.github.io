<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>container on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/container.html</link>
    <description>Recent content in container on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swap and Memory Pressure: How Developers think to how Operations people think</title>
      <link>https://blog.koehntopp.info/2018/01/22/swap-and-memory-pressure-how-developers-think-to-how-operations-people-think.html</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2018/01/22/swap-and-memory-pressure-how-developers-think-to-how-operations-people-think.html</guid>
      <description>There is a very useful and interesting article by Chris Down: &amp;ldquo;In defence of swap: common misconceptions &amp;rdquo;.
Chris explains what Swap is, and how it provides a backing store of anonymous pages as opposed to the actual code files, which provide backing store for file based pages. I have no problem with the information and background knowledge he provides. This is correct and useful stuff, and I even learned a thing about what cgroups can do for me.</description>
    </item>
    
    <item>
      <title>Scaling, automatically and manually</title>
      <link>https://blog.koehntopp.info/2017/08/09/scaling-automatically-and-manually.html</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/08/09/scaling-automatically-and-manually.html</guid>
      <description>There is an interesting article by Brendan Gregg out there, about the actual data that goes into the Load Average metrics of Linux. The article has a few funnily contrasting lines. Brendan Gregg states
 Load averages are an industry-critical metric – my company spends millions auto-scaling cloud instances based on them and other metrics […]
 but in the article we find Matthias Urlichs saying
 The point of &amp;ldquo;load average&amp;rdquo; is to arrive at a number relating how busy the system is from a human point of view.</description>
    </item>
    
    <item>
      <title>An abundance of IOPS and Zero Jitter</title>
      <link>https://blog.koehntopp.info/2017/07/26/an-abundance-of-iops-and-zero-jitter.html</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/07/26/an-abundance-of-iops-and-zero-jitter.html</guid>
      <description>Two weeks ago, I wrote about The Data Center in the Age of Abundance and claimed that IOPS are - among other things - a solved problem.
What does a solved problem look like?
Here is a benchmark running 100k random writes of 4K per second, with zero Jitter, at 350µs end-to-end write latency across six switches. Databases really like reliably timed writes like these. Maximum queue depth would be 48, the system is not touching that.</description>
    </item>
    
    <item>
      <title>The Data Center in the Age of Abundance</title>
      <link>https://blog.koehntopp.info/2017/07/07/the-data-center-in-the-age-of-abundance.html</link>
      <pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/07/07/the-data-center-in-the-age-of-abundance.html</guid>
      <description>We are currently experiencing a fundamental transition in the data center. In recent discussions, it occured to me how little this is understood by people in the upper layers of the stack, and how the implications are not clear to them.
In the past, three fundamentally scarce resources limited the size of the systems we could build:
 IOPS, bandwidth and latency.  All three of them are gone to a large extent, and the systems we are discussing now are fundamentally different from what we had in &amp;ldquo;The Past™&amp;rdquo;, with &amp;ldquo;The Past&amp;rdquo; being a thing five to ten years ago.</description>
    </item>
    
    <item>
      <title>&#34;Usage Patterns and the Economics of the Public Cloud&#34;</title>
      <link>https://blog.koehntopp.info/2017/06/12/usage-patterns-and-the-economics-of-the-public-cloud.html</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/06/12/usage-patterns-and-the-economics-of-the-public-cloud.html</guid>
      <description>The paper (PDF ) is, to say it in the words of Sascha Konietzko, eine ausgesprochene Verbindung von Schlau und Dumm (&amp;ldquo;a very special combination of smart and stupid&amp;rdquo;).
The site mcafee.cc is not related to the corporation of the same name, but the site of one of the authors, R. Preston McAfee.
The paper looks at the utilization data from a number of public clouds, and tries to apply some dynamic price finding logic to it.</description>
    </item>
    
    <item>
      <title>jq</title>
      <link>https://blog.koehntopp.info/2017/04/26/jq.html</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/04/26/jq.html</guid>
      <description>When dealing with Kubernetes, you will inevitably have to deal with config and data that is in JSON format. jq is a cool tool to handle this, but while the man page is complete, it is also very dry. A nice tutorial can be found at The Programming Historian, which uses some real world use cases. My personal use case is Converting JSON to CSV , and the inverse of that .</description>
    </item>
    
    <item>
      <title>Understanding sysdig</title>
      <link>https://blog.koehntopp.info/2017/04/20/understanding-sysdig.html</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/04/20/understanding-sysdig.html</guid>
      <description>The open source sysdig is a piece of software that does not quite, but almost, what strace or oprofile do: It instrument the kernel, and traces system calls as well as a few other kernel activities.
Youtube: Sysdig Open Source - Getting Started With Csysdig It does not utilize the ptrace(2) kernel facility, though, but its own interface. This interface picks up data in the kernel and writes it into a ring buffer.</description>
    </item>
    
    <item>
      <title>Curlbash, and Desktop Containers</title>
      <link>https://blog.koehntopp.info/2017/04/13/curlbash-and-desktop-containers.html</link>
      <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/04/13/curlbash-and-desktop-containers.html</guid>
      <description>I was having two independent discussions recently, which started with some traditional Unix person condemning software installing with curlbash (curl https://... | bash), or even curl | sudo bash.
I do not really think this to be much more dangerous than the installation of random rpm or dpkg packages any more. Especially if those packages are unsigned or the signing key gets installed just before the package.
The threat model really became a different one in the last few years, and the security mechanism have had to change as well.</description>
    </item>
    
    <item>
      <title>Containers 101</title>
      <link>https://blog.koehntopp.info/2017/02/17/containers-101.html</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/02/17/containers-101.html</guid>
      <description>It is helpful to remember that containers are just normal Unix processes with two special tricks.
Normal Unix Processes   Unix starts processes by performing a fork() system call to create a new child process.
The child process still contains the same program as the parent process, so the parent processes program still has control over the child. It usually performs a number of operations within the context of the new child, preparing the environment for the new program, from within.</description>
    </item>
    
    <item>
      <title>FOSDEM Talk: cgroups-v2</title>
      <link>https://blog.koehntopp.info/2017/02/07/fosdem-talk-cgroups-v2.html</link>
      <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/02/07/fosdem-talk-cgroups-v2.html</guid>
      <description>The talk The cgroups-v2 API is incompatible with cgroups-v1. This is a good thing, because the initial use cases for cgroups have not been fleshed out properly, and the API is kind of overly complicated from the POV of the consumers. v2 is being built with use cases and experience in mind, and is much easier to use. Control groups allow Linux users to limit the kind and amount of resources being used, which is employed by systemd, container drivers and many other things.</description>
    </item>
    
  </channel>
</rss>
