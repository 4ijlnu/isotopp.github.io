<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/security.html</link>
    <description>Recent content in security on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Nov 2021 11:29:11 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/security/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>99% secure</title>
      <link>https://blog.koehntopp.info/2021/10/02/99-secure.html</link>
      <pubDate>Sat, 02 Oct 2021 19:17:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2021/10/02/99-secure.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/Linuzifer/status/1443880403211857922&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linus Neumann zitiert Prof. Norbert Pohlmann&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ich glaube, das ist so.
Diese 100%ige Sicherheit wird es nicht geben, und wenn der Chaos Computer Bild was findet, dann findet er das, und dann sagen wir, das ist gut.
Und dann überlegen wir uns, wie wir das wieder schließen können und dann ist es wieder besser.
Und dann können sie auch weiter suchen.&lt;/p&gt;
&lt;p&gt;Also, ich glaube, wir brauchen auch eine andere Grundhaltung und es geht nicht immer um 100 %, sondern die 99 %, die reichen und wir müssen mit den Restrisiken umgehen.
Neben ganz schnell reagieren auch natürlich auch Versicherungen oder wer übernimmt die Verantwortung, wenn was passiert.
Das kennen wir ja alles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist eine ganze Menge Stoff zum Entpacken und ich habe das &lt;a href=&#34;https://twitter.com/isotopp/status/1444182876677943299&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;auf Twitter&lt;/a&gt;

 mal getan. Dies ist die Volltextversion dieses Threads.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;99 % Sicherheit, was soll das bedeuten?&lt;/li&gt;
&lt;li&gt;Der CCC ist mein Sicherheitscheck&lt;/li&gt;
&lt;li&gt;Hackerterrorcybercyberversicherungen und der Umgang mit Restrisiken&lt;/li&gt;
&lt;li&gt;Wir werden sowieso gehackt, Aufgeben ist eine Option.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Aber der Reihe nach:&lt;/p&gt;
&lt;h1 id=&#34;99-sicherheit-was-soll-das-bedeuten&#34;&gt;
    &lt;a href=&#34;#99-sicherheit-was-soll-das-bedeuten&#34;&gt;
	99 % Sicherheit, was soll das bedeuten?
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://pluspora.com/posts/6bd0e460002a013a97e8002590c0bfb8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Auf Pluspora&lt;/a&gt;

 hat Rainer Sokoll einen Portscan von &lt;code&gt;www.digital-enabling.eu&lt;/code&gt; veröffentlicht, bevor der Server panisch vom Netz genommen worden ist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;go&#34;&gt;~$ nmap -sT www.digital-enabling.eu.
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 14:24 CEST
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Nmap scan report for www.digital-enabling.eu. (213.133.104.155)
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Host is up (0.037s latency).
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;rDNS record for 213.133.104.155: www155.your-server.de
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Not shown: 935 filtered tcp ports (no-response), 51 closed tcp ports (conn-refused)
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;PORT     STATE SERVICE
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;21/tcp   open  ftp
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;22/tcp   open  ssh
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;25/tcp   open  smtp
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;80/tcp   open  http
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;110/tcp  open  pop3
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;143/tcp  open  imap
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;222/tcp  open  rsh-spx
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;443/tcp  open  https
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;465/tcp  open  smtps
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;587/tcp  open  submission
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;993/tcp  open  imaps
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;995/tcp  open  pop3s
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;3306/tcp open  mysql
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;5432/tcp open  postgresql
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Nmap done: 1 IP address (1 host up) scanned in 55.71 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wir sehen einen Server, der mehr Dienste produktiv ins Internet raushängt als ein übertrieben konfigurierter Honeypot, darunter &lt;code&gt;ftp&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt; und &lt;code&gt;postgresql&lt;/code&gt;.
Das ist, wie man mir in der Kundenkommunikationsschulung beigebracht hat zu sagen, &amp;ldquo;keine empfohlene oder unterstützte Konfiguration&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Wenn wir also sagen, &amp;ldquo;Sicherheit ist relativ&amp;rdquo; und &amp;ldquo;perfekte Sicherheit gibt es nicht&amp;rdquo;, dann ist es doch so, daß man da differenzieren kann.
Es gibt eben besser und schlechter konfigurierte Systeme.&lt;/p&gt;
&lt;p&gt;Und es gibt sogar dokumentierte und allgemein anerkannte Best Practices, in englischer und deutscher Sprache.
Von denen wird erwartet, daß man sie umsetzt.&lt;/p&gt;
&lt;p&gt;Das nennt die deutsche Rechtsprechung nicht ohne Grund &amp;ldquo;Grundschutz&amp;rdquo; und &amp;ldquo;Stand der Technik&amp;rdquo;.
Der Grundschutz, wie vom &amp;ldquo;Bundesamt für Sicherheit in der Informationstechnik&amp;rdquo; (BSI) veröffentlicht, hat viele Spezialhandbücher für besondere Anwendungszwecke.
Der Grund-Grundschutz ist definiert in &amp;ldquo;SYS.1.1: Allgemeiner Server&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Wie grundlegend ist der?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Der Baustein &amp;ldquo;SYS.1.1 Allgemeiner Server&amp;rdquo; ist für alle Server-IT-Systeme mit beliebigem Betriebssystem anzuwenden.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist Amtsdeutsch für &amp;ldquo;Wenn Du das nicht machst, dann brauchst Du gar nicht weiter zu spielen&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Im Grund-Grundschutz SYS.1.1 gibt es Grund-Grund-Grundschutzanforderungen, im Kapitel 3.1 &amp;ldquo;Basis-Anforderungen&amp;rdquo;.
Dort wird in SYS.1.1.A2 &amp;ldquo;Benutzerauthentisierung an Servern&amp;rdquo;, gleich nach der geeigneten Aufstellung des Gerätes, gefordert:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Für die Anmeldung von Benutzern und Diensten am Server MÜSSEN Authentisierungsverfahren
eingesetzt werden, die dem Schutzbedarf der Server angemessen sind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist Amtsdeutsch für &amp;ldquo;Benutzeraccounts ohne Passworte darf es nicht geben&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Danach kommen ein paar Anforderungen aus früheren Versionen des Dokumentes und eine, die für Angriffe nicht relevant ist, und dann gleich als nächstes SYS.1.1.A6 &amp;ldquo;Deaktivierung nicht benötigter Dienste&amp;rdquo;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alle nicht benötigten Dienste und Anwendungen MÜSSEN deaktiviert oder deinstalliert werden, vor
allem Netzdienste.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wir müssen den Portscan da oben im Licht dieser grundlegenden Grundanforderungen vom allergrundlegensten ersten Kapitel des Grundschutzes lesen, von dem es einleitend heißt&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Die folgenden Anforderungen MÜSSEN für den Baustein SYS.1.1 Allgemeiner Server vorrangig erfüllt
werden.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das war nicht der Fall.&lt;/p&gt;
&lt;p&gt;Damit ist auch die 99 %-Latte gerissen. Es geht stattdessen darum, dass überhaupt die allerersten grundlegenden Basisanforderungen nicht erfüllt werden, die man braucht, um überhaupt ernsthaft Security angehen zu können.&lt;/p&gt;
&lt;p&gt;Es ist üblicherweise nicht möglich eine Maschine in der von Rainer Sokoll dokumentierten Konfiguration produktiv zu betreiben, wenn irgendein Auditor einmal auch nur oberflächlich über eine Systemkonfiguration geguckt hat.
Wir können damit ausschließen, daß für dieses System und seine Betreiberorganisation ein Security-Review stattgefunden hat, und es ist wahrscheinlich, daß ein Sicherheitsprozess überhaupt nicht existiert.&lt;/p&gt;
&lt;p&gt;Wie dem auch sei: Prozente sind bei Security ein schwieriges Maß.
Ein kompromittiertes System ist ja nicht 43 % gehackt, sondern 100 % im Eimer.&lt;/p&gt;
&lt;p&gt;Ein besseres Bild: Raising the bar.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/10/this-tall.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Raising the bar&amp;rdquo; im Security-Sinne bedeutet üblicherweise, daß man den Personenkreis möglicher Angreifer verkleinern will, indem man versucht die Anforderungen höher zu schrauben, die ein erfolgreicher Angreifer an Ausbildung, finanzieller Ausstattung und Zeitaufwand mitbringen muss.&lt;/p&gt;
&lt;p&gt;Anders gesagt: &amp;ldquo;Unsere Systeme sind so konfiguriert, daß nicht jeder spaßorientierte Mensch auf Mate an einem langsamen Samstagabend in Quarantäne damit Karussell fahren kann.&amp;rdquo; wäre schon einmal ein guter Anfang.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;w99 % Sicherheit&amp;rdquo; würde in dieser Interpretation also bedeuten, daß 99 % der Population nicht in der Lage sind, die Installation im Vorübergehen mit dem Arsch einzureißen.
Aber wenn einer vom 1 % das tut, liegt das System dennoch 100 % am Boden. Das ist eine wichtige Beobachtung, über die wir weiter unten noch einmal reden müssen.&lt;/p&gt;
&lt;p&gt;So eine Konfiguration in der Produktion im öffentlichen Internet sagt aber auch etwas über die allgemeine Prozessreife in einer Organisation. Es ist statistisch eher ungewöhnlich, dass so konfigurierte Server mit sauberer und geplanter Software-Entwicklung von sicherheitskritischer Software korrelieren.&lt;/p&gt;
&lt;p&gt;Bei Software, die sagen wir einmal Führerscheindaten verwaltet, wäre es aber schon wichtig zu wissen, daß ihr Entwicklungsprozess Anforderungen genügt, die es erlauben, Aussagen über die Software bezüglich Verhalten, Sicherheit und dergleichen zu machen. Man will mindestens erst einmal nachvollziehen können, was da an Komponenten drin ist, und wer da wann warum welche Änderungen mit welchem Ziel vorgenommen hat, um dann an Tests zu sehen, daß das funktioniert hat.&lt;/p&gt;
&lt;h1 id=&#34;der-ccc-ist-mein-sicherheitscheck&#34;&gt;
    &lt;a href=&#34;#der-ccc-ist-mein-sicherheitscheck&#34;&gt;
	Der CCC ist mein Sicherheitscheck
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Der CCC ist kein Sicherheitsdienstleister.&lt;/p&gt;
&lt;p&gt;Als ich zuletzt nachgesehen habe war der CCC eine Vereinigung von Leuten mit dem Ziel, Spaß am Gerät zu haben. Das kann auch Dein Gerät sein, aber das ist dann eher schlecht für Dich.&lt;/p&gt;
&lt;p&gt;Auf keinen Fall ersetzt das ein Sicherheitskonzept. Ein Sicherheitskonzept würde&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ein organisatorisches und inhaltliches Konzept für die Anwendung haben,&lt;/li&gt;
&lt;li&gt;und dann einen Prozess, der dies in der Entwicklung umsetzt und dokumentiert, daß die Anforderungen erfüllt werden.&lt;/li&gt;
&lt;li&gt;Dann hätte man ein ebensolches Konzept für den Betrieb&lt;/li&gt;
&lt;li&gt;und einen Prozess, der dies im Betrieb umsetzt und dokumentiert, daß die Anforderungen erfüllt werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Und ganz wichtig:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;einen Plan, der umgesetzt wird, wenn es dann doch schief geht.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Denn es wird doch schief gehen - das sind dann die von Prof. Pohlmann angesprochenen Restrisiken.
&lt;a href=&#34;https://www.slideshare.net/isotopp/security-management-sys11-version-harald-wagener&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hier&lt;/a&gt;

 sind ein paar Slides von &lt;a href=&#34;https://twitter.com/mausdompteur&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Harald Wagener&lt;/a&gt;

, basierend auf Ideen von Harald und ein paar noch älteren Slides von mir.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/10/this-tall2.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Ein Risiko Management Prozess ist wie jeder Prozess eine Schleife, bei denen man Angreifer und Angriffe identifiziert, Risiken bewertet, Maßnahmen gegen die Risiken definiert und umsetzt, und dann wiederholt.
Die Maßnahmen können wir nicht beliebig weit treiben, denn betriebliche Notwendigkeiten setzen uns Grenzen: &amp;ldquo;Die Server abschalten und im Marianengraben versenken&amp;rdquo; ist keine Option.
Damit bleiben uns Restrisiken, die eventuell versicherbar sind.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/10/this-tall3.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Der Risiko-Managementprozess ist ein Prozess.
Er unterliegt einer Evaluierung in der Retrospektive, und dann Anpassungen.
Ich habe das &lt;a href=&#34;https://blog.koehntopp.info/2020/06/15/pizza-people-projects-and-processes.html&#34;&gt;am Beispiel einer Pizzeria&lt;/a&gt;

 anderswo schon einmal ausführlicher diskutiert.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/10/this-tall3.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Und während es super schwer ist, Security zu messen, gibt es immerhin Maße für Prozessreife, etwa das Capability Maturity Modell, über das wir auch im obigen Pizzeria-Beispiel reden.&lt;/p&gt;
&lt;p&gt;Und das bringt uns zu&lt;/p&gt;
&lt;h1 id=&#34;hackerterrorcybercyberversicherungen-und-der-umgang-mit-restrisiken&#34;&gt;
    &lt;a href=&#34;#hackerterrorcybercyberversicherungen-und-der-umgang-mit-restrisiken&#34;&gt;
	Hackerterrorcybercyberversicherungen und der Umgang mit Restrisiken
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Ich sagte weiter oben&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aber wenn einer vom 1 % das tut, liegt das System dennoch 100 % am Boden. Das ist eine wichtige Beobachtung, über die wir weiter unten noch einmal reden müssen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist hier.&lt;/p&gt;
&lt;p&gt;Eine HTCCV ist eine Versicherung, die Du abschließen kannst, um Schäden abzudecken, die auftreten, wenn Du dann doch gehackt wirst.
Der Versicherer übernimmt dann die Kosten aus Forderungen gegen Dich, die im Nachgang zu so einem Hack auftreten.&lt;/p&gt;
&lt;p&gt;Wenn Du so eine HTCCV haben willst, dann wird der Versicherer in der Regel seinen Taschenrechner anwerfen und Dir einen Tarif machen, der auf der Einschätzung Deiner Sicherheit durch einen von ihm beauftragten Auditor basiert.&lt;/p&gt;
&lt;p&gt;Das heißt, der Anbieter wird Dich nach den oben erwähnten Plänen für ein Risiko Management fragen, einen langen, strengen Blick auf die Pläne und ihre Umsetzung werfen, und danach die Prämie bemessen. Wenn er die Risiken für versicherbar hält.&lt;/p&gt;
&lt;p&gt;Wenn man nach dem Anruf beim Versicherer ein paar Tastendrücke hört, ein irres Kichern und dann einen Klick in der Leitung, dann ist das eher nicht der Fall - siehe den Portscan ganz oben.&lt;/p&gt;
&lt;p&gt;Als Inhaber einer HTCCV wird man also regelmäßig, meist jährlich oder im jährlichen Wechsel mit einer Datenschutz-Prüfung die Auditoren im Haus haben.
Sie werden jedes Mal einen grundlegenden Überblick haben wollen und jedes Jahr ein anderes Thema zur besonderen Vertiefung auswählen.&lt;/p&gt;
&lt;p&gt;Damit hat man auch den von mir oben geforderten Test mit Audit als Teil der Versicherungsauflagen.
Meiner persönlichen Erfahrung mit solchen Auditoren nach finden sie solche verscharchten Setups wie das ganz oben in weniger als 15 Sekunden.
Das deutet darauf hin, daß auch eine HTCCV für dieses Projekt eher nicht bestand.&lt;/p&gt;
&lt;h1 id=&#34;wir-werden-sowieso-gehackt-aufgeben-ist-eine-option&#34;&gt;
    &lt;a href=&#34;#wir-werden-sowieso-gehackt-aufgeben-ist-eine-option&#34;&gt;
	Wir werden sowieso gehackt, Aufgeben ist eine Option.
    &lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Der Satz &amp;ldquo;Hundertprozentige Sicherheit gibt es nicht&amp;rdquo; wird gerne als erster Halbsatz der Aussage verwendet, die mit &amp;ldquo;und darum brauchen wir uns gar nicht anzustrengen.&amp;rdquo; endet.
Das ist auch der Tenor von Prof. Pohlmann oben.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2021/10/this-tall5.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://quotes.yourdictionary.com/articles/who-said-hope-is-not-strategy.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hope is not a strategy&lt;/a&gt;

&amp;rdquo; ist nicht nur ein beliebtes Zitat, sondern auch ein gerne von Google SREs verwendetes Motto.&lt;/p&gt;
&lt;p&gt;Auch dem Laien ist intuitiv klar, dass &amp;ldquo;Aufgeben&amp;rdquo; keine skalierbare Strategie ist.
Ich habe hier versucht zu erklären, warum die Laien-Intuition genau auf den Punkt ist.&lt;/p&gt;
&lt;p&gt;Darum reden wir von Schutzlevel, &amp;ldquo;raising the bar&amp;rdquo; und wenn wir von Prozenten reden, dann eher mit Hinblick auf &amp;ldquo;wie viel Prozent von &lt;Grundmenge&gt; wären denn in der Lage, einen ernstzunehmenden Angriff vorzutragen?&amp;rdquo;
Also wieviel Zeit, Kapital und Ausbildung braucht ein Angreifer, um uns gefährlich werden zu können?&lt;/p&gt;
&lt;p&gt;Wenn es also in der Gemeinschaft von technikaffinen Personen auf Mate Vorbehalte gegen dieses Führerschein ID-Wallet gibt, und Widerspruch gegen die Haltung von Prof. Pohlmann, dann deswegen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why do Ops and Sec people wear black</title>
      <link>https://blog.koehntopp.info/2020/08/19/why-do-ops-and-sec-people-wear-black.html</link>
      <pubDate>Wed, 19 Aug 2020 17:05:47 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/08/19/why-do-ops-and-sec-people-wear-black.html</guid>
      <description>&lt;p&gt;For &lt;a href=&#34;https://www.imdb.com/title/tt0108756&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;reasons that don&amp;rsquo;t need exploring at this juncture&lt;/a&gt;

 I &lt;a href=&#34;https://twitter.com/isotopp/status/1296073392655933444&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweeted&lt;/a&gt;

&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once upon a time there were shared boxes, on which the local Unix easily had 200-300 users, Junior Developers at a University.&lt;/p&gt;
&lt;p&gt;A /tmp/ls found easily 3-4 people per day that had . (dot) in their path.&lt;/p&gt;
&lt;p&gt;No particular reason. Why?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and followed up with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hope is not a strategy.&lt;/p&gt;
&lt;p&gt;Neither is &lt;code&gt;curl stackoverflow | sudo bash&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tmpls&#34;&gt;
    &lt;a href=&#34;#tmpls&#34;&gt;
	/tmp/ls
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;I was asked to explain: &amp;ldquo;What is /tmp/ls?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;/tmp/ls is a shell script installed as executable in /tmp/ls. If you have . (dot, the current directory) early in your path, it shadows the command /bin/ls, which you use to list the current directory.&lt;/p&gt;
&lt;p&gt;So when you &lt;code&gt;cd /tmp&lt;/code&gt; and then &lt;code&gt;ls&lt;/code&gt; you are executing my script instead of the actual &lt;code&gt;/bin/ls&lt;/code&gt; command. You are now inadvertently running my code under your permissions. When I finish my script with &lt;code&gt;exec /bin/ls &amp;quot;$@&amp;quot;&lt;/code&gt; you won&amp;rsquo;t even notice, because it will run the normal &lt;code&gt;/bin/ls&lt;/code&gt; command at the end.&lt;/p&gt;
&lt;p&gt;The mistake is to have any directory in your path that can contain code controlled by another person besides you and root. That is, a world-writeable &lt;code&gt;/usr/local/bin&lt;/code&gt; in - say - an AIX install would amount to the same exposure (A lot of old Unices such as AIX, HP/UX and SGI would ship with world writeable directories of one kind or the other by default).&lt;/p&gt;
&lt;h2 id=&#34;the-777-root-cron&#34;&gt;
    &lt;a href=&#34;#the-777-root-cron&#34;&gt;
	The 777 root cron
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The same scenario is a script globally installed on all Macs by JAMF, running through cron as root every minute. The same JAMF sets the enclosing directory to 777 (full access for everybody). Due to how permissions work in Unix, this allows anybody to remove, rename or replace the script itself, no matter what the script permissions are.&lt;/p&gt;
&lt;p&gt;It is instant root for anybody who cares: You replace the script with your own content, wait a minute for the cron to hit it, and put the original script back. Or not, depending on how you feel that day.&lt;/p&gt;
&lt;p&gt;The remarkable part of this particular incident is that none of the multitude of endpoint security products also installed by the same JAMF detected or quarantined this script. So much for that.&lt;/p&gt;
&lt;h2 id=&#34;the-world-writeable-fileshare&#34;&gt;
    &lt;a href=&#34;#the-world-writeable-fileshare&#34;&gt;
	The world writeable fileshare
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Other fun things that should not have happened: A university of applied science exported their AIX home directories by NFS, world-writeable, once. That is, for several years, their site was a well known Shell-o-matic.&lt;/p&gt;
&lt;p&gt;Why is this bad?&lt;/p&gt;
&lt;p&gt;Anybody who mounted this on their own machine could create a user account with a matching UID, go into the mounted user home and drop a .rlogin file of appropriate content (The .rlogin reference should tell you how old that is).&lt;/p&gt;
&lt;p&gt;The fun part is that the university in question eventually migrated to Solaris, and that included all the&amp;hellip; interesting configuration.&lt;/p&gt;
&lt;p&gt;Apparently SMB fileshares can serve the same purpose. Also, Windows always has . (dot) in the front of the path, implicitly.&lt;/p&gt;
&lt;h2 id=&#34;external-storage&#34;&gt;
    &lt;a href=&#34;#external-storage&#34;&gt;
	External storage
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A lot of people have world-readable backup devices such as a 644 /dev/rmt. If the backup tape from last night is left in that drive it does not matter much what the permissions on the original files are.&lt;/p&gt;
&lt;p&gt;You can read the files from backup, and restore them with any permission you like.&lt;/p&gt;
&lt;h2 id=&#34;this-makes-me-sad&#34;&gt;
    &lt;a href=&#34;#this-makes-me-sad&#34;&gt;
	This makes me sad
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;For some reasons each of these things, all of which are from personal experience up to 25 years ago, still happen today.&lt;/p&gt;
&lt;p&gt;That is why ops people wear black. Now you know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mailbox.org, Google, OAuth und Less Secure Applications</title>
      <link>https://blog.koehntopp.info/2020/01/17/mailboxorg-google-oauth-und-less-secure-applications.html</link>
      <pubDate>Fri, 17 Jan 2020 18:44:34 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/01/17/mailboxorg-google-oauth-und-less-secure-applications.html</guid>
      <description>&lt;p&gt;Heise schreibt in
&lt;a href=&#34;https://www.heise.de/ix/meldung/Mailbox-org-Google-sperrt-unsichere-Dritte-von-Kalender-aus-4640540.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mailbox.org: Google sperrt &amp;ldquo;unsichere&amp;rdquo; Dritte vom Kalender aus&lt;/a&gt;


über Anwendungen von Dritten und den Zugriff auf Google Kalender, Google Mail und andere Dienste, die mit GSuite interagieren. Der Artikel wirft leider eine Reihe von Dingen durcheinander, was schade ist, weil er einen wichtigen Punkt machen will.&lt;/p&gt;
&lt;h2 id=&#34;oauth2-vs-lsa&#34;&gt;
    &lt;a href=&#34;#oauth2-vs-lsa&#34;&gt;
	OAuth2 vs. LSA
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Im Artikel geht es um &lt;a href=&#34;https://en.wikipedia.org/wiki/OAuth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAuth2&lt;/a&gt;

. OAuth2 ist kein neues Verfahren. Es handelt sich um einen Standard, bei dem ein Dienstleister Drittanwendungen den Zugriff auf Dienste erlaubt, indem er der Drittanwendung relativ automatisch ein Logintoken zuteilt, das&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;zeitlich begrenzt ist&lt;/li&gt;
&lt;li&gt;die Identifikation der Anwendung und&lt;/li&gt;
&lt;li&gt;des Anwenders erlaubt und&lt;/li&gt;
&lt;li&gt;einen Scope (einen Satz eingeschränkte Zugriffsrechte) hat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Um also auf den Google Kalender oder in Zukunft bald auch IMAP zugreifen zu können, muß eine Drittanwendung ein Token vorzeigen. Das Token, das etwa Busycal auf dem Mac verwendet, ist von dem Token verschieden, mit dem ACal+ auf Android auf meinen Google Kalender zugreift. Theoretisch könnte Busycal auch Vollzugriff auf den Kalender haben, während das ACal+ Token einen Read-Only Scope hat.&lt;/p&gt;
&lt;p&gt;Beide sind verschieden von meinem mit 2FA gesicherten Zugang zu meinem Google Account, der nicht nur Kalender und Mail enthält, sondern auch mein Wallet, meine gekauften Inhalte, mein Youtube, meinen Google Cloud Zugang und meine Google Ads. Wird durch eine Sicherheitslücke eines der Token publik, ist das kein Beinbruch (der Schaden ist auf den Scope begrenzt) und leicht zu korrigieren (die Zugriffsrechte sind wiederrufbar).&lt;/p&gt;
&lt;p&gt;Google gibt einem eine Security-Übersicht für Deinen Account in &lt;a href=&#34;https://myaccount.google.com/security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Account&lt;/a&gt;

. Auf der &lt;a href=&#34;https://myaccount.google.com/permissions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Permissions&lt;/a&gt;

-Seite kann man sehen, wer Zugriff hat und was die dürfen. Nach Anklicken sieht man auch, wann das war und man kann den Zugriff wiederrufen.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/lsa-review-screen.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://myaccount.google.com/permissions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Permissions&lt;/a&gt;

 Seite für OAuth2 Anwendungen in &lt;a href=&#34;https://myaccount.google.com/security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Account&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Das alles ist eine Feine Sache™ und ein großer Fortschritt. In der Vergangenheit hätte man sich bei einem CalDAV oder IMAP Server mit dem Usernamen und Paßwort eingeloggt, und hätte dadurch den gesamten Google Account mit allen Diensten, die da dran hängen, exponiert und gefährdet. In so einem Kontext ist insbesondere der Wiederruf und die Recovery nach einem Security-Problem so gut wie unmöglich.&lt;/p&gt;
&lt;p&gt;Das weiß Google auch, und daher gab es bisher für Programme, die OAuth2 nicht beherrschen, eine Sonderlocke: &amp;ldquo;Application Specific Passwords for Less Secure Applications&amp;rdquo; (LSA).&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/lsa-appspecific-passwords.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Application Specific Passwords for Less Secure Applications&amp;rdquo; (LSA) ist auch in Google Account zu finden und hoffentlich leer.&lt;/p&gt;
&lt;p&gt;Mit LSA legt man ein Kennwort für seinen Loginnamen fest, das an eine Anwendung gebunden ist und gescoped ist, also im Zugriff beschränkt. Da Google dieses Paßwort generiert, ist es auch sicher vom Accountpaßwort verschieden.&lt;/p&gt;
&lt;p&gt;Man kann sich also mit einem Legacy Client, der auch in 2020 noch kein OAuth2 kann, auf einem GMail IMAP oder CalDAV einloggen und riskiert dennoch nicht seinen ganzen Account. Gut so.&lt;/p&gt;
&lt;h2 id=&#34;oauth2-playground&#34;&gt;
    &lt;a href=&#34;#oauth2-playground&#34;&gt;
	OAuth2 Playground
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Es gibt einen &lt;a href=&#34;https://developers.google.com/oauthplayground/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAuth2 Playground&lt;/a&gt;

 bei Google. Mit dem und der &lt;a href=&#34;https://developers.google.com/identity/protocols/OAuth2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Entwicklerdokumentation&lt;/a&gt;

 kann man einmal herumspielen. Oder man verwendet deren &lt;a href=&#34;https://github.com/google/gmail-oauth2-tools/wiki/OAuth2DotPyRunThrough&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;oauth2.py&lt;/a&gt;

. Für jeden Dienst gibt es eine Dokumentation, die die OAuth2 Scopes beschreibt, die existieren.&lt;/p&gt;
&lt;p&gt;Hier ist die &lt;a href=&#34;https://developers.google.com/gmail/api/auth/scopes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dokumentation für GMail Scopes&lt;/a&gt;

. Sie ist wichtig, wir werden weiter unten noch darauf zurück kommen.&lt;/p&gt;
&lt;p&gt;Wenn man den OAuth2 Playground einmal durchspielt passiert dies:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/lsa-oauth2-playground-1.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Schritt 1: Wähle einen OAuth2 Scope aus, hier gmail.readonly. Auf der rechten Seite sieht man die entsprechenden REST Requests und Responses, sodaß ein Entwickler gleich sehen kann, wie so etwas auf dem Kabel aussieht. In der Praxis wird dieser Schritt vom Anwendungsentwickler ausgeführt und man sieht ihn nicht.&lt;/p&gt;
&lt;p&gt;Er legt die Identität der Anwendung fest, so wie sie für den Endanwender nachher in Google Account erscheint.&lt;/p&gt;
&lt;p&gt;Führt man diesen Schritt durch, gibt es einen typischen Google Autorisierungscreen: Anwendung Google Playground will Read Access auf unseren Gmail Account. Ist das okay so?&lt;/p&gt;
&lt;p&gt;Sagt man ja, gibt es einen Alarm via Push Notification und eine Nachricht in Google Mail: Jemand hat neuen Zugriff auf unseren Account bekommen.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/lsa-cellphone.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Terror auf meinem Handy: &amp;ldquo;Google OAuth2 Playground&amp;rdquo; darf jetzt auf mein GMail.&lt;/p&gt;
&lt;p&gt;Das ist auch eine Gute Sache™, denn auf diese Weise ist sichergestellt, daß so ein Zugriff nicht leise und aus Versehen erfolgt.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/lsa-oauth2-playground-2.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Mit dem Authorization Code aus Schritt 1 kann die Anwendung sich jetzt ein Zugriffstoken holen, das eine Stunden gilt. Der Grund ist, daß auf diese Weise die Anwendung auf jeden Fall spätestens eine Stunde nach dem Widerruf von Rechten ausgesperrt ist, auch wenn dieses spezifische Token nicht gesondert widerrufen wird.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2020/01/lsa-oauth2-playground-3.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Und mit diesem Access Token kann die Anwendung dann endlich GMail API Funktionen aus dem Read Only Scope aufrufen, zum Beispiel Identity. Sie kann keine Non-GMail Aktionen ausführen und sie kann auch keine Nachrichten senden, Filter bearbeiten oder ähnliches. Das wäre ein anderer Scope.&lt;/p&gt;
&lt;h2 id=&#34;scopes-in-gmail&#34;&gt;
    &lt;a href=&#34;#scopes-in-gmail&#34;&gt;
	Scopes in GMail
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Die Liste der &lt;a href=&#34;https://developers.google.com/gmail/api/auth/scopes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gmail Scopes&lt;/a&gt;

 in der Entwicklerdokumentation klassifiziert Scopes auf verschiedene Weisen, Recommended, Sensitive und Restricted. Die meisten Scopes sind Restricted.&lt;/p&gt;
&lt;p&gt;Die Doku sagt weiter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Restricted—These scopes provide wide access to Google User Data and require you to go through a restricted scope verification process. For information on this requirement, see Google API Services: User Data Policy and Additional Requirements for Specific API Scopes. If you store restricted scope data on servers (or transmit), then you need to go through a security assessment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wenn man also eine Serveranwendung (Mailbox.org, Exchange, Open Exchange oder ähnliches) schreibt, und diese Restricted Scope Data runterlädt und speichert, dann wird ein Security Assessment notwendig.&lt;/p&gt;
&lt;h2 id=&#34;den-heise-artikel-noch-einmal-lesen&#34;&gt;
    &lt;a href=&#34;#den-heise-artikel-noch-einmal-lesen&#34;&gt;
	Den Heise Artikel noch einmal lesen
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Jetzt lesen wir den &lt;a href=&#34;https://www.heise.de/ix/meldung/Mailbox-org-Google-sperrt-unsichere-Dritte-von-Kalender-aus-4640540.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heise Artikel&lt;/a&gt;

 noch einmal.&lt;/p&gt;
&lt;p&gt;Da heißt es:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google forciert den Einsatz von Oauth für seine Mail-, Kalender- und Drive- Dienste, sperrt dabei aber viele Dienstleister und ältere Software aus. Wer bisher beispielsweise Googles Kalender in einer nicht von Google entwickelten Anwendung oder Webseite ohne Oauth integriert, muss sich demnächst entweder umstellen oder darauf hoffen, dass sich sein Anbieter von Google-Partnern in den USA in einem kostspieligen und wenig transparenten Verfahren zertifizieren lässt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Was heißt das? Der Artikel erklärt das nicht.&lt;/p&gt;
&lt;p&gt;Google hat bereits am 30. Oktober letzten Jahres &lt;a href=&#34;https://gsuiteupdates.googleblog.com/2019/07/limit-access-LSA.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LSA für Business Kunden&lt;/a&gt;

 sanft eingeschränkt. Alle Accounts mit einer leeren LSA Liste haben &amp;ldquo;LSA erlauben&amp;rdquo; auf &amp;ldquo;Nein&amp;rdquo; gestellt bekommen, für andere Accounts, die LSA Einträge haben, sind andere Einschränkungen gemacht worden.&lt;/p&gt;
&lt;p&gt;Ab Mitte diesen Jahres wird &lt;a href=&#34;https://gsuiteupdates.googleblog.com/2019/12/less-secure-apps-oauth-google-username-password-incorrect.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LSA weiter eingeschränkt&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Das heißt, zum Zugriff auf Google Dienste wird LSA erschwert oder ganz abgeschaltet und OAuth2 verpflichtend. Soweit eine gute Sache.&lt;/p&gt;
&lt;p&gt;Aber: Ein Mailserver hat bisher via LSA Vollzugriff auf einen GMail Account und einen Kalender bekommen, ohne sich dem für Restricted Scopes notwendigem Review zu unterziehen.&lt;/p&gt;
&lt;p&gt;Dadurch, daß OAuth2 jetzt verpflichtend wird, werden Firmen wie Open Exchange und Mailbox.org also OAuth2 Reviews aufgezwungen, weil das LSA Schlupfloch nicht mehr existiert. Und das ist genau der Punkt, der beklagt wird, nur daß der Artikel das nicht erklärt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mailbox.org-Betreiber Peer Heinlein kritisiert Googles Vorgehen, das ab 15. Januar die Zertifizierung von &amp;ldquo;Less Secure Apps&amp;rdquo; vorschreibt. Im Gespräch mit der iX erklärt Heinlein, es sei grundsätzlich nicht verkehrt, wenn unseriöse Anbieter vom Zugriff auf Google-Konten ausgeschlossen werden und Missbrauch minimiert wird.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist irreführtend, weil es primär gar nicht um LSA geht, sondern um OAuth2, und spezifisch um die mit OAuth2 Restricted Scopes verknüpften Audit-Anforderungen. LSA abzuschalten ist eine gute Sache, und LSA zu verwenden, um den Anforderungen für OAuth2 Restricted Scope zu entgehen eine mittelfristig zum Scheitern verurteilte Strategie.&lt;/p&gt;
&lt;p&gt;Die Frage, um die es eigentlich gehen muß ist:&lt;/p&gt;
&lt;p&gt;Darf Google für den Zugriff auf ihre Plattform einen solchen Audit verlangen oder ist dies eine unzulässige Wettbewerbseinschränkung?&lt;/p&gt;
&lt;p&gt;Im Lichte der Entscheidung &lt;a href=&#34;https://www.heise.de/newsticker/meldung/Sofortueberweisung-vs-Banken-Kartellamt-sieht-Wettbewerb-behindert-3255361.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Banken vs. Sofortüberweisung&lt;/a&gt;

 kann man annehmen, daß es nicht das Problem von Google ist, Anforderungen an die Anwendungen zu stellen, die ein Anwender für seinen Account zuläßt. Insbesondere wenn der Anwender eine Firma ist und der Account Teil eines GSuite Business Accounts ist.&lt;/p&gt;
&lt;p&gt;Und das ist die eigentliche Frage, die geklärt werden muß.&lt;/p&gt;
&lt;p&gt;OAuth2 ist eine gute Sache. Auch Mailbox.org und OX wissen das und haben das korrekt implementiert, sind dabei aber in die OAuth2 Restricted Scope Requirements für Serverbetreiber gelaufen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Websense DLP gives instant root</title>
      <link>https://blog.koehntopp.info/2018/06/18/websense-dlp-gives-instant-root.html</link>
      <pubDate>Mon, 18 Jun 2018 20:33:10 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2018/06/18/websense-dlp-gives-instant-root.html</guid>
      <description>&lt;p&gt;Enterprise security software is interesting, because in order to do what it does it often uses privilege, but it is also very often written extremely badly.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://blog.koehntopp.info/2017/10/20/aslr.html&#34;&gt;ASLR&lt;/a&gt;

 we have had a look on the Trend Micro binary on MacOS and found that it is running as root, and with ASLR off. That means we have a privileged process that is being loaded at a fixed address, and that process is parsing random user generated data in order to scan it for viruses. If we manage to find a bug in that code, we have a way to make this privileged process do our bidding – by simply putting a special file into a directory that is being scanned by the virus scanner.&lt;/p&gt;
&lt;p&gt;Because ASLR is off, that antivirus process is at the same, fixed address on every machine running the same OS version and Trendmicro version. This means: our bug works the same way on every single machine with these properties. We basically control the entire fleet of machines at once.&lt;/p&gt;
&lt;p&gt;Such thoughts are not hypothetical problems. Let&amp;rsquo;s have a look at another enterprise security product and how that works, for real.&lt;/p&gt;
&lt;h2 id=&#34;websense-dlp-is-installed-and-it-is-python&#34;&gt;
    &lt;a href=&#34;#websense-dlp-is-installed-and-it-is-python&#34;&gt;
	Websense DLP is installed and it is Python
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;So yesterday morning when I came to work, my Macbook Air had crashed.&lt;/p&gt;
&lt;p&gt;On Reboot, the jamf installed a bunch of patches and new stuff. I ran the usual fast &lt;a href=&#34;https://aide.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AIDE&lt;/a&gt;

 check I do every morning, and found a bunch of modified system files, among them WebSense DLP as announced by Corporate a while ago.&lt;/p&gt;
&lt;p&gt;I found a bunch of files in &lt;code&gt;/Library/Application Support/Websense Endpoint&lt;/code&gt; and was immediately fascinated, because apparently this installs a complete version of Python 2.5.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;find . -iname python2&lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;./EPClassifier/python/bin/python2.5
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;EPClassifier/python/bin/python2.5
&lt;span class=&#34;go&#34;&gt;Python 2.6.9 (unknown, Feb  7 2017, 00:08:08)
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, so they lie about that. It’s 2.6.&lt;/p&gt;
&lt;p&gt;On the other hand, they deliver their application as a bunch of &lt;code&gt;.pyc&lt;/code&gt; (compiled python bytecode) files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;find  . -iname &lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt;.pyc
&lt;span class=&#34;go&#34;&gt;./EPClassifier/CryptoInterface.pyc
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;./EPClassifier/policies/file_detectors/ASMDetector.pyc
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;./EPClassifier/policies/file_detectors/CAD_STL.pyc
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can read that, using &lt;a href=&#34;https://github.com/rocky/python-uncompyle6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uncompyle6&lt;/a&gt;

: &lt;code&gt;brew install python3; pip3 install uncompyle6&lt;/code&gt;, because I am lazy and don’t want to mess with a venv right here and now.&lt;/p&gt;
&lt;p&gt;I’d want that in my path all the time anyway.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uncompyle6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EPClassifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scripts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pyLogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pyc&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# uncompyle6 version 3.2.3&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Python bytecode 2.5 (62131)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Decompiled from: Python 3.7.0 (default, Jul  9 2018, 09:48:45)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [Clang 9.0.0 (clang-900.0.39.2)]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Embedded file name: .\pyLogger.py&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;codecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;threading&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PyLogger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debugName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;pyLogger_svm_default_log_file.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debugName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debugName&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myMutex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threading&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;massage_to_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;time_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strftime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; %H-%M-%S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;string_to_write&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; pyLogger debug message: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;massage_to_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myMutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acquire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;codecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string_to_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\r\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;log_debug_file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myMutex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# okay decompiling ./EPClassifier/policies/scripts/pyLogger.pyc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;its-all-world-writeable-or-is-it&#34;&gt;
    &lt;a href=&#34;#its-all-world-writeable-or-is-it&#34;&gt;
	It&amp;rsquo;s all world-writeable, or is it?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;That’s fun, I thought and then I saw the file permissions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;ls -l ./EPClassifier/policies/scripts/pyLogger.pyc
&lt;span class=&#34;go&#34;&gt;-rw-rw-rw-  1 root  admin  1130 Nov 14  2017 ./EPClassifier/policies/scripts/pyLogger.pyc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Is it really a good idea to have system security software installed with world-writeable files?&lt;/p&gt;
&lt;p&gt;I asked in our internal security forum, and apparently WebSense has an anti-tampering protection.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;kextstat &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v com.apple &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print $1, $6 }&amp;#39;&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;Index Name
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;15 com.displaylink.driver.DisplayLinkDriver
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;91 com.asix.driver.ax88179-178a
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;131 com.Cylance.CyProtectDrvOSX
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;146 com.websense.endpoint.process.kpi
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;147 com.websense.endpoint.process
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;148 com.websense.endpoint.dlp
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The number 148, &lt;code&gt;com.websense.endpoint.dlp&lt;/code&gt;, is the kernel module that &amp;ldquo;protects&amp;rdquo; these files: As a user or as root, when you try to modify one of the world writeable files, the module intercepts and blocks the call.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;go&#34;&gt;com.websense.endpoint.dlp: [WARNING:ws_anti.c:364] Blocking the attempt to modify or delete /Library/Application Support/Websense Endpoint/EPClassifier/python/lib/python2.5/sqlite3/__init__.py, pid:73968, process:vim, action: 0x4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Challenge accepted.&lt;/p&gt;
&lt;h2 id=&#34;a-kext-is-just-code-lets-have-a-look&#34;&gt;
    &lt;a href=&#34;#a-kext-is-just-code-lets-have-a-look&#34;&gt;
	A kext is just code. Let&amp;rsquo;s have a look.
    &lt;/a&gt;
&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;.../Websense Endpoint/DLP/WebsenseEndpointDLP.kext/Contents/MacOS
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;ls -l
&lt;span class=&#34;go&#34;&gt;total 440
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;-rwxr-xr-x  1 kris  staff  223056 Jun  4 23:52 WebsenseEndpointDLP
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s the kext, the one which registers itself as &lt;code&gt;com.websense.endpoint.dlp&lt;/code&gt; in &lt;code&gt;kextstat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can load it into &lt;a href=&#34;https://www.hopperapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hopper&lt;/a&gt;

. Hopper is a $99 IDAPro Clone with a nice Python API. You can also use the free version of IDApro, or the NSA Ghidra to achieve the same.&lt;/p&gt;
&lt;p&gt;Turns out, the kext is delivered with a full symbol table. Here is what you see when you start Hopper, drag the kext into it and click on the symbol that inits the kernel extension:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-01.jpg&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-01.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Initial glance at the kext after loading. We have symbols. That&amp;rsquo;s almost like cheating.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is a tempting call to &lt;code&gt;_ws_anti_tampering_initialize()&lt;/code&gt;, but I have learned to do things differently a long time ago. The error message read &amp;ldquo;Blocking the attempt to modify or delete&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-02.jpg&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-02.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Two places in vnode_listener_callback_9135&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We are looking at a vnode listener, which is a type of &lt;a href=&#34;https://www.apriorit.com/dev-blog/411-mac-os-x-kauth-listeners&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kauth&lt;/a&gt;

 listener, which is a MacOS thing to monitor or block access to files. It’s what all the Cybersnakeoil is using. It’s also what’s making your &lt;code&gt;git checkout&lt;/code&gt; slow.&lt;/p&gt;
&lt;p&gt;And here is the callback:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-03.jpg&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/06/hopper-03.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read the highlighted code&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is little going on here until we hit the highlighted code. You can’t see all of it, but that does not matter.&lt;/p&gt;
&lt;p&gt;The code calls &lt;a href=&#34;https://developer.apple.com/documentation/kernel/1488959-proc_name?language=objc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proc_name()&lt;/a&gt;

, which gets the current process title in the kernel context. It then compares this name to a list of approved process names.&lt;/p&gt;
&lt;p&gt;If there is a match, no blockage happens from the kext.&lt;/p&gt;
&lt;p&gt;So, anything called&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EndPointClassifier&lt;/li&gt;
&lt;li&gt;kvoop&lt;/li&gt;
&lt;li&gt;CryptoTool&lt;/li&gt;
&lt;li&gt;InstallerTools&lt;/li&gt;
&lt;li&gt;Websense Endpoint&lt;/li&gt;
&lt;li&gt;TRITON AP-ENDPOINT&lt;/li&gt;
&lt;li&gt;Websense Endpoint Helper&lt;/li&gt;
&lt;li&gt;DLPHelperService&lt;/li&gt;
&lt;li&gt;efw_cache_update&lt;/li&gt;
&lt;li&gt;installd&lt;/li&gt;
&lt;li&gt;installer&lt;/li&gt;
&lt;li&gt;rc.deferred_install&lt;/li&gt;
&lt;li&gt;shove&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;Websense Endpoint RF Notification&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;is approved to bypass the protection afforded by kext 148.&lt;/p&gt;
&lt;p&gt;That makes a lot of sense, if you look at it - how are they going to update their code out in the world? Some programs must be allowed to write to it – that&amp;rsquo;s how &lt;code&gt;InstallerTools&lt;/code&gt;, &lt;code&gt;CryptoTool&lt;/code&gt;, &lt;code&gt;installd&lt;/code&gt;, &lt;code&gt;installer&lt;/code&gt; and &lt;code&gt;rc.deferred_install&lt;/code&gt; as well as &lt;code&gt;shove&lt;/code&gt; end up on this list.&lt;/p&gt;
&lt;p&gt;The others are likely convenience for Develoeprs that &amp;ldquo;accidentally&amp;rdquo; (through bad development processes) made it out into production code. It&amp;rsquo;s likely that the bad permissions also ended up being shipped the same way – it makes a lot of sense for a developer to have these files world-writeable all the time when they are developing this product.&lt;/p&gt;
&lt;p&gt;In any case, other rules in the rest of the kernel still apply, so file permissions still work. But WebSense delivered a bunch of files world-writeable, relying on their kext to protect their application.&lt;/p&gt;
&lt;p&gt;They do load these world-writeable files into their python process, which runs as root, and happily execute them. So this is our hook: We overwrite any of these files with our own code, using our own program which we name &lt;code&gt;kvoop&lt;/code&gt; (or anything from the list above), and then restart the machine. As it starts up, it loads our code and the box is ours.&lt;/p&gt;
&lt;p&gt;We get privilege escalation from local user to system administrator.&lt;/p&gt;
&lt;h2 id=&#34;we-write-a-proof-of-concept&#34;&gt;
    &lt;a href=&#34;#we-write-a-proof-of-concept&#34;&gt;
	We write a proof-of-concept
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Can I prove that I can circumvent their protection?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;probe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;version.plist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;perror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Can&amp;#39;t fopen&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fclose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a slight variation of the “hello world” program: It opens a file version.plist, writes &amp;ldquo;Hello, world&amp;rdquo; to the file, sleeps a minute and exits.&lt;/p&gt;
&lt;p&gt;First, expected behavior: Boy meets file, file is world writeable, boy tries to write file, and fails due to the kext doing the kauth thing and interfering.&lt;/p&gt;
&lt;p&gt;Hackerterrorcybercyber averted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;/Library/Application Support/Websense Endpoint/EPClassifier/python/Resources
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;ls -l version.plist 
&lt;span class=&#34;go&#34;&gt;-rwxrwxrwx 1 root admin 454 May 26 07:13 version.plist
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;&amp;gt; version.plist
&lt;span class=&#34;go&#34;&gt;-bash: version.plist: Permission denied
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Boy reverses the kext, reads the list of privileged filenames, names his &amp;ldquo;hello world&amp;rdquo; program kvoop from the list of privileged filenames and lo and behold:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;kvoop
&lt;span class=&#34;go&#34;&gt;^C
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;cat version.plist
&lt;span class=&#34;go&#34;&gt;Hello, world
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I pwn.&lt;/p&gt;
&lt;h2 id=&#34;other-observations&#34;&gt;
    &lt;a href=&#34;#other-observations&#34;&gt;
	Other observations
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Websense DLP is one of the kind of products that inject a shared library (a Macos &lt;code&gt;.dylib&lt;/code&gt;) into other processes. In our case, Chrome and Firefox are being targeted. This is not a stable interface, and &lt;a href=&#34;https://www.techradar.com/news/google-chrome-keeps-crashing-it-might-be-your-antivirus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome or Firefox may crash&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Websense DLP relies on the &lt;code&gt;prog_name()&lt;/code&gt; not only for exceptions in the kauth handler, but also in the selection of binaries to target for injection. For example, if I write a &amp;ldquo;hello world&amp;rdquo; program and rename it to &lt;code&gt;firefox&lt;/code&gt;, there is a lot of commotion in the system log: Websense DLP tries to inject its libraries into my &amp;ldquo;hello world&amp;rdquo; program, which it mistakes for Firefox due to the program name, and fails, noisly.&lt;/p&gt;
&lt;p&gt;The same works in reverse: A firefox binary that is not named &lt;code&gt;firefox&lt;/code&gt; is not recognized and does not get the shared library injected, so it flies under the radar.&lt;/p&gt;
&lt;p&gt;One wonders what the actual threat model is that this is supposed to protect against.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;
    &lt;a href=&#34;#tldr&#34;&gt;
	TL;DR
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We deployed Websense DLP across all company Macs, and anybody renaming their &lt;code&gt;vim&lt;/code&gt; to &lt;code&gt;kvoop&lt;/code&gt; can edit the files, which are then loaded into a privileged process and run as root.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Websense DLP is an instant root on all Mac machines where it is being deployed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Addendum:&lt;/em&gt; Security picked up on this, and communicated the problem to the vendor, which then shipped a fix. It is unknown to me if they also fixed their broken security processes. We ceased using the product shortly after that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>beep, patch and ed</title>
      <link>https://blog.koehntopp.info/2018/04/06/beep-patch-and-ed.html</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2018/04/06/beep-patch-and-ed.html</guid>
      <description>&lt;p&gt;So a few days ago, somebody found an exploit in beep - now
&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-0492&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2018-0492&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;beep is a program that is part of Debian (and Ubuntu) to have the PC speaker
multiple times, at different frequencies, with different pauses and beep
lengths. That works just fine. It&amp;rsquo;s also SUID root. There is zero code in it
that deals with the fact that it may run privileged.&lt;/p&gt;
&lt;p&gt;The author confidently writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some users will encounter a situation where beep dies with a complaint
from ioctl(). The reason for this, as Peter Tirsek was nice enough to
point out to me, stems from how the kernel handles beep&amp;rsquo;s attempt to poke
at (for non-programmers: ioctl is a sort of catch-all function that lets
you poke at things that have no other predefined poking-at mechanism) the
tty, which is how it beeps. The short story is, the kernel checks that
either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you are the superuser&lt;/li&gt;
&lt;li&gt;you own the current tty&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this means is that root can always make beep work (to the best of my
knowledge!), and that any local user can make beep work, BUT a non-root
remote user cannot use beep in it&amp;rsquo;s natural state.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s worse, an xterm, or other x-session counts, as far as the kernel is
concerned, as &amp;lsquo;remote&amp;rsquo;, so beep won&amp;rsquo;t work from a non-privileged xterm
either. I had originally chalked this up to a bug, but there&amp;rsquo;s actually
nothing I can do about it, and it really is a Good Thing that the kernel
does things this way.&lt;/p&gt;
&lt;p&gt;There is also a solution. By default beep is not installed with the suid
bit set, because that would just be zany. On the other hand, if you do
make it suid root, all your problems with beep bailing on ioctl calls will
magically vanish, which is pleasant, and the only reason not to is that
any suid program is a potential security hole.&lt;/p&gt;
&lt;p&gt;Conveniently, beep is very short, so auditing it is pretty
straightforward. Decide for yourself, of course, but it looks safe to me -
there&amp;rsquo;s only one buffer and fgets doesn&amp;rsquo;t let it overflow, there&amp;rsquo;s only
one file opening, and while there is a potential race condition there,
it&amp;rsquo;s with /dev/console. If someone can exploit this race by replacing
/dev/console, you&amp;rsquo;ve got bigger problems. :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So here is how you race this: &lt;a href=&#34;https://gist.github.com/fkt/5f8f9560ef54e11ff7df8bec09dc8f9a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;beepbop&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Which is bad, because Ubuntu and Debian both install beep SUID root, by
default. You can check with &amp;ldquo;dpkg-reconfigure -plow beep&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/04/dpkg-reconfigure-beep.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Debian installs beep SUID root by default, &amp;ldquo;dpkg-reconfigure -plow
beep&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Somebody also created a fun website for the beep problem, complete with
logo and name: &lt;a href=&#34;https://holeybeep.ninja/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holey Beep&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/04/holey-beep.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://holeybeep.ninja/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holey Beep&lt;/a&gt;

: The site, which is done very tongue
in cheek, also contained a &lt;a href=&#34;https://holeybeep.ninja/beep.patch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;patch&lt;/a&gt;

 for
the problem, advertising it like this:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/04/patch-exploit.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;So why would your computer beep when it applies a patch?
That&amp;rsquo;s another fun thing. The patch contains this hunk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gd&#34;&gt;--- /dev/null	2018-13-37 13:37:37.000000000 +0100
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ b/beep.c	2018-13-37 13:38:38.000000000 +0100
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;1337a
1,112d
&lt;span class=&#34;gs&#34;&gt;!id&amp;gt;~/pwn.lol;beep # 13-21 12:53:21.000000000 +0100
&lt;/span&gt;&lt;span class=&#34;gs&#34;&gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and that looks very much like an ed-script. In fact, until recently that is
exactly what patch did: popen a copy of ed and feed it. The line &amp;ldquo;id &amp;gt;
~/pwn.lol; beep&amp;rdquo; will hence be run, create a file pwn.lol in $HOME with the
current user id, and then execute beep. That&amp;rsquo;s the promised beep you hear.&lt;/p&gt;
&lt;p&gt;Of course code execution by a thing you expect to handle data is a problem,
and that is now
&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000156&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2018-1000156&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s fixed by writing the ed code to a tmp file while filtering the commands
fed to ed, and then feeding the filtered input into ed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spectre #2 Mitigation - Retpolines</title>
      <link>https://blog.koehntopp.info/2018/02/26/spectre-2-mitigation-retpolines.html</link>
      <pubDate>Mon, 26 Feb 2018 15:02:37 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2018/02/26/spectre-2-mitigation-retpolines.html</guid>
      <description>&lt;p&gt;Intel finally published a whitepaper about Spectre #2 Mitigation. The
&lt;a href=&#34;https://software.intel.com/sites/default/files/managed/1d/46/Retpoline-A-Branch-Target-Injection-Mitigation.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF&lt;/a&gt;


is also featured on
&lt;a href=&#34;https://news.ycombinator.com/item?id=16423401&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;

. It&amp;rsquo;s a technical
whitepaper, but you can see the footprints of lawyers all over the
language. For me, it basically says that, yes, Retpolines are indeed
incompatible with Controlflow Enforcement Technology (CET) that Intel
was planning for later CPUs
(&lt;a href=&#34;https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF&lt;/a&gt;

,
&lt;a href=&#34;https://www.theregister.co.uk/2016/06/10/intel_control_flow_enforcement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;El Reg article&lt;/a&gt;

).&lt;/p&gt;
&lt;p&gt;CET introduces a shadow stack for return addresses only, and will fail
your code into an exception if the normal stack return address and the
shadow stack address disagree. Trying to touch and manipulate the
shadow stack will also fail into an exception. That is, CET makes
touching a return address on the stack toxic by having in effect
separate argument and return address stacks, and your code explodes
every time you try to do something funny with return addresses. Which
is what Retpolines depend on.&lt;/p&gt;
&lt;p&gt;Intel also note that
Retpolines also require Return Stack Stuffing in order to work
properly, because otherwise RET will also speculate and the Retpoline
will not work as intended. They also note that external events can
interact with the Return Stack Buffer (RSB) and empty it and they
don&amp;rsquo;t actually write but strongly imply that these external events are
not a thing you have control over, as these are&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are also a number of events that happen asynchronously from normal
program execution that can result in an empty RSB. Software may use “RSB
stuffing” sequences whenever these asynchronous events occur:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interrupts/NMIs/traps/aborts/exceptions which increase call depth.&lt;/li&gt;
&lt;li&gt;System Management Interrupts (SMI) (see BIOS/Firmware Interactions).&lt;/li&gt;
&lt;li&gt;Host VMEXIT/VMRESUME/VMENTER.&lt;/li&gt;
&lt;li&gt;Microcode update load (WRMSR 0x79) on another logical processor of the same core.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The hardware you run on can either have a Spectre vulnerability and require
Retpolines, or have CET and Hardware Spectre Mitigation, but not both. So
you generate code for either one or the other, and they suggest
instrumentation of the loader to patch all indirect jump callsites as
required.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s not completely insane, as loaders already patch up jump instructions
at load time.&lt;/p&gt;
&lt;p&gt;They do note that virtual machines in clustered setups with life migration
may be at a disadvantage here, as this is a load-time thing and hence you
need to expose your worst CPU in a cluster as the virtual CPU to your VMs in
order for this to work with migration. That&amp;rsquo;s already a requirement in
heterogenous clusters, but still annoying.&lt;/p&gt;
&lt;p&gt;All in all, this is basically disappointing to underwhelming.&lt;/p&gt;
&lt;p&gt;The TL;DR is that Retpolines and CET are indeed incompatible, and ld.so is
called to the rescue to patch up code at load time for one or the other. The
ld.so thing is an interesting observation. It means that the code on disk
and the code in memory differ in one more way.&lt;/p&gt;
&lt;p&gt;As these things accumulate, the actual on-disk machine instructions mutate
over time into a kind of virtual machine notation that on load is adjusted
more and more to the needs of the actual machine it&amp;rsquo;s being executed on.
Maybe a thing such as a JVM and a JIT is not the worst thing that has
happened to us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ASLR</title>
      <link>https://blog.koehntopp.info/2017/10/20/aslr.html</link>
      <pubDate>Fri, 20 Oct 2017 16:08:14 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/10/20/aslr.html</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define MH_PIE 0x200000 &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* When this bit is set, the OS will load the main executable at a random address. Only used in MH_EXECUTE filetypes. */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If that flag is on, MacOS will enable
&lt;a href=&#34;https://de.wikipedia.org/wiki/Address_Space_Layout_Randomization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASLR&lt;/a&gt;

 and
the binary will have different load addresses for code, data, heap and stack
every time it is running.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;otool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Library&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Application&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Support&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TrendMicro&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TmccMac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iCoreService_tmsm&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Mach&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;magic&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cputype&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cpusubtype&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;caps&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;filetype&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ncmds&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sizeofcmds&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;
&lt;span class=&#34;mh&#34;&gt;0xfeedfacf&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16777223&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x80&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;        &lt;span class=&#34;mi&#34;&gt;2656&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x00018085&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check the &amp;lsquo;flags&amp;rsquo; for this. No 0x200000, no ASLR. Not here, and not on any
other binary with &amp;ldquo;TrendMicro&amp;rdquo; in the pathname. And that is why you can&amp;rsquo;t
have nice things.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The inherent Asymmetry of online attacks</title>
      <link>https://blog.koehntopp.info/2017/10/12/the-inherent-asymmetry-of-online-attacks.html</link>
      <pubDate>Thu, 12 Oct 2017 22:40:26 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/10/12/the-inherent-asymmetry-of-online-attacks.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/k8em0/status/918516496569073664&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Katie Moussouris explains teh Cyber&lt;/a&gt;


and how it is asymmetric:&lt;/p&gt;
&lt;p&gt;»&amp;quot;#Cassandra moment: Explaining that determining &amp;ldquo;cyber norms&amp;rdquo; in today&amp;rsquo;s
world order misses emerging capabilities &amp;amp; motivations of new actors.&lt;/p&gt;
&lt;p&gt;Forget &amp;ldquo;attribution&amp;rdquo;. Not what I mean.&lt;/p&gt;
&lt;p&gt;Deterrence, state responsibility, etc in existing state context assumes most
want to keep stability. Plenty of non-terrorist smaller states &amp;amp;
non-state-non-criminal actors have or can acquire capabilities &amp;amp; would not
be sanctionable, for example when we think through deterrence strategies,
consider not just world order we have that prefers stability, but those who
prefer destability.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re erroneously trying to defend against a magnetic power reversal of the
N &amp;amp; S poles, but the cyberwar powers are everywhere &amp;amp; unaligned.&lt;/p&gt;
&lt;p&gt;We miss the point if we think the answer is to contain those weapons/tools.&lt;/p&gt;
&lt;p&gt;We hurt defense when we limit their distribution for analysis.&amp;quot;«&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A (sad) security user story</title>
      <link>https://blog.koehntopp.info/2017/10/10/a-sad-security-user-story.html</link>
      <pubDate>Tue, 10 Oct 2017 17:05:31 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/10/10/a-sad-security-user-story.html</guid>
      <description>&lt;p&gt;Here is a &lt;a href=&#34;https://www.mountaingoatsoftware.com/agile/user-stories&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;user story&lt;/a&gt;

 for
implementors of security systems and platform hardening initiatives:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As &lt;strong&gt;any user&lt;/strong&gt; , I never want to get a &amp;ldquo;denied&amp;rdquo; message, but a &amp;quot; &lt;strong&gt;in
order to do what you want you are missing the &lt;em&gt;X&lt;/em&gt; permission&lt;/strong&gt;&amp;quot; message in
order to be able to track down the root cause and request the appropriate
permissions more easily.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;rsquo;s not that hard, really.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab: You are not allowed to push code to this project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, it&amp;rsquo;s harder for some, apparently. That&amp;rsquo;s one hour of my life I am not
getting back.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I can&#39;t transfer money with my Monitor upright</title>
      <link>https://blog.koehntopp.info/2017/08/28/why-i-cant-transfer-money-with-my-monitor-upright.html</link>
      <pubDate>Mon, 28 Aug 2017 10:18:07 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/08/28/why-i-cant-transfer-money-with-my-monitor-upright.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.berliner-sparkasse.de/de/home/service/faq.html?n=true&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/berliner-sparkasse.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.berliner-sparkasse.de/de/home/service/faq.html?n=true&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Berliner Sparkasse Onlinebanking FAQ&lt;/a&gt;

:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why do I get the message &amp;lsquo;mobile device, can&amp;rsquo;t perform smsTAN money
transfer&amp;rsquo; when using my Desktop computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A possible cause is the display resolution. Your computer is being
detected as a mobile device by our online banking system. smsTAN is not
working from a mobile device.&lt;/p&gt;
&lt;p&gt;Solution: Change the display resolution&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So 1920x1080 does work, but 1080x1920 doesn&amp;rsquo;t.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP: Understanding unserialize()</title>
      <link>https://blog.koehntopp.info/2017/08/11/php-understanding-unserialize.html</link>
      <pubDate>Fri, 11 Aug 2017 13:50:20 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/08/11/php-understanding-unserialize.html</guid>
      <description>&lt;p&gt;The history of &lt;code&gt;serialize()&lt;/code&gt; and &lt;code&gt;unserialize()&lt;/code&gt; in PHP begins with Boris
Erdmann and me, and we have to go 20 years back in time. This is the day of
the prerelease versions of PHP 3,
&lt;a href=&#34;http://marc.info/?l=php-general&amp;amp;amp;m=90222513233060&amp;amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;some time in 1998&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Boris and I were working on code for a management system for employee education
for German Telekom. The front side is a web shop that sells classes and
courses, the back end is a complex structure that manages attendance, keeps
track of a line manager approval hierarchy and provides alternative dates
for overfull classes. In order to manage authentication, shopping carts and
other internal state, we needed something that allowed us to go from a
stateless system to a stateful thing, securely. The result was
&lt;a href=&#34;https://github.com/bevhost/phplib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHPLIB&lt;/a&gt;

, and especially the code in
&lt;a href=&#34;https://github.com/bevhost/phplib/blob/master/inc/session.inc#L272-L318&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;session.inc&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;That code contained a function &lt;code&gt;serialize()&lt;/code&gt;, which created a stringified
representation of a PHP variable and appended it to a string. There was no
&lt;code&gt;unserialize()&lt;/code&gt; necessary, because &lt;code&gt;serialize()&lt;/code&gt; generated PHP code.
&lt;code&gt;eval()&lt;/code&gt; would &lt;code&gt;unserialize()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One of the problems&lt;/strong&gt; we had to solve was that PHP3 was slow. So if we
were to write out a serialized representation of variables, we would have to
write a parser for that, and that parser better be fast, because it would be
executed at the beginning of each and every page load. We already had such a
parser, and it was the fastest parser available, PHP itself. So we decided
to write a function that takes a variable, recurses through that variable
and generated PHP code to recreate the variable if that code would be
executed.&lt;/p&gt;
&lt;p&gt;For scalars,
&lt;a href=&#34;https://github.com/bevhost/phplib/blob/master/inc/session.inc#L313&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;that is trivial&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;For an array,
&lt;a href=&#34;https://github.com/bevhost/phplib/blob/master/inc/session.inc#L313&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;that is possible with a simple recursion over each element&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;For objects, things are complicated.&lt;/p&gt;
&lt;p&gt;Firstly, in PHP3, an object does not have the slightest clue what it&amp;rsquo;s
classname is. Secondly, an object might have instance variables that we do
not want to be part of the stringified representation of the object, for
example file and image file handles or other resources. We solved both
problems by requiring serializable objects to have metadata instance
variables, &lt;code&gt;classname&lt;/code&gt; and &lt;code&gt;persistent_slots&lt;/code&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;For unserialize, we simply executed that code inside an &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From PHP 4 onward, Sascha Schumann wrote a C implementation of session
management that became a standard part of PHP, which was largely based on
our ideas. Unlike us, he made PHP store session data in the filesystem,
inheriting our idea of probabilistic session expiration. He also converted
the data format from PHP Code to the current representation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another problem that needed adressing was code uniformity:&lt;/strong&gt;
If you load a serialized object written by another web page of your
application, that object has a class. And the code for that class needs to
be loaded before you can load and re-instantiate that object. Basically, you
saved an instance &lt;code&gt;$a&lt;/code&gt; of &lt;code&gt;DemoClass&lt;/code&gt;, and if you load that instance again,
running &lt;code&gt;unserialize()&lt;/code&gt; on it, PHP needs to know what a &lt;code&gt;DemoClass&lt;/code&gt; is and
how to make one, using &lt;code&gt;$a = new DemoClass()&lt;/code&gt;, before it can fill in the
values of all instance variables. So the includes of your app better be the
same on all pages, or you invent the
&lt;a href=&#34;http://php.net/manual/en/function.autoload.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Autoloader&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;The Autoloader originally was a simple callback function that would be
invoked every time you want to make an instance of an unknown class. The
function would get the name of the missing class as a parameter, and would
then be responsible to produce a class definition for that class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__autoload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$missing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Class &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$missing&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is missing.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$missing&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.class.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 

&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is your classic suicide autoloader: Whenever an undefined class is
being encountered, &lt;code&gt;__autoload()&lt;/code&gt; is being called with that classname. It
would then try to include a file with that name (and all dots and slashes
that you manage to falsify into that name) and hope that this would contain
code that defined a class with a matching name.&lt;/p&gt;
&lt;p&gt;Real autoloaders should not look like this (but often they are close enough
to this code to contain exploitable security problems).&lt;/p&gt;
&lt;p&gt;Today the autoload mechanism of PHP is more complicated. It has a
&lt;a href=&#34;http://php.net/manual/en/function.spl-autoload.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;default autoloader&lt;/a&gt;

,
&lt;a href=&#34;http://php.net/manual/en/function.spl-autoload-register.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a mechanism to manage a stack of autoloaders&lt;/a&gt;

,
and a bunch of &lt;a href=&#34;http://php.net/manual/en/function.spl-autoload-extensions.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;other&lt;/a&gt;


&lt;a href=&#34;http://php.net/manual/en/function.include.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;things&lt;/a&gt;

 such as file
extensions and include path names to influence all that. It is also quite
good,
&lt;a href=&#34;https://github.com/Sereal/Sereal/blob/master/README.pod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;even if more sophisticated serializers exist&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what is the state of &lt;code&gt;unserialize()&lt;/code&gt; in PHP these days, and why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/Screen-Shot-2017-08-11-at-13.44.00.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nikita_ppv/status/895571304325062656&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;That was a controversial Tweet&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;It links to this:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/do-not-unserialize-foreign-code.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://php.net/unserialize&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Really Good Advice™&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;People object:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/how-does-this-solve-anything.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/buherator/status/895933031529275392&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;People object&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;but given the little tour above, you should be able to understand how
&lt;code&gt;unserialize()&lt;/code&gt; cannot really be made safe for import of foreign data. You can
&lt;code&gt;unserialize()&lt;/code&gt; stuff your code has written, after having verified that the
data you read still is the data you have written, using salted hash_hmac()s
on said data. That&amp;rsquo;s going to be reasonably safe.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t, ever, use &lt;code&gt;unserialize()&lt;/code&gt; as a data interchange format with other
application or an end user. &lt;code&gt;unserialize()&lt;/code&gt; is not an exposable API. Never
was. Other functions and formats for this exist. Use those. Here is some
code to try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#! /usr/local/bin/php 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fnorp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;glorp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dorp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoClass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$priv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;priv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$prot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Constructed.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;To be serialized&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;priv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Just unserialized.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DemoClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;References inside an array work:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;References across unserialize:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;b is unserialized a:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Does the ref still work?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_unserialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;define_democlass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;We want &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$class&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; defined.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoClass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$priv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;fnorp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$prot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;glorp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dorp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Constructed.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;To be serialized&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;priv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Just unserialized.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_unserialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;spl_autoload_register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;define_democlass&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please start with &amp;#39;ser&amp;#39; or &amp;#39;unser&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser3&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser4&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;unser1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_unserialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;unser2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_unserialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Wot?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use this to see what serialized data looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;i:1; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More complicated stuff such as arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;a:3:{i:0;s:5:&amp;#34;fnorp&amp;#34;;i:1;s:5:&amp;#34;glorp&amp;#34;;i:2;s:4:&amp;#34;dorp&amp;#34;;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, references half-work, if they are internal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser4 
&lt;span class=&#34;go&#34;&gt;References inside an array work: 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Array ( [0] =&amp;gt; 2 [1] =&amp;gt; 2 ) 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;References across unserialize: 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;b is unserialized a:Array ( [0] =&amp;gt; 2 [1] =&amp;gt; 2 ) 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Does the ref still work? 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Array ( [0] =&amp;gt; 3 [1] =&amp;gt; 3 ) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but serializing a reference $b that points to $a does not work: The value $b
is referencing is saved, and the unserialized variable will have a value,
but will not reference the previous value. There is no error or warning.&lt;/p&gt;
&lt;p&gt;Here is what we do to Objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser3&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; 
&lt;span class=&#34;go&#34;&gt;Constructed. 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;To be serialized 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;O:9:&amp;#34;DemoClass&amp;#34;:3:{s:15:&amp;#34;DemoClasspriv&amp;#34;;s:4:&amp;#34;priv&amp;#34;;s:7:&amp;#34;\*prot&amp;#34;;s:4:&amp;#34;prot&amp;#34;;s:3:&amp;#34;pub&amp;#34;;s:3:&amp;#34;pub&amp;#34;;} 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This shows how the contructor is being executed, how the &lt;code&gt;__sleep()&lt;/code&gt;
callback is called and the content of the serialized file with the
stringified DemoClass instance referencing the class name. If we load this
without DemoClass being defined, we get&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php unser1 
&lt;span class=&#34;go&#34;&gt;__PHP_Incomplete_Class Object ( 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [__PHP_Incomplete_Class_Name] =&amp;gt; DemoClass 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [priv:DemoClass:private] =&amp;gt; priv 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [prot:protected] =&amp;gt; prot 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [pub] =&amp;gt; pub 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can load DemoClass using an autoloader we define. Then we get&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php unser2 
&lt;span class=&#34;go&#34;&gt;We want DemoClass defined. 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Just unserialized. 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;DemoClass Object ( 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [priv:DemoClass:private] =&amp;gt; priv 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [prot:protected] =&amp;gt; prot 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [pub] =&amp;gt; pub 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see the Autoloader being called, the &lt;code&gt;__wakeup()&lt;/code&gt; function running
(it didn&amp;rsquo;t in the example before!) and then the properly re-instantiated
object.&lt;/p&gt;
&lt;p&gt;Note that our new version of DemoClass, as defined by the autoloader, does
define different default values for the instance variables so we can show
that the values from the file are being loaded.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Illegal and undocumented instructions</title>
      <link>https://blog.koehntopp.info/2017/07/28/illegal-and-undocumented-instructions.html</link>
      <pubDate>Fri, 28 Jul 2017 13:30:26 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/07/28/illegal-and-undocumented-instructions.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.pagetable.com/?p=39&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/07/6502-die.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Illegal and undocumented instructions are not a new thing. The Commodore 64
CPU, a 6502 with a few additional I/O lines, was known to have them. Since
on current CPUs we can completely VLSI simulate a 6502 in Javascript we also
understand where they come from.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.pagetable.com/?p=39&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pagetable.com has a wonderful article on this&lt;/a&gt;

.
So how about current CPUs? Modern CPUs are vastly bigger and more
complicated than a 6502, and they are also set up very differently. So
simulation is not taking us anywhere, but we can fuzz.
&lt;a href=&#34;https://github.com/xoreaxeaxeax/sandsifter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sandsifter&lt;/a&gt;

 is such a CPU
fuzzer: it generates every conceivable instruction byte
combination and then tries to observe what happens.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sandsifter has uncovered secret processor instructions from every major
vendor; ubiquitous software bugs in disassemblers, assemblers, and
emulators; flaws in enterprise hypervisors; and both benign and
security-critical hardware bugs in x86 chips.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The findings have been summarized in a whitepaper
(&lt;a href=&#34;https://github.com/xoreaxeaxeax/sandsifter/blob/master/references/domas_breaking_the_x86_isa_wp.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF&lt;/a&gt;

),
which also describes how to effectively search the instruction space of a
CPU that has variable length instructions from 1 to 15 bytes in length.&lt;/p&gt;
&lt;p&gt;A crafty way of using page faults to determine the length of privileged
instructions while running unprivileged is shown. The strategy implemented
reduces the search space from some 10E36 instructions down to about 100
million, which is a manageable size on modern CPUs. Known instructions
(things that some reference disassembler knows and correctly predicts) are
eliminated, the rest is interesting and deserves attention.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero Factor Authentication</title>
      <link>https://blog.koehntopp.info/2017/07/27/zero-factor-authentication.html</link>
      <pubDate>Thu, 27 Jul 2017 11:10:10 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/07/27/zero-factor-authentication.html</guid>
      <description>&lt;p&gt;Dear Internet, Today I Learned that oath-toolkit exists in Homebrew. So, this is a thing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;brew install oath-toolkit 
&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;totp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;oathtool --totp -b YOURSECRET32BLA | pbcopy&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And so is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;#&lt;/span&gt;! /usr/bin/env expect -f
&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gp&#34;&gt;# &lt;/span&gt;exp_internal &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;set seed [ exec security find-generic-password -w -a $USER -s seed ]
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;set totp [ exec oathtool --totp -b $seed ]
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;set pass [ exec security find-generic-password -w -a $USER -s pass ]
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;spawn ssh verysecure.doma.in
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;expect &amp;#34;word:&amp;#34;
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;sleep 1
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;send &amp;#34;$pass\r\n&amp;#34;
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;expect &amp;#34;Two Factor Token:&amp;#34;
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;sleep 1
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;send &amp;#34;$totp\r\n&amp;#34;
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;interact
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yup, it&amp;rsquo;s totally possible to laugh and cry at the same time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Zero</title>
      <link>https://blog.koehntopp.info/2017/06/29/project-zero.html</link>
      <pubDate>Thu, 29 Jun 2017 10:31:50 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/06/29/project-zero.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://fortune.com/2017/06/23/google-project-zero-hacker-swat-team/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/06/zer_google_project_zero-150x150.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Fortune has &lt;a href=&#34;http://fortune.com/2017/06/23/google-project-zero-hacker-swat-team/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a kind of home story&lt;/a&gt;


on &lt;a href=&#34;https://googleprojectzero.blogspot.nl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Zero&lt;/a&gt;

, explaining what
it is, how it came to be and who the people in there are.&lt;/p&gt;
&lt;p&gt;If you do not know what Project Zero is and why it is important, it&amp;rsquo;s a good
starting point. If you know about Project Zero, it&amp;rsquo;s still a fun read
because of all the parentheses that read »x declined to be interviewed for
this story.«&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Cryptowars, twenty years ago</title>
      <link>https://blog.koehntopp.info/2017/06/27/the-cryptowars-twenty-years-ago.html</link>
      <pubDate>Tue, 27 Jun 2017 12:15:29 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/06/27/the-cryptowars-twenty-years-ago.html</guid>
      <description>&lt;p&gt;So there was
&lt;a href=&#34;https://motherboard.vice.com/en_us/article/43ymjd/why-fbi-investigated-dungeons-and-dragons-players-1990s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this article&lt;/a&gt;


in Motherboard, pointed out to me by a very young friend of mine. It&amp;rsquo;s an
FBI memo written in 1995 during the Unabomber investigation, about a
mysterious, close-knit group of gamers, playing D&amp;amp;D. The article gives
hardly any context at all, but that kind of memo during this time is not
unusal or even remarkable, from a historical perspective.&lt;/p&gt;
&lt;p&gt;So here is a bit of historic perspective, not quite in chronological order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;John Gilmore&lt;/strong&gt; A lot of this, from a US point of view, revolves around the
person of
&lt;a href=&#34;https://en.wikipedia.org/wiki/John_Gilmore_%28activist%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Gilmore&lt;/a&gt;

. Gilmore was
an early Sun Microsystems employee and hardware (VLSI chip) designer, and
this part of his career made him financially independent. He&amp;rsquo;s also
politically active, libertarian, and coined the famous saying&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Net interprets censorship as damage and routes around it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gilmore was running &lt;a href=&#34;https://en.wikipedia.org/wiki/Cygnus_Solutions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cygnus Solutions&lt;/a&gt;


(before Windows had a Ubuntu subsystem, there was Cygwin) in 1992, a company
that advocated Open Source and provided commercial support for it.&lt;/p&gt;
&lt;p&gt;At Cygnus, people with similar interests were meeting and from that grew the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Cypherpunk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cypherpunks&lt;/a&gt;

 mailing list, which
by 1994 had substantial readership.
The Cypherpunks pioneered software that used encryption to communicate, to
facilitate metadata-less anonymous communication and early anonymous digital
payment systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David L. Aaron&lt;/strong&gt; This clashed with the interests of the United States and
the &lt;a href=&#34;https://en.wikipedia.org/wiki/Five_Eyes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Five Eyes&lt;/a&gt;

, which even back
then had zero interest in the promotion of publicly available, auditable at
the source level, free cryptographic protocols. The US came up with several
concepts of limited and &amp;ldquo;managed&amp;rdquo; (= crippled) encryption schemes, and
around 1995, 1996 appointed
&lt;a href=&#34;https://en.wikipedia.org/wiki/David_L._Aaron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;David L. Aaron&lt;/a&gt;

 as a
&lt;a href=&#34;https://nettime.org/Lists-Archives/nettime-l-9610/msg00079.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crypto Czar&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;That Czar was the person tasked with selling foreign governments on the idea
of crippling cryptography worldwide so that the US could better spy on them
and everybody else. The way he did that was, of course, that he argued that
unbreakable codes in the hands of terrorists would threaten every country&amp;rsquo;s
security. Sounds familiar? It should, the tune is as old as
&lt;a href=&#34;https://en.wikipedia.org/wiki/Greensleeves&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Greensleeves&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clipper and other crippled crypto&lt;/strong&gt; One notable export from that time are
&amp;ldquo;export grade ciphers&amp;rdquo;, versions of cryptographic protocols that have been
in some way or the other limited to key lengths of 40 Bit, which was even
back then completely useless.&lt;/p&gt;
&lt;p&gt;Another memorable fiasco of that time (1992-1996) was the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Clipper_chip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Clipper Chip&lt;/a&gt;

. The Clipper Chip is a
hardware encryption/decryption device using a special cipher
&lt;a href=&#34;https://en.wikipedia.org/wiki/Skipjack_%28cipher%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Skipjack&lt;/a&gt;

, which was later
found &lt;a href=&#34;https://en.wikipedia.org/wiki/Skipjack_%28cipher%29#Cryptanalysis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deeply flawed&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Each Clipper Chip would have a random bitstring as identity/key source, and
would encrypt messages, but also transmit the key to decode the message in
another, encrypted way that was supposedly accessible only to the
government. As such, the key implemented a secret government backdoor.&lt;/p&gt;
&lt;p&gt;Relatively quickly, several &lt;a href=&#34;https://en.wikipedia.org/wiki/Clipper_chip#Technical_vulnerabilities&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;technical vulnerabilities&lt;/a&gt;


in Clipper have been found, which allowed the use of the Clipper hardware in
a way that the key would not be recoverable (bypassing the backdoor), and
others, which allowed using the key recovery field by anyone, so that all
legit users of the chip would be exposed to attacks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steve Jackson Games&lt;/strong&gt; Then there is
&lt;a href=&#34;https://en.wikipedia.org/wiki/Steve_Jackson_%28American_game_designer%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Steve Jackson&lt;/a&gt;

.
Jackson is a Geek, a Game Designer of, among other games, Role Playing
Games, and a Lego collector. He&amp;rsquo;s known especially for creating and
publishing &lt;a href=&#34;https://en.wikipedia.org/wiki/GURPS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GURPS&lt;/a&gt;

, &amp;ldquo;the&amp;rdquo; universal
role playing game ruleset. There exist GURPS supplements for about
&lt;a href=&#34;http://www.sjgames.com/gurps/books/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;every conceivable&lt;/a&gt;

 theme, and a few that are
inconceivable or at least
&lt;a href=&#34;https://en.wikipedia.org/wiki/GURPS_Bunnies_%26_Burrows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;improbable&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;There is also the GURPS combination challenge, in which you choose any two
random GURPS supplements and play in the resulting world.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/EFF_Logo.svg_.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The EFF&lt;/strong&gt; In 1990, the United States Secret Service raided the offices of
Steve Jackson Games and seized the manuscript for
&lt;a href=&#34;https://en.wikipedia.org/wiki/GURPS_Cyberpunk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GURPS: Cyberpunk&lt;/a&gt;

 on the grounds of
it being a handbook for computer crime. Steve Jackson Games sued the United
States Government over this, and won the trial in 1993.&lt;/p&gt;
&lt;p&gt;That was made possible in part because of the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Electronic_Frontier_Foundation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Electronic Frontier Foundation&lt;/a&gt;

,
EFF. Funding members were John Gilmore, John Perry Barlow and Mitch Kapor.
Barlow and Kapor had been subject to raids similar to Jackson, by
particularly technologically clueless government organisations.&lt;/p&gt;
&lt;p&gt;One of the first cases the EFF took on was the defense and litigation for
Steve Jackson (and next was the lawsuit on behalf of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Daniel_J._Bernstein&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DJB&lt;/a&gt;

 against crypto
export controls)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;distributed.net and Deep Crack&lt;/strong&gt; The EFF was also involved in the funding
and execution of various
&lt;a href=&#34;https://en.wikipedia.org/wiki/DES_Challenges&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DES brute force challenges&lt;/a&gt;

.
The first one, called
&lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;distributed.net&lt;/a&gt;

, used many
general purpose computers somewhere in the Internet to brute force the key
of a certain DES (56 bit) encrypted message.
The &lt;a href=&#34;https://en.wikipedia.org/wiki/EFF_DES_cracker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;second DES Challenge&lt;/a&gt;


used a machine named Deep Crack made from not quite 2000 special VLSI chips.&lt;/p&gt;
&lt;p&gt;It was John Gilmore, who funded the quarter million US dollars to finance
this design and who also helped to design the actual hardware. Deep Crack
brute forced a DES key in only 56 hours, demonstrating that DES cracking was
too cheap and fast to consider DES still a secure chipher.&lt;/p&gt;
&lt;p&gt;This lead to AES challenge and the standardisation of the Belgian Rijndael
chipher as what we today call
&lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AES&lt;/a&gt;

. Today we
have the funny situation that DES is still unbroken (there is no faster
attack than brute force), but insecure (brute force is too easy), while AES
is
&lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Known_attacks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;broken&lt;/a&gt;

,
but still considered secure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Crypto Wars in Germany&lt;/strong&gt; A similar discussion on encryption and &amp;ldquo;key
escrow&amp;rdquo; took place in Germany. You can find a lot of the old discussions (in
German) at Förderverein Informationstechnik und Gesellschaft
(&lt;a href=&#34;http://www.fitug.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fitug&lt;/a&gt;

), for example
&lt;a href=&#34;http://www.fitug.de/debate/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;

.
The &lt;a href=&#34;https://www.heise.de/ct/artikel/Hoert-ab-die-Signale-284236.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rethorics of 1995&lt;/a&gt;


sound precisely like those today:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ginge es nach dem Willen von Innenminister Kanther, dürfte es in der
Bundesrepublik &amp;ldquo;keine Nischen kontrollfreier Kommunikation für Verbrecher&amp;rdquo;
geben&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Around that time, a lot of political lobbying action took place, resulting
in a up to this day generally unchallenged ban on key escrow in Germany:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zwar hatte er für sein Quasi-Krypto-Verbot noch Rückenstützung durch ein
anonym veröffentlichtes CDU-Thesenpapier aus den Kreisen des
Bundeskanzleramts bekommen, doch schon nach der Verabschiedung des
Multimediagesetzes im Bundestag ließ das Innenministerium die Katze aus
dem Sack: Eine staatlich verordnete Schlüsselhinterlegung wird es vorerst
nicht geben, dafür setzt man auf freiwilliges Hinterlegen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which then resulted in the
&amp;ldquo;&lt;a href=&#34;https://hp.kairaven.de/law/eckwertkrypto.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eckpunkte der deutschen Kryptopolitik&lt;/a&gt;

&amp;rdquo;
under Otto Schily in 1999.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Today&lt;/strong&gt; These still stand, and ban backdoors. But
&lt;a href=&#34;http://www.faz.net/aktuell/feuilleton/the-surveillance-paradigm-be-the-friction-our-response-to-the-new-lords-of-the-ring-12241996.html?printPagedArticle=true#pageIndex_1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zuboff&amp;rsquo;s Laws&lt;/a&gt;


are strong in the government:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything that can be automated will be automated.&lt;/li&gt;
&lt;li&gt;Everything that can be informated will be informated.&lt;/li&gt;
&lt;li&gt;Every digital application that can be used for surveillance and control
will be used for surveillance and control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And hence we now have government IT security institutions making the world
more insecure, because they hoard vulnerabilities in order to use them for
surveillance and control.&lt;/p&gt;
&lt;p&gt;Which is why even now, 20 years later, the Cryptowar is still a thing.&lt;/p&gt;
&lt;p&gt;It will never be over.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Chrome integrates Adblocker</title>
      <link>https://blog.koehntopp.info/2017/06/02/google-chrome-integrates-adblocker.html</link>
      <pubDate>Fri, 02 Jun 2017 08:37:56 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/06/02/google-chrome-integrates-adblocker.html</guid>
      <description>&lt;p&gt;The Ad and Adblock situations both are now so bad that even
&lt;a href=&#34;https://www.blog.google/topics/journalism-news/building-better-web-everyone/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google considers integrating an Adblocker&lt;/a&gt;


by default into the Chrome browser.&lt;/p&gt;
&lt;p&gt;This is a twofold action.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s purpose is of course to filter out ads, the worst of the worst in
annoyance and the obvious malvertising. It&amp;rsquo;s purpose is also to take back
control on adblocking, because it will let through
&lt;a href=&#34;https://www.betterads.org/standards&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;acceptable ads&lt;/a&gt;

 according to the
&lt;a href=&#34;https://www.betterads.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coalition for Better Ads&lt;/a&gt;

 standards.&lt;/p&gt;
&lt;p&gt;CfBA condemns Popups, Sound, Prestitials and Large Stickies on the Desktop,
and more on mobile. It will be interesting to see if it changes anything.
People are truly beyond caring.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Curlbash, and Desktop Containers</title>
      <link>https://blog.koehntopp.info/2017/04/13/curlbash-and-desktop-containers.html</link>
      <pubDate>Thu, 13 Apr 2017 10:05:43 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/04/13/curlbash-and-desktop-containers.html</guid>
      <description>&lt;p&gt;I was having two independent discussions recently, which started with some
traditional Unix person condemning software installing with curlbash (&lt;code&gt;curl https://... | bash&lt;/code&gt;), or even &lt;code&gt;curl | sudo bash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I do not really think this to be much more dangerous than the installation
of random rpm or dpkg packages any more. Especially if those packages are
unsigned or the signing key gets installed just before the package.&lt;/p&gt;
&lt;p&gt;The threat model really became a different one in the last few years, and
the security mechanism have had to change as well. And they have, UIDs
becoming much less important. Desktop containers and Sandboxes have become
much more important, and segregation happens now at a much finer granularity
(the app level) instead of the user level.&lt;/p&gt;
&lt;p&gt;The two discusssions have been around the installation of sysdig
(see &lt;a href=&#34;https://sysdig.com/blog/friends-dont-let-friends-curl-bash/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;their article&lt;/a&gt;

,
which focuses on signed code and proxies injecting modifications), and
Mastodon (which uses node.js, which features one installation path using
&lt;code&gt;curl -sL https://deb.nodesource.com/setup\_7.x | sudo -E bash -&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Provided that you actually get the file that&amp;rsquo;s on the remote server (i.e. no
proxy exists that modifies stuff), I fail to see the problem. You are not
very likely to go through the source and review it. Also, you are hopefully
installing this into a single-purpose virtual machine or container, so there
is nothing else inside the image anyway. It does not really matter, which
UID this is running as, because there is nothing else inside this universe
in the first place.&lt;/p&gt;
&lt;p&gt;We have come, in a way, full circle and are back at MS-DOS, where there are
no users or permissions visible to the application, because it is utterly
alone in the world.&lt;/p&gt;
&lt;p&gt;User IDs also do not matter much on personal devices, because these
typically have only one user. Being kris (1000) on my Laptop or my Cellphone
does not really contain or isolate anything, because there is only me and
the only files important are all mine - the files not owned by me come from
the operating system image and can be restored at any time. Yes, my files
are much more important and harder to replace than the system files.&lt;/p&gt;
&lt;h2 id=&#34;macos&#34;&gt;
    &lt;a href=&#34;#macos&#34;&gt;
	MacOS
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In MacOS, we have a system that kind of solved the problem of a lone user
installing a lot of apps, all of which might to a certain extent be hostile
to each other or are trying to pull off things with me and my data. The
threat model is not &amp;ldquo;multiple users sharing a single device, and keeping
their stuff separate&amp;rdquo;, but &amp;ldquo;many apps from different sources, and with
different levels of trustworthiness, make sure they do not make off with the
users data or another apps data unnoticed&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is very different from Unix-Think and Unix is actually by default not
set up at all to handle this. MacOS attacks the problem by sandboxing Apps
from the App Store. Apps run in&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;go&#34;&gt;⌂ [:~/Library com.omnigroup.OmniGraffle7.MacAppStore]↥ $ pwd
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;/Users/kkoehntopp/Library/Containers/com.omnigroup.OmniGraffle7.MacAppStore
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;⌂ [:~/Library … com.omnigroup.OmniGraffle7.MacAppStore]↥ $ ls -1
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Desktop
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Documents
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Downloads
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Library
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Movies
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Music
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Pictures
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is, you still have a single UID per potential user, but apps are
confined to a subdirectory and a bunch of system standard locations for
stuff. They can exit that through the file dialogs and other systems means
and access arbitrary locations in the system, but the user interaction
required here makes sure their activity is being screened and contextualized
by a human.&lt;/p&gt;
&lt;p&gt;For the user, this is transparent and invisible, and requires no conscious
permissive actions. It is implied in the normal I/O dialog workflow. That&amp;rsquo;s
genius, because it hides all the complexity that comes with other systems
such as AppArmor, let alone SELinux.&lt;/p&gt;
&lt;h2 id=&#34;android&#34;&gt;
    &lt;a href=&#34;#android&#34;&gt;
	Android
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Android uses Unix UIDs, but differently than intended. In Android, you
always have a GUI, because a Command line without a GUI does make no sense
on touch devices. Multiple Users are possible, but user separation is not
via UID, it is via GUI.&lt;/p&gt;
&lt;p&gt;Instead, Android assigns a UID to each app dynamically, and uses Linux
permissions &lt;em&gt;and&lt;/em&gt; SELinux on top of that to keep apps out of each others
data.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;SD Card&amp;rdquo; area and permission is actually a limited file share facility
between apps, but that was not planned. Instead it has been but a side
effect of the fact that MS-DOS filesystems on SD-Cards do not enforce Unix
UIDs of different apps.&lt;/p&gt;
&lt;p&gt;On top of that, Google has been learning clumsily and slowly to leverage
this to an advantage, with several false starts.&lt;/p&gt;
&lt;h2 id=&#34;user-story&#34;&gt;
    &lt;a href=&#34;#user-story&#34;&gt;
	User Story
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Both systems allow users to install apps from all kinds of app makers
through a unified channel with limited review, and manage to keep data
per-app separated. So it is possible to run apps safely, even if the app is
somewhat hostile to other apps or the users data. The ideas behind that have
been picked up, and are being transformed slowly in the unix environment
using the desktop-container paradigm.&lt;/p&gt;
&lt;p&gt;Things like &lt;a href=&#34;http://flatpak.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flatpak&lt;/a&gt;

 are leveraging containers on the
desktop to do exactly what the MacOS sandbox does.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;
    &lt;a href=&#34;#summary&#34;&gt;
	Summary:
    &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If everything on your system is running as the same user, then &amp;ldquo;curl |sudo
bash&amp;rdquo; and &amp;ldquo;curl | bash&amp;rdquo; are equivalent in terms of threat.&lt;/li&gt;
&lt;li&gt;If the user is not actually reviewing the source and build, then each apt-get,
rpm and any curlbash are actually equivalent, because the amount of review
is the same, and far too little.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is instead necessary is a system that improves security in a way that
separates apps, not users, and that makes it possible to recover from the
accidental install and execution of a hostile or broken app.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s what desktop containers like flatpak do, or intend to do. They
are obviously neither perfect nor finished. But they are actually addressing
a new and different threat model than the one Unix was built for, and that
is no longer reflecting the current world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 reasons not to do HTTPS interception</title>
      <link>https://blog.koehntopp.info/2017/03/22/10-reasons-not-to-do-https-interception.html</link>
      <pubDate>Wed, 22 Mar 2017 10:10:29 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/03/22/10-reasons-not-to-do-https-interception.html</guid>
      <description>&lt;p&gt;Marnix Dekker has &lt;a href=&#34;https://www.linkedin.com/pulse/9-reasons-intercept-https-marnix-dekker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an article on HTTPS
interception&lt;/a&gt;


as it is being done in some workplaces. He lists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are you serious? We worked so hard to make the web more secure and you are fucking it up.&lt;/li&gt;
&lt;li&gt;HSTS, you are breaking it.&lt;/li&gt;
&lt;li&gt;Blinds the browser and the user, because you re-encrypt with wildcard certs.&lt;/li&gt;
&lt;li&gt;Disrupts personal use.&lt;/li&gt;
&lt;li&gt;Breaks pinning and CT.&lt;/li&gt;
&lt;li&gt;Breaks with consumerization.&lt;/li&gt;
&lt;li&gt;Disrupts BYOD.&lt;/li&gt;
&lt;li&gt;Discourages good user practices.&lt;/li&gt;
&lt;li&gt;Limited benefits.&lt;/li&gt;
&lt;li&gt;and finally: Hard shell, soft inside is not going to work.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The cost of winning…</title>
      <link>https://blog.koehntopp.info/2017/03/10/the-cost-of-winning.html</link>
      <pubDate>Fri, 10 Mar 2017 18:50:38 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/03/10/the-cost-of-winning.html</guid>
      <description>&lt;p&gt;Tech.co has an article titled
&lt;a href=&#34;http://tech.co/ai-startups-winning-cybersecurity-race-2017-03&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artificial Intelligence Startups Are Winning the Cybersecurity Race&lt;/a&gt;

. The
claim is basically first that old, pattern and signature based malware
recognition is useless, and second, that new, behavior based malware
recognition employing mystery AI technologies fixes things. The article
closes with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the near future, we predict that AI will be able to effectively fight
against hackers by easily detecting repacked viruses. It’s just a matter
of time. That’s why, more than resources or experience, companies who
actively apply AI, especially cybersecurity companies, will ultimately be
successful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That will be interesting to see. Here is a data point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On a computer without any protection installed, unpacking a node.js based
hipster chat application zip into 7500 files inside an application folder
takes 3.5 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So why is this other device from the same maker close to unusable and has
close to zero battery life? Let&amp;rsquo;s see: It has been gifted with the full
package of corporate enterprise security: Junos Pulse Endpoint Security,
FireEye endpoint security and TrendMicro Enterprise protection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With everything on, it takes 27 seconds (instead of 3 seconds) to unpack
the same archive.&lt;/li&gt;
&lt;li&gt;Getting root and uninstalling FireEye reduces the unpack time to 18
seconds.&lt;/li&gt;
&lt;li&gt;Reading the TrendMicro config file and doing the Unpacking inside a
specific git directory, which is exempt from TrendMicro scanning takes 11
seconds.&lt;/li&gt;
&lt;li&gt;Uninstalling Junos Pulse, and doing it in the exempt git directory takes 8
seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The uninstallation or going into exempt directories was based on observing a
system monitor and finding out which processes consume abnormal amounts of
CPU during the operation. In fact, the git directory is exempt because it
can contain on the upside of half a million files and having TrendMicro
active inside that directory simply shuts down the machine, because battery
empty.&lt;/p&gt;
&lt;p&gt;I guess the point I am trying to make here is that &amp;ldquo;more protection&amp;rdquo; is
going to mean &amp;ldquo;more mAh and Watts spent on stuff not related to the primary
purpose of the machine&amp;rdquo;. And we are in an age where consumer devices are
increasingly run on battery, and have thermal budgets limited to 5W and less
because they have no fan.&lt;/p&gt;
&lt;p&gt;So I am going to predict that in the near future we will see a growing
conflict between &amp;ldquo;protection&amp;rdquo; software uselessly wasting performance and
battery and users, who actually want to use their stuff and need to be
vigiliant for things that eat battery capacity and heat the CPU needlessly.
Your phone, your fanless tablet, your 12&amp;quot; Macbook and your tablet-computer
hybrid won&amp;rsquo;t be running much security software because it&amp;rsquo;s mobile, running
on battery and has to live with 5W or less.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OMG, our cybervaccines are failing</title>
      <link>https://blog.koehntopp.info/2017/02/17/omg-our-cybervaccines-are-failing.html</link>
      <pubDate>Fri, 17 Feb 2017 15:37:50 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/02/17/omg-our-cybervaccines-are-failing.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.darkreading.com/threat-intelligence/-what-to-do-when-all-malware-is-zero-day/a/d-id/1328155&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dark Reading&lt;/a&gt;


is scared: All new malware is &amp;ldquo;zero-day&amp;rdquo;, for an interesting and wrong
definition of zero-day, because then the article reads much more impressive.&lt;/p&gt;
&lt;p&gt;The actual definition of a Zero Day is a previously unknown exploit that is
being used by some party to compromise a machine. In the article, the term
is used differently, meaning a file that is a known malware, but has changed
itself so that it has a checksum that is not in currently distributed
signature catalogs of known malware. That is of course neither correct, nor
new.&lt;/p&gt;
&lt;p&gt;Mutation engines, for example for viruses, are an old hat. We have known
about them for more than a decade, almost two. The better ones take x86
machine code, auto-dissect it into basic blocks and then re-link these to a
semantically equivalent program in a completely different, random order.
They may also re-compile certain assembly instructions in these basic blocks
to other, semantically equivalent assembly instructions that have different
byte codes: There are many ways to clear a register or to load a value from
memory, after all.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In today&amp;rsquo;s detection industry, one should think of hashing as more of a
shortcut to locate the easy stuff, or rule out known good files
(whitelisting).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s more like the state of the detection reality from 15 years ago. On
the other hand, threat detection software is getting out of hand. A Macbook
I have had access to can unzip a piece of software with some 7000 files just
fine in under 3 seconds to its internal SSD. The same Macbook with a
&lt;a href=&#34;http://docs.trendmicro.com/en-us/enterprise/trend-micro-security-%28for-mac%29-21/agentinstall_ch_intro/agent_install_method.aspx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trendmicro AV solution&lt;/a&gt;


installed takes 11 seconds to do the same, and 18 seconds if it is done in a
directory that is not excluded from scan in the TM config file. Add
&lt;a href=&#34;https://www.fireeye.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FireEye&lt;/a&gt;

 on top of that and the same operation is
now at 27 seconds execution time. The laptop is now secure mostly because
nobody can do anything with it any more. In
&lt;a href=&#34;https://www.heise.de/newsticker/meldung/Sicherheitsforscher-an-AV-Hersteller-Finger-weg-von-HTTPS-3620159.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;many&lt;/a&gt;


&lt;a href=&#34;https://arstechnica.com/information-technology/2017/01/antivirus-is-bad/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;other&lt;/a&gt;


&lt;a href=&#34;https://www.theregister.co.uk/2016/03/31/trend_micro_patches_command_execution_flaw/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;articles&lt;/a&gt;

,
&lt;a href=&#34;https://googleprojectzero.blogspot.nl/2015/09/kaspersky-mo-unpackers-mo-problems.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;these&lt;/a&gt;


&lt;a href=&#34;https://bugs.chromium.org/p/project-zero/issues/detail?id=978&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;so&lt;/a&gt;


&lt;a href=&#34;http://www.forbes.com/sites/thomasbrewster/2017/01/25/trend-micro-security-exposed-200-flaws-hacked/#181469e55d68&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;called&lt;/a&gt;


security solutions have been shown to be actually contributing to the
problem.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

