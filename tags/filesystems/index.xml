<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>filesystems on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/filesystems.html</link>
    <description>Recent content in filesystems on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/filesystems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What are the problems with POSIX?</title>
      <link>https://blog.koehntopp.info/2020/10/05/what-are-the-problems-with-posix.html</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2020/10/05/what-are-the-problems-with-posix.html</guid>
      <description>Every once in a while there is the IT news article that kind of triggers me. This time it was &amp;ldquo;Object-Storage-Protokoll könnte Posix ablösen&amp;rdquo; in german computer news site Golem . The article speaks about mmap(), NVMEoF and object storage and how it could revolutionize or complete object storages, but does not link to an original article, names no persons and no paper. Also, what do these things - mmap, NVMEoF, object storage and Posix, even have in common?</description>
    </item>
    
    <item>
      <title>When a file changes, do a thing</title>
      <link>https://blog.koehntopp.info/2019/11/19/when-a-file-changes-do-a-thing.html</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2019/11/19/when-a-file-changes-do-a-thing.html</guid>
      <description>When developing there is often an edit-compile-test cycle, or an edit-distribute-changes cycle or a similar repetetive task. You could poll changes, for example with cron every minute or similarly, but that is wasteful and slow.
All modern operating systems have mechanisms for processes to subscribe to file or directory changes. In MacOS, we do have the File System Events API since 10.5, in Linux we got three different implementations (as described in LWN ): The original dnotify, its replacement inotify and the even more recent fanotify (which got its own LWN article ).</description>
    </item>
    
    <item>
      <title>An abundance of IOPS and Zero Jitter</title>
      <link>https://blog.koehntopp.info/2017/07/26/an-abundance-of-iops-and-zero-jitter.html</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/07/26/an-abundance-of-iops-and-zero-jitter.html</guid>
      <description>Two weeks ago, I wrote about The Data Center in the Age of Abundance and claimed that IOPS are - among other things - a solved problem.
What does a solved problem look like?
Here is a benchmark running 100k random writes of 4K per second, with zero Jitter, at 350µs end-to-end write latency across six switches. Databases really like reliably timed writes like these. Maximum queue depth would be 48, the system is not touching that.</description>
    </item>
    
    <item>
      <title>Neue Ideen in Dateisystemen (oder: BTRFS in Fedora 11)</title>
      <link>https://blog.koehntopp.info/2009/02/06/neue-ideen-in-dateisystemen-oder-btrfs-in-fedora-11.html</link>
      <pubDate>Fri, 06 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/02/06/neue-ideen-in-dateisystemen-oder-btrfs-in-fedora-11.html</guid>
      <description>There are two kinds of fool. One says, “This is old, and therefore good..” And one says “This is new, and therefore better..”	—John Brunner, in The Shockwave Rider
 Neue Ideen in Dateisystemen sind so eine Sache. Es handelt sich bei einem Dateisystem ja um Infrastrukturcode par excellence, und so reden die meisten Leute gerne von ihrem letzten Datenverlust, wenn man sie nach Dateisystemen befragt. Das ist nicht neu, ich habe in The Importance Of FAIL das Thema ja schon mal angeschnitten.</description>
    </item>
    
    <item>
      <title>Was bringt ext4?</title>
      <link>https://blog.koehntopp.info/2009/01/23/was-bringt-ext4.html</link>
      <pubDate>Fri, 23 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/01/23/was-bringt-ext4.html</guid>
      <description>Der Linux-Kernel 2.6.28 enthält das ext4-Dateisystem standardmäßig und sowohl Fedora als auch Ubuntu werden es unterstützen. Was bringt ext4 an Änderungen?
Ein Dateisystem ist für die meisten Benutzer eine quasi unsichtbare Sache. Es sind halt Dateien da und wenn man auf diese zugreift hat man halt Daten. So sind Dateisystem-Features für die meisten Leute also eine sehr unspektakuläre Sache. Die folgende Übersicht ist also etwas geekzentrisch.
Extents   ext2 und ext3 sind sehr traditionelle Dateisysteme, die intern im Grunde auf Technik von 1984 basieren.</description>
    </item>
    
    <item>
      <title>Filesysteme für theclaw (30 Jahre Unix Source)</title>
      <link>https://blog.koehntopp.info/2006/12/26/filesysteme-fuer-theclaw-30-jahre-unix-source.html</link>
      <pubDate>Tue, 26 Dec 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/12/26/filesysteme-fuer-theclaw-30-jahre-unix-source.html</guid>
      <description>&amp;mdash; Log opened Di Dez 26 15:52:09 2006
theclaw&amp;gt; Hey :] Spitze erklaerung zu ext2. Isotopp&amp;gt; Danke
theclaw&amp;gt; Bist du Kerneldeveloper?
Isotopp&amp;gt; Nein. Mysql Consultant.
theclaw&amp;gt; Hmm. Hab da was nicht verstanden bei der Erklärung. Und zwar: Was sind Datenblockzeiger?
Isotopp&amp;gt; Die Blockadressen von Datenblöcken einer Datei.
theclaw&amp;gt; Ich paste mal was
(0-11):9711-9722, (IND):9723, (12-267):9724-9979, (DIND):9980, (IND):9981, (268-523):9982-10237, (IND):10238, (524-779):10239-10494, (IND):10495, (780-1035):10496-10751, (IND):10752, (1036-1291):10753-11008, (IND):11009, (1292-1547):11010-11265, (IND):11266, (1548-1795):11267-11514 Isotopp&amp;gt; Habs im Originalartikel .</description>
    </item>
    
    <item>
      <title>Fragmentierung (für Jannik)</title>
      <link>https://blog.koehntopp.info/2006/05/08/fragmentierung-fuer-jannik.html</link>
      <pubDate>Mon, 08 May 2006 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2006/05/08/fragmentierung-fuer-jannik.html</guid>
      <description>ircnet, #lug-kiel, am 7. und 8. Mai.
Jannik wundert sich über fsck&amp;rsquo;s Meldung
/: 130834/6553600 Dateien (1.1% nicht zusammenhängend), 1007700/13107200 Blöcke Ist das schlimm? Jannik: hmm.. /:
130834/6553600 Dateien (1.1% nicht zusammenhängend), 1007700/13107200 Blöcke Sieht so aus als wäre mein Dateisystem fragmentiert gewesen o.O? Ich dachte, so etwas kennt Linux nicht.
tholle: Linux oder das Dateisystem? ;-)
Isotopp: Seufz. &amp;ldquo;1.1% nicht zusammenhängend&amp;rdquo; Natürlich können Dateien in nicht fortlaufenden Blocknummern gespeichert sein.</description>
    </item>
    
    <item>
      <title>Webanwendungen und der FHS</title>
      <link>https://blog.koehntopp.info/2005/06/13/webanwendungen-und-der-fhs.html</link>
      <pubDate>Mon, 13 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/06/13/webanwendungen-und-der-fhs.html</guid>
      <description>Auf der S9Y Mailingliste fragte ein zukünftiger Paketmaintainer nach, ob er Serendipity für seine Distribution packen solle und wir ihn dabei unterstützten wollen. Abgesehen von allgemeinen Überlegungen die dagegen sprechen, gibt es noch andere Gründe, die das nicht wünschenswert machen.
In den Bereich der allgemeinen Überlegungen fallen zum Beispiel die Releasezyklen von Distributionen: Sie sind in der Regel sehr viel länger als die von Webanwendungen wie Serendipity. Insbesondere sehr langwellige Distributionen wie Debian verteilen mit ihren Paketen Versionen der Software, die die Entwickler von S9Y nicht mehr unterstützen können und wollen.</description>
    </item>
    
    <item>
      <title>Dateisysteme und Datenbanken</title>
      <link>https://blog.koehntopp.info/2004/06/06/dateisysteme-und-datenbanken.html</link>
      <pubDate>Sun, 06 Jun 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2004/06/06/dateisysteme-und-datenbanken.html</guid>
      <description>Der Artikel Filesysteme sind Datenbanken von Matthias Leisi regt mich an, hier mal ein paar Sachen aufzuschreiben, die ich schon länger vor mir her kullere.
Die meisten Unix-Dateisysteme trennen eine &amp;ldquo;Gruppiere Blocks in Dateien&amp;rdquo;-Ebene (Blockverwaltung) und die &amp;ldquo;Gruppiere Dateien in Hierarchien&amp;rdquo;-Ebene (Namensraumverwaltung) voneinander. Die Blockverwaltung ist relativ gut verstanden und der I/O-Layer von Datenbanken überlegen. Die durch WinFS ausgelöste Diskussion findet stattdessen im Bereich Namensraumverwaltung statt.
Blockverwaltung und die Überlegenheit der Filesystem API   Die Ebene der Blockverwaltung bei Dateisystemen ist sehr hoch optimiert und muß akzeptable Performance unter extrem variablen Benutzungspatterns abliefern können.</description>
    </item>
    
  </channel>
</rss>
