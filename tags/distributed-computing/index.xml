<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>distributed computing on Die wunderbare Welt von Isotopp</title>
    <link>/tags/distributed-computing.html</link>
    <description>Recent content in distributed computing on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/distributed-computing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Konsenssysteme</title>
      <link>/2019/09/03/konsenssysteme.html</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/03/konsenssysteme.html</guid>
      <description>Ein Thread über Konsenssysteme aus Twitter Mehr als ein Key-Value Store   Heise schreibt: Verteilter Key-Value-Store: etcd erreicht Version 3.4 . etcd ist auch ein Key-Value-Store, aber das ist nur ein Nebendetail. Die Beschreibung der neuen Funktionen im Artikel macht auch schon keinen Sinn für einen KV-Store.
etcd ist ein Konsenssystem. Es realisiert Clustermitgliedschaft, verteilte Locks, und darauf aufbauende Dienste wie Service Discovery und Loadbalancing.
Es gibt drei von Kyle Kingsbury getestete Implementierungen von Konsenssystemen, die funktionieren: Zookeeper, etcd und consul.</description>
    </item>
    
    <item>
      <title>Grundsätze verteilter Datenbanken</title>
      <link>/2012/03/15/grunds-tze-verteilter-datenbanken.html</link>
      <pubDate>Thu, 15 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012/03/15/grunds-tze-verteilter-datenbanken.html</guid>
      <description>Wonka&amp;gt; Die Toppoint z.B. wird vermutlich nie was haben, was in nennenswerte Last-Regionen kommt, aber ich will - akademisches Interesse und so - schon wissen, wie man das da am besten täte. Was mich auch für die Toppoint interessiert: irgendeine Sorte Redundant Array of Inexpensive Databases :)
Lalufu&amp;gt; MySQL mit Replication? Alternativ mit DRBD?
Isotopp&amp;gt; Mit DRBD. Nicht mit Replikation.
Wonka&amp;gt; Lalufu: Hm, Master-Master-Replication geht ja nur mit Zweien. Wenn man nun mehr als das haben will, kann man zwar Ringe bauen, aber nur einfach verkettete.</description>
    </item>
    
    <item>
      <title>Skalierung in die Breite</title>
      <link>/2008/11/20/skalierung-in-die-breite.html</link>
      <pubDate>Thu, 20 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>/2008/11/20/skalierung-in-die-breite.html</guid>
      <description>Dies ist quasi der 2. Teil zum MySQL-Sun-Dilemma :
In diesem Kommentar bei El Reg sehen wir dasselbe Problem in einigen Jahren auf Intel zu kommen. Der Kommentator sieht wie ich, daß vorhandene Software in der Regel nur einen Core busy hält, oder einen Core pro Verbindung belegen kann, wenn wir über Serversoftware reden.
Ein dicker Multicore-Rechner macht vorhandene Software also nicht schneller. Er sorgt nur dafür, daß die Maschine bei mehr Last (mehr Verbindungen) nicht langsamer wird, so denn der Rest der Infrastruktur, also etwa Platten, Netz und Speicherbus, mithalten können.</description>
    </item>
    
  </channel>
</rss>
