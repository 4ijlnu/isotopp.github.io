<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/php.html</link>
    <description>Recent content in php on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Feb 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/php/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Watchman</title>
      <link>https://blog.koehntopp.info/2018/02/01/watchman.html</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2018/02/01/watchman.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/watchman/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2018/01/watchman-603x640.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;Today I was looking for a way to subscribe to file changes in a directory in
MacOS, in order to trigger automatically running commands whenever files
change. Turns out Homebrew has &amp;ldquo;fswatch&amp;rdquo;, which tells you when things
change, but little else.&lt;/p&gt;
&lt;p&gt;Turns out Homebrew has &amp;ldquo;watchman&amp;rdquo;, which does all this, and on multiple
trees, finds changes across restarts and automatically manages a set of
commands for different file endings.&lt;/p&gt;
&lt;p&gt;Also turns out that I know the author. Thanks, Wez!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP: Understanding unserialize()</title>
      <link>https://blog.koehntopp.info/2017/08/11/php-understanding-unserialize.html</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/08/11/php-understanding-unserialize.html</guid>
      <description>&lt;p&gt;The history of &lt;code&gt;serialize()&lt;/code&gt; and &lt;code&gt;unserialize()&lt;/code&gt; in PHP begins with Boris
Erdmann and me, and we have to go 20 years back in time. This is the day of
the prerelease versions of PHP 3,
&lt;a href=&#34;http://marc.info/?l=php-general&amp;amp;amp;m=90222513233060&amp;amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;some time in 1998&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Boris and I were working on code for a management system for employee education
for German Telekom. The front side is a web shop that sells classes and
courses, the back end is a complex structure that manages attendance, keeps
track of a line manager approval hierarchy and provides alternative dates
for overfull classes. In order to manage authentication, shopping carts and
other internal state, we needed something that allowed us to go from a
stateless system to a stateful thing, securely. The result was
&lt;a href=&#34;https://github.com/bevhost/phplib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHPLIB&lt;/a&gt;

, and especially the code in
&lt;a href=&#34;https://github.com/bevhost/phplib/blob/master/inc/session.inc#L272-L318&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;session.inc&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;That code contained a function &lt;code&gt;serialize()&lt;/code&gt;, which created a stringified
representation of a PHP variable and appended it to a string. There was no
&lt;code&gt;unserialize()&lt;/code&gt; necessary, because &lt;code&gt;serialize()&lt;/code&gt; generated PHP code.
&lt;code&gt;eval()&lt;/code&gt; would &lt;code&gt;unserialize()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One of the problems&lt;/strong&gt; we had to solve was that PHP3 was slow. So if we
were to write out a serialized representation of variables, we would have to
write a parser for that, and that parser better be fast, because it would be
executed at the beginning of each and every page load. We already had such a
parser, and it was the fastest parser available, PHP itself. So we decided
to write a function that takes a variable, recurses through that variable
and generated PHP code to recreate the variable if that code would be
executed.&lt;/p&gt;
&lt;p&gt;For scalars,
&lt;a href=&#34;https://github.com/bevhost/phplib/blob/master/inc/session.inc#L313&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;that is trivial&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;For an array,
&lt;a href=&#34;https://github.com/bevhost/phplib/blob/master/inc/session.inc#L313&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;that is possible with a simple recursion over each element&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;For objects, things are complicated.&lt;/p&gt;
&lt;p&gt;Firstly, in PHP3, an object does not have the slightest clue what it&amp;rsquo;s
classname is. Secondly, an object might have instance variables that we do
not want to be part of the stringified representation of the object, for
example file and image file handles or other resources. We solved both
problems by requiring serializable objects to have metadata instance
variables, &lt;code&gt;classname&lt;/code&gt; and &lt;code&gt;persistent_slots&lt;/code&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;For unserialize, we simply executed that code inside an &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From PHP 4 onward, Sascha Schumann wrote a C implementation of session
management that became a standard part of PHP, which was largely based on
our ideas. Unlike us, he made PHP store session data in the filesystem,
inheriting our idea of probabilistic session expiration. He also converted
the data format from PHP Code to the current representation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another problem that needed adressing was code uniformity:&lt;/strong&gt;
If you load a serialized object written by another web page of your
application, that object has a class. And the code for that class needs to
be loaded before you can load and re-instantiate that object. Basically, you
saved an instance &lt;code&gt;$a&lt;/code&gt; of &lt;code&gt;DemoClass&lt;/code&gt;, and if you load that instance again,
running &lt;code&gt;unserialize()&lt;/code&gt; on it, PHP needs to know what a &lt;code&gt;DemoClass&lt;/code&gt; is and
how to make one, using &lt;code&gt;$a = new DemoClass()&lt;/code&gt;, before it can fill in the
values of all instance variables. So the includes of your app better be the
same on all pages, or you invent the
&lt;a href=&#34;http://php.net/manual/en/function.autoload.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Autoloader&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;The Autoloader originally was a simple callback function that would be
invoked every time you want to make an instance of an unknown class. The
function would get the name of the missing class as a parameter, and would
then be responsible to produce a class definition for that class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__autoload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$missing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Class &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$missing&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is missing.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$missing&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.class.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 

&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is your classic suicide autoloader: Whenever an undefined class is
being encountered, &lt;code&gt;__autoload()&lt;/code&gt; is being called with that classname. It
would then try to include a file with that name (and all dots and slashes
that you manage to falsify into that name) and hope that this would contain
code that defined a class with a matching name.&lt;/p&gt;
&lt;p&gt;Real autoloaders should not look like this (but often they are close enough
to this code to contain exploitable security problems).&lt;/p&gt;
&lt;p&gt;Today the autoload mechanism of PHP is more complicated. It has a
&lt;a href=&#34;http://php.net/manual/en/function.spl-autoload.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;default autoloader&lt;/a&gt;

,
&lt;a href=&#34;http://php.net/manual/en/function.spl-autoload-register.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a mechanism to manage a stack of autoloaders&lt;/a&gt;

,
and a bunch of &lt;a href=&#34;http://php.net/manual/en/function.spl-autoload-extensions.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;other&lt;/a&gt;


&lt;a href=&#34;http://php.net/manual/en/function.include.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;things&lt;/a&gt;

 such as file
extensions and include path names to influence all that. It is also quite
good,
&lt;a href=&#34;https://github.com/Sereal/Sereal/blob/master/README.pod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;even if more sophisticated serializers exist&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what is the state of &lt;code&gt;unserialize()&lt;/code&gt; in PHP these days, and why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/Screen-Shot-2017-08-11-at-13.44.00.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nikita_ppv/status/895571304325062656&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;That was a controversial Tweet&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;It links to this:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/do-not-unserialize-foreign-code.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://php.net/unserialize&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Really Good Advice™&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;People object:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/08/how-does-this-solve-anything.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/buherator/status/895933031529275392&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;People object&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;but given the little tour above, you should be able to understand how
&lt;code&gt;unserialize()&lt;/code&gt; cannot really be made safe for import of foreign data. You can
&lt;code&gt;unserialize()&lt;/code&gt; stuff your code has written, after having verified that the
data you read still is the data you have written, using salted hash_hmac()s
on said data. That&amp;rsquo;s going to be reasonably safe.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t, ever, use &lt;code&gt;unserialize()&lt;/code&gt; as a data interchange format with other
application or an end user. &lt;code&gt;unserialize()&lt;/code&gt; is not an exposable API. Never
was. Other functions and formats for this exist. Use those. Here is some
code to try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#! /usr/local/bin/php 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fnorp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;glorp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dorp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoClass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$priv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;priv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$prot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Constructed.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;To be serialized&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;priv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Just unserialized.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DemoClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;file_put_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_serialize4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;References inside an array work:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;References across unserialize:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;b is unserialized a:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Does the ref still work?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_unserialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;define_democlass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;We want &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$class&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; defined.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoClass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$priv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;fnorp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$prot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;glorp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dorp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Constructed.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;To be serialized&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;priv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pub&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__wakeup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Just unserialized.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show_unserialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;spl_autoload_register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;define_democlass&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;print_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please start with &amp;#39;ser&amp;#39; or &amp;#39;unser&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser3&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ser4&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_serialize4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;unser1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_unserialize1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;unser2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;show_unserialize2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Wot?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use this to see what serialized data looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;i:1; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More complicated stuff such as arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
&lt;span class=&#34;go&#34;&gt;a:3:{i:0;s:5:&amp;#34;fnorp&amp;#34;;i:1;s:5:&amp;#34;glorp&amp;#34;;i:2;s:4:&amp;#34;dorp&amp;#34;;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, references half-work, if they are internal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser4 
&lt;span class=&#34;go&#34;&gt;References inside an array work: 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Array ( [0] =&amp;gt; 2 [1] =&amp;gt; 2 ) 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;References across unserialize: 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;b is unserialized a:Array ( [0] =&amp;gt; 2 [1] =&amp;gt; 2 ) 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Does the ref still work? 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Array ( [0] =&amp;gt; 3 [1] =&amp;gt; 3 ) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but serializing a reference $b that points to $a does not work: The value $b
is referencing is saved, and the unserialized variable will have a value,
but will not reference the previous value. There is no error or warning.&lt;/p&gt;
&lt;p&gt;Here is what we do to Objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php ser3&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; 
&lt;span class=&#34;go&#34;&gt;Constructed. 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;To be serialized 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;O:9:&amp;#34;DemoClass&amp;#34;:3:{s:15:&amp;#34;DemoClasspriv&amp;#34;;s:4:&amp;#34;priv&amp;#34;;s:7:&amp;#34;\*prot&amp;#34;;s:4:&amp;#34;prot&amp;#34;;s:3:&amp;#34;pub&amp;#34;;s:3:&amp;#34;pub&amp;#34;;} 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This shows how the contructor is being executed, how the &lt;code&gt;__sleep()&lt;/code&gt;
callback is called and the content of the serialized file with the
stringified DemoClass instance referencing the class name. If we load this
without DemoClass being defined, we get&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php unser1 
&lt;span class=&#34;go&#34;&gt;__PHP_Incomplete_Class Object ( 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [__PHP_Incomplete_Class_Name] =&amp;gt; DemoClass 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [priv:DemoClass:private] =&amp;gt; priv 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [prot:protected] =&amp;gt; prot 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [pub] =&amp;gt; pub 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can load DemoClass using an autoloader we define. Then we get&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$ &lt;/span&gt;./probe.php unser2 
&lt;span class=&#34;go&#34;&gt;We want DemoClass defined. 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Just unserialized. 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;DemoClass Object ( 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [priv:DemoClass:private] =&amp;gt; priv 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [prot:protected] =&amp;gt; prot 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;  [pub] =&amp;gt; pub 
&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;) 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see the Autoloader being called, the &lt;code&gt;__wakeup()&lt;/code&gt; function running
(it didn&amp;rsquo;t in the example before!) and then the properly re-instantiated
object.&lt;/p&gt;
&lt;p&gt;Note that our new version of DemoClass, as defined by the autoloader, does
define different default values for the instance variables so we can show
that the values from the file are being loaded.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP 7: mysql extension deprecated</title>
      <link>https://blog.koehntopp.info/2017/01/23/php-7-mysql-extension-deprecated.html</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2017/01/23/php-7-mysql-extension-deprecated.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://kuehnast.com/s9y/archives/650-mysql-nach-PHP-7-retten.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mysql() nach PHP 7
retten&lt;/a&gt;

,
Charly Kühnast explains how you can get the deprecated and
disabled mysql extension back in PHP 7. You shouldn&amp;rsquo;t. There are
many reasons for this.&lt;/p&gt;
&lt;p&gt;One of them being that none of the newer features in MySQL can
be used with the old mysql extensions. There is an
&lt;a href=&#34;http://php.net/manual/en/mysqlinfo.api.choosing.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;overview&lt;/a&gt;


in the PHP documentation that explains exactly what you are
missing.&lt;/p&gt;
&lt;p&gt;One of the things that you are missing is support for prepared
statements. Prepared statements are a mechanism in which you
write SQL statements with placeholders for variables, and then
later bind values to the placeholders using a &amp;ldquo;bind&amp;rdquo; call or as
part of the &amp;ldquo;execute&amp;rdquo; call which is actually running the
statement.&lt;/p&gt;
&lt;p&gt;In any case, the variables are being escaped properly
automatically, making SQL injection a lot harder. This is not
just a problem limited to PHP - a search for bind and execute
other sources can be very instructive. For example, the sources
of Opennebula or in older versions of Owncloud (up to and
including version 7) are rich treasure troves of potential
exploits.&lt;/p&gt;
&lt;p&gt;So currently the situation is as follows:&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/2017/01/mysql_protokolle-1.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;There are three extensions at the PHP level, one of which is deprecated and
disabled in PHP 7:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The old mysql extension is no longer available by default, and
for good reasons. Do not use it, do not attempt to use code
that uses it.&lt;/li&gt;
&lt;li&gt;The mysqli extension has been around for very many years, and
offers a procedural and an object oriented interface, and
makes &amp;ldquo;newer&amp;rdquo; MySQL features available, including prepared
statements.&lt;/li&gt;
&lt;li&gt;The PDO_mysql extension has been around for many years, too,
and offers an object oriented, and portable across databases
interface. It also allows access to all &amp;ldquo;newer&amp;rdquo; MySQL
features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The wire protocol of all of these extensions is implemented by a
C-level library, against which the extension can be linked. A
&lt;a href=&#34;http://php.net/manual/en/mysqlinfo.library.choosing.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manual page&lt;/a&gt;


explains the choices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traditionally that has been the Oracle/MySQL C-API
(&amp;ldquo;libmysqlclient&amp;rdquo;, &amp;ldquo;Connector/C&amp;rdquo;), which comes with the
database server. It is available on the GPL, which is a
license different from the PHP license of the rest of the PHP
proper, and it has it&amp;rsquo;s own memory management, which is
different from the PHP native memory management.&lt;/li&gt;
&lt;li&gt;Since PHP 5.3, there is mysqlnd (the &amp;ldquo;native driver&amp;rdquo;, ND). It
re-implements the MySQL wire protocol, and is available under
the same license as PHP itself. It also uses the same memory
management that PHP uses, which makes it faster (no copying)
and more efficient (no duplication of values). It is the
default on a normal PHP build these days.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-you-should-be-using&#34;&gt;
    &lt;a href=&#34;#what-you-should-be-using&#34;&gt;
	What you should be using:
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;These days, your code should not be using the mysql extension.
So you will be using mysqli or PDO_mysql, depending on your
needs, with the underlying implementation of the native driver
doing the heavy lifting.&lt;/p&gt;
&lt;p&gt;Do not attempt to port mysql-Extension based code to PHP 7
without refactoring it for prepared statements, please.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>15 Jahre PHP</title>
      <link>https://blog.koehntopp.info/2010/06/07/15-jahre-php.html</link>
      <pubDate>Mon, 07 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/06/07/15-jahre-php.html</guid>
      <description>&lt;p&gt;Morgen ist der 8. Juni 2010, und damit wird &lt;a href=&#34;http://groups.google.ch/group/comp.infosystems.www.authoring.cgi/msg/cc7d43454d64d133&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP 15 Jahre
alt&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;Die aktuelle Version von PHP ist 5.3.&lt;/p&gt;
&lt;p&gt;Seit &lt;a href=&#34;https://blog.koehntopp.info/2005/06/07/zehn-jahre-php.html&#34;&gt;dem letzten großen Jubiläum&lt;/a&gt;

 vor 5
Jahren hat sich PHP weiterentwickelt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/releases/5_1_0.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP 5.1&lt;/a&gt;

 vom 24. November 2005 war in
erster Linie ein Performance-Release,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/releases/5_2_0.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP 5.2&lt;/a&gt;

 folgte kaum ein Jahr später, am
2. November 2006, und brachte weitere Performanceverbesserungen, die immer
noch viel zu wenig verwendete ext/filter und den FAQ-Klassiker &amp;lsquo;upload
progress tracking&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bis zu
&lt;a href=&#34;http://php.net/releases/5_3_0.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP 5.3&lt;/a&gt;

 sollte es noch weitere 3 Jahre
dauern: Am 30. Juni 2009, kurz nach dem 14. Geburtstag von PHP, erschien
dieses Release, mit vielen lange ersehnten und vielen lange umstrittenen
neuen Eigenschaften - hätte der Unicode-Support nicht gefehlt, hätte es PHP
6.x heißen können.&lt;/p&gt;
&lt;p&gt;Neu in 5.3 sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://de2.php.net/namespaces&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Namespaces&lt;/a&gt;

 zum Beispiel, die eigentlich
alle haben wollten, bei denen aber kaum jemand mit der Wahl des
Namespace-Separators, dem Backslash, einverstanden war.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://de2.php.net/lsb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Late Static Binding&lt;/a&gt;

, das viele OOP-Schmerzen linderte,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://de2.php.net/manual/en/functions.anonymous.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;anonyme Funktionen&lt;/a&gt;


(Lambda-Funktionen und Closures),&lt;/li&gt;
&lt;li&gt;NOW Dokumente (eine Erweiterung von Here-Dokumenten),&lt;/li&gt;
&lt;li&gt;der verkürzte Ternary &amp;ldquo;expr1?:expr3&amp;rdquo;, ein&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://de2.php.net/goto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;goto&lt;/a&gt;

 (komplett mit Velociraptor!),&lt;/li&gt;
&lt;li&gt;und das lange fehlende
&lt;a href=&#34;http://de2.php.net/__callstatic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;__callStatic&lt;/a&gt;

.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dazu dann noch Garbage Collection als Ergänzung zum Refcounting, der mysqlnd
MySQL Native Driver (der ZVAL zur Repräsentation von MySQL-Resultsets
verwendet), Windows 64 Bit-Support, und natürlich wie jedes PHP Release
bisher: noch mehr Module.&lt;/p&gt;
&lt;p&gt;Denn trotz all der OOP-Dekoration und den vielen anderen Verbesserungen ist
PHP immer noch eines: Die Borg. Es ist eine Plattform, mit der sich externe
C-Bibliotheken sehr leicht als Bibliotheken in einer dynamischen Sprache
verfügbar machen lassen. PHP ist daher eine Basis für Glue-Code, Rapid
Prototyping und schnelle und flexible Anwendungserstellung.&lt;/p&gt;
&lt;p&gt;Wobei jetzt seit dem 2. Februar diesen Jahres auch der umgekehrte Weg offen
steht:
&lt;a href=&#34;http://developers.facebook.com/news.php?story=358&amp;amp;blog=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebooks HipHop&lt;/a&gt;


macht aus PHP-Skripten C- bzw. C++-Source, der sich dann compilieren und als
statisches Binary verwenden läßt.&lt;/p&gt;
&lt;p&gt;Und so kommt es, daß die beliebteste Anfänger-Programmiersprache der Welt
zugleich diejenige Plattform ist, auf denen die größten Websites der Welt
laufen.&lt;/p&gt;
&lt;p&gt;Nebenbei bemerkt: Falls Ihr &lt;em&gt;immer&lt;/em&gt; noch PHP 4 einsetzt - heute wäre ein
guter Tag, ein PHP 5.3 zu installieren und den Kram da hin zu migrieren. PHP
5 erschien am 13. Juli 2004. Das ist beinahe 6 Jahre her.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connection Scoped State bei MySQL</title>
      <link>https://blog.koehntopp.info/2009/04/19/connection-scoped-state-bei-mysql.html</link>
      <pubDate>Sun, 19 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2009/04/19/connection-scoped-state-bei-mysql.html</guid>
      <description>&lt;p&gt;Aus einer Diskussion in der deutschsprachigen MySQL Gruppe im USENET. Dort ging es um die Frage, warum phpMyAdmin ein eingeschränktes Werkzeug ist und bei vielen Helfern im Netz unbeliebt. Meine Antwort lautete so:&lt;/p&gt;
&lt;p&gt;phpMyAdmin unterliegt wie auch viele grafische Werkzeuge für MySQL (darunter auch jene, die von MySQL selbst bereitgestellt werden) einigen besonderen Einschränkungen. Diese sind prinzipbedingt und daher auch nicht leicht zu beheben.&lt;/p&gt;
&lt;p&gt;Aber von vorne:&lt;/p&gt;
&lt;p&gt;In MySQL ist es so, daß die Connection einen besonderen Kontext oder Scope darstellt. Mindestens die folgenden Dinge sind mit dem Scope der Connection definiert:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transaktionen. Ein Disconnect entspricht einen ROLLBACK.&lt;/li&gt;
&lt;li&gt;Transaktionen können mit SELECT &amp;hellip; FOR UPDATE oder LOCK TABLES auch Locks erzeugen. Diese sind bei einem Disconnect wieder weg.&lt;/li&gt;
&lt;li&gt;Die mit LAST_INSERT_ID() abrufbare zuletzt von auto_increment vergebene ID wird in der Connection gespeichert. Sie ist nach einem Disconnect nicht mehr verfügbar.&lt;/li&gt;
&lt;li&gt;Mit CREATE TEMPORARY TABLE erzeugte Tabellen. Sie werden bei Disconnect gelöscht.&lt;/li&gt;
&lt;li&gt;Prepared Statements und der vorgeparste Code von Stored Code (CREATE PROCEDURE und CREATE FUNCTION) werden pro Connection verwaltet, auch wenn das technisch eine falsche Lösung ist.&lt;/li&gt;
&lt;li&gt;@-Variablen. &lt;code&gt;SET @bla = 10&lt;/code&gt; oder &lt;code&gt;SELECT @bla := count(*) FROM keks;&lt;/code&gt; definieren jeweils eine Connectionvariable mit dem Namen &lt;code&gt;@bla&lt;/code&gt;, die beim Disconnect verloren ist.&lt;/li&gt;
&lt;li&gt;SESSION-Parameter. &lt;code&gt;SET SESSION mysiam_sort_buffer_size = 1024*1024*64&lt;/code&gt; oder &lt;code&gt;SET @@session.myisam_sort_buffer_size = 1024*1024*64&lt;/code&gt; sind nach einen Disconnect verloren. Dies gilt auch für die häufig gesetzten Character Sets (&lt;code&gt;SET NAMES&lt;/code&gt; ist nur ein Kürzel für drei bestimmte &lt;code&gt;SET SESSION ...&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Replikationsspezifische SET-Kommandos wie &lt;code&gt;SET TIMESTAMP&lt;/code&gt; oder &lt;code&gt;SET LAST_INSERT_ID&lt;/code&gt; können das Verhalten von Funktionen wie &lt;code&gt;SELECT NOW()&lt;/code&gt; oder &lt;code&gt;SELECT LAST_INSERT_ID()&lt;/code&gt; beeinflussen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wir nennen so etwas Zustand im Scope der Connection oder Connection Scoped State (CSS, mal wieder).&lt;/p&gt;
&lt;p&gt;Ein Client, der also unkontrolliert disconnected oder bei dem ein Disconnect nicht korrekt gemeldet wird, ist defekt in dem Sinne, daß die o.a. Funktionalität nicht wie erwartet verfügbar ist.&lt;/p&gt;
&lt;p&gt;Das gilt für viele grafische Clients - viele von denen machen nach dem Absenden der Query und dem Lesen des Resultsets einen Disconnect und verbinden sich für die folgende Query neu, darunter auch der MySQL Query Browser.&lt;/p&gt;
&lt;p&gt;Das gilt auch für einige veraltete Versionen von Connectoren. Eine Zeit lang dachte das MySQL Connector/J-Team zum Beispiel, es sei eine gute Idee, Auto-Reconnect bei Verlust der Connection aus welchem Grund auch immer zu machen. Korrekt ist stattdessen, eine Java Exception dafür zu schmeissen, damit die Anwendung auch eine Chance hat, den Verlust des Session-Zustandes mitzubekommen. Denn wenn einem der Session-Verlust mitten in einer Transaktion passiert, und der Connector dann einfach wieder verbindet statt die Exception zu werfen, kann man ein paar echt schwer zu findende Heisenbugs bauen.&lt;/p&gt;
&lt;p&gt;Und das gilt prinzipbedingt auch für jeden Webclient wie phpMyAdmin einer ist. Es ist nun mal so, daß etwa Apache einen Haufen Worker Slaves hat und daß ein eingehender http-Request einen zufälligen Worker Slave zugeteilt wird. Es wäre also selbst mit &lt;code&gt;mysql_pconnect()&lt;/code&gt; nicht möglich einen phpMyAdmin zu schreiben, der CSS korrekt behandelt.&lt;/p&gt;
&lt;h2 id=&#34;kann-dein-client-css&#34;&gt;
    &lt;a href=&#34;#kann-dein-client-css&#34;&gt;
	Kann Dein Client CSS?
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Definiere in einer Query eine Sessionvariable: &lt;code&gt;SET @bla = &#39;Ich bin korrekt&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In einer zweiten Query frage den Wert der Variaben ab: &lt;code&gt;SELECT @bla;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Wenn Dein Client mit &amp;lsquo;Ich bin korrekt&amp;rsquo; antwortet, kann er CSS verwalten. Ansonsten ist er unbrauchbar und gehört auf den Müll - wer will schon einen Datenbankclient, mit dem man nicht mal eine Transaktion korrekt verwalten kann?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inhaltliche und kulturelle Steuerung von Foren</title>
      <link>https://blog.koehntopp.info/2008/07/23/inhaltliche-und-kulturelle-steuerung-von-foren.html</link>
      <pubDate>Wed, 23 Jul 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/07/23/inhaltliche-und-kulturelle-steuerung-von-foren.html</guid>
      <description>&lt;p&gt;(&lt;em&gt;Update:&lt;/em&gt; 2020-06-19 &lt;a href=&#34;https://howtorecover.me/kontent-i-kulturnyy-kontrol-forumov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Russian version&lt;/a&gt;

 contributed by Vladimir Htr)&lt;/p&gt;
&lt;p&gt;Many years ago, late in 1999, I was involved in the creation of de.comp.lang.php, a USENET newsgroup. Since the group was new I began a personal experiment to influence the communication culture of an &lt;a href=&#34;https://blog.koehntopp.info/2005/06/07/zehn-jahre-php.html&#34;&gt;open USENET group&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;That went on for four to five year, out of which I have been actively involved for two years, earning &lt;a href=&#34;https://blog.koehntopp.info/2007/03/18/warum-alle-meine-texte-frei-im-netz-zu-lesen-sind.html&#34;&gt;good Karma&lt;/a&gt;

. But unfortunately &lt;a href=&#34;http://www.php-faq.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.php-faq.de/&lt;/a&gt;

 is now dead (or outdated and inactive).&lt;/p&gt;
&lt;p&gt;On my disk there was an old text, unpublished for many years, about the concept behind the engagement. I will just post it here, because the strategy might be salvaged and could be applied elsewhere to similarly structured environments. Other environments need different strategies, as shown in my talk about
&lt;a href=&#34;https://blog.koehntopp.info/2007/02/11/flames-kommunikationszusammenbr-che-im-netz.html&#34;&gt;Flames&lt;/a&gt;

. Some of the things shown below I would present differently today, but the core is solid. Maybe it is useful to someone?&lt;/p&gt;
&lt;h3 id=&#34;uplift-or-a-process-to-create-useful-usenet-newsgroups&#34;&gt;
    &lt;a href=&#34;#uplift-or-a-process-to-create-useful-usenet-newsgroups&#34;&gt;
	Uplift or A Process to Create Useful USENET Newsgroups
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;by Kristian Köhntopp&lt;/p&gt;
&lt;p&gt;with apologies to David Brin&lt;/p&gt;
&lt;p&gt;USENET is generally considered a medium with much noise and little useful
content. The claim is that the natural state of a USENET newsgroup is the
flamewar and that exceptions are rare and generally not worth bothering.&lt;/p&gt;
&lt;p&gt;This article tries to establish that this observation need not be true and
presents the process of &amp;ldquo;Uplift&amp;rdquo; by which a newsgroup having &amp;ldquo;Potential&amp;rdquo; can
slowly be turned into a useful support forum with mostly intelligent
discussions and with procedures to stabilize that state to some extent. The
Uplift process has been tested over the period of one year with the german
language newsgroup de.comp.lang.php (3800 articles/month in September; 22500
articles overall until now).&lt;/p&gt;
&lt;h4 id=&#34;newsgroup-history-and-some-past-experiences&#34;&gt;
    &lt;a href=&#34;#newsgroup-history-and-some-past-experiences&#34;&gt;
	Newsgroup history and some past experiences
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;de.comp.lang.php was created 01-Jan-2000 by vote of the german USENET
community.&lt;/p&gt;
&lt;p&gt;The RfD and CfV processes have been initiated by me because I saw a rising
number of PHP related messages in the german Linux newsgroups. Also, I was
subscribed to the german PHP mailing list
(&lt;a href=&#34;http://www.php-center.de/php-de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.php-center.de/php-de/&lt;/a&gt;

) and I
was generally dissatisfied with the content and form of the forum. High
volume mailing lists are generally crude to manage and read and mail2news
gateways are only a substitute for the real thing.&lt;/p&gt;
&lt;p&gt;On the other hand, the german Linux newsgroups were in a state of disarray
and displayed all the worst characteristics attributed to newsgroups in
general:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Newbies were coming into the group and asked the same
questions over and over, sometimes multiple times a day.&lt;/li&gt;
&lt;li&gt;Regulars were fleeing the group, showing strong signs of burnout.&lt;/li&gt;
&lt;li&gt;Flamewars were the rule, sometimes encouraged by regulars with burnout
symptoms which had not fled the group, yet.&lt;/li&gt;
&lt;li&gt;Because there was no group culture (except the default culture of flaming)
and because the groups had no memory, discussions in the group entered a
vicious cycle and did not improve nor shift topic. All action in the
groups converged on flaming.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-goals-for-decomplangphp&#34;&gt;
    &lt;a href=&#34;#the-goals-for-decomplangphp&#34;&gt;
	The goals for de.comp.lang.php
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;PHP is the most popular installed Apache module by far, and traffic on the
german mailing list as well as the support for the RfD showed that a
newsgroup on PHP would be a real success and become high-traffic within a
year.&lt;/p&gt;
&lt;p&gt;My goal was to prove the german Linux burnouts wrong, and demonstrate that a
newsgroup can be manipulated into being a mostly useful and friendly
discussion forum within four months, by giving helpful answers in a friendly
and helpful style.&lt;/p&gt;
&lt;p&gt;Additionally, the group should create a number of regulars interested into
the group being useful within eight months. These regulars should ideally
copy the friendly and helpful style,  distributing load between each other
and setting an example for newbies and regulars-to-be.&lt;/p&gt;
&lt;p&gt;Finally, the group should be self-sustaining within twelve months after
inception. That is, there should be an established Uplift path for regulars
showing true Potential to become FAQ maintainers and active contributors to
the group culture. Ideally, after that year there would be little need for
myself to meddle with the groups sociodynamics. Also, the group would then
be ripe for split due to high traffic volume and the groups concept would
then be proven and could be applied to other groups as well.&lt;/p&gt;
&lt;h4 id=&#34;a-few-simple-building-blocks&#34;&gt;
    &lt;a href=&#34;#a-few-simple-building-blocks&#34;&gt;
	A few simple building blocks
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;Central to the establishment of a group culture is the ability to remember
past discussions and their results. Without memory there is no past, and
without a past there can be no communal traditions and culture. The
fundamental building blocks of newsgroup Uplift are therefore the creation
of
&amp;ldquo;&lt;a href=&#34;http://www.php-faq.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Library&lt;/a&gt;

&amp;rdquo; and a process to spread its knowledge
widely.&lt;/p&gt;
&lt;p&gt;In the context of a USENET newsgroup, The Library is a frequently asked
questions document, which must be seeded initially over the period of two or
three months with the most needed knowledge.&lt;/p&gt;
&lt;p&gt;Ideally, the FAQ is fat. That is, it does not only cover truly frequent
questions, but also provides all background information needed to properly
handle and understande that frequently requested information. The strategy
is to get Clients reading and keep them reading, feeding them not only
solutions to the immediate problems, but also feed them parts of the larger
picture as well as basic USENET traditions and rules.&lt;/p&gt;
&lt;p&gt;This is necessary, because a client coming into the newsgroup with a PHP
related problem most of the time has other problems as well, such as a lack
of basic USENET etiquette and a lack in writing or debugging skills,
preventing the Client to state the problem in a correct or efficient way.
One of the first steps in the Uplift process must be to give the Client
speech, that is, to teach Clients essentials such as proper quoting
behaviour, realname policies, writing style, HTML and vCard policies and
similar stuff. Only with such knowledge the Client can integrate into the
USENET society and become a useful netizen.&lt;/p&gt;
&lt;p&gt;Of course, a client coming into the newsgroup with an immediate problem
wants to hear solutions to that particular problem and is not interested in
being force fed obscure traditions and customs. In order to overcome this
learning block, the immediate problem of the Client must be solved quickly
and to the point. If such a solution is being delivered in an answer
posting, though, the Client usually is receptive and can be fed one or two
bits of additional knowledge and culture as well. If this information is
being kept in the same document as the answer to the Clients problem as
well, it will be accepted even easier by that Client. Thus, a fat FAQ is a
great help in the Uplift process.&lt;/p&gt;
&lt;p&gt;Of course, a vast and fat FAQ is no target to point a client to. The client
has an &lt;em&gt;immediate&lt;/em&gt; problem and needs help urgently. Thus a reference to The
Library should always be specific in nature, pointing the the Client to the
properly phrased question, and containing the full URL of the answer. If the
question and the answer do not match the specific question of the Client in
full, it should be accompanied by some additional sentences of explaination,
showing the Client how to modify the Library provided answer in order to be
useful.&lt;/p&gt;
&lt;p&gt;On the other hand, it is okay if the answer is not a perfect fit, especially
if the Client has already moved somewhat along the path of Uplift. We want
to create future Patrons assisting us in the Uplift of new Clients and
contributing to the FAQ, and this requires these future Patrons to be able
to work out solutions by themselves.&lt;/p&gt;
&lt;p&gt;In de.comp.lang.php, the FAQ is kept at
&lt;a href=&#34;http://www.php-faq.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.php-faq.de/&lt;/a&gt;

, and FAQ references often
have the form of&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.16. Wie verweise ich auf die
FAQ?http://www.php-faq.de/q/q-newsgroup-faqreferenz.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;accompanied by some additional lines of explaination. This form of
reference to FAQable questions has been established very early after the
creation of the newsgroup, and has been adopted by almost all contributors
to the group with Patron capabilities.&lt;/p&gt;
&lt;h4 id=&#34;opening-the-culture-for-self-sustenance&#34;&gt;
    &lt;a href=&#34;#opening-the-culture-for-self-sustenance&#34;&gt;
	Opening the culture for self-sustenance
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;The initial FAQ was copyrighted by me. Although that FAQ was available by
CVS, and was written in an open format (LinuxDoc at that time), there was
little interest of potential contributors to add to the FAQ. The initial
problem was that some people tried to take the FAQ&amp;rsquo;s content and wanted to
edit and republish it for their gain, and that I made it very clear that
this was not acceptable by writing large COPYRIGHT notices all over the
text. Potential contributores had no interest to contribute to a text that
was clearly marked as the exclusive property of someone else. On the other
hand I did not want to give text away for uncontrolled republication and
modification.&lt;/p&gt;
&lt;p&gt;It took me four months to recognize that problem and to resolve it
satisfactorily. The license of the FAQ was changed at that time, and the
text is now available under the Open Publication License
(&lt;a href=&#34;http://www.opencontent.org/openpub/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.opencontent.org/openpub/&lt;/a&gt;

),
which was found to balance all interests well enough to become accepted.&lt;/p&gt;
&lt;p&gt;Also, a mailing list was created to deliver FAQ commit messages and other
important events and to provide a forum for discussion that is more private
that the newsgroup itself. Thus, maintentance load is distributed between
all interested parties, preventing early burnout.&lt;/p&gt;
&lt;p&gt;After the creation of the group, several problems arose which were not
sufficiently covered by the initial charta of the group. Such problems were
for example the handling of posted job offers within the group, or how to
deal with rapidly recurring ontopic questions of little value to regulars
such as &amp;ldquo;Which provider/editor/operating system can be recommended?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It was important for the creation of a group culture that these problems
were resolved by a straw poll of the groups users themselves in order to
create a &amp;ldquo;we-experience&amp;rdquo;. Also, it was important to let the users first
experience the problem themselves before having them vote on it, because
common suffering enhances such &amp;ldquo;we-experiences&amp;rdquo;. On the other hand, such
resolutions must be found before the problem becomes so pressing that it
inhibits normal operation of the group. And finally, there should not be to
many such straw polls in rapid sucession, in order to keep the audience
interested and in order to keep meta-discussions low.&lt;/p&gt;
&lt;p&gt;The straw polls were held at a rate of at most one per month, and the
alternatives were formulated as neutral as necessary for them to be
accepted. Still they were presented from a &amp;ldquo;Patron&amp;rdquo; point of view, by subtly
highlighting the possible consequences of this or that decision where
necessary. The outcome of the straw polls was documented in the first
chapter of the FAQ, along with descriptions of acceptable behaviour around
these topics and pointers to alternative or additional ressources.&lt;/p&gt;
&lt;p&gt;This works reasonably well: 2 out of 3 atavistic throwbacks are usually
quickly terminated by pointing the Client to the proper FAQ article handling
such topics as provider recommendations, editor comparisions or language
advocacy.&lt;/p&gt;
&lt;p&gt;Job postings are usually not handled this way, because they are by nature
hit-and-run events in which a company drops a shower of job offers in a
number of newsgroups without caring about local group culture. Instead these
matters are usually resolved by a mail to their given contact address
quoting the relevant FAQ article.&lt;/p&gt;
&lt;p&gt;The article contains enough acid to drive to point home without being
outright unfriendly. In order to save duplicate work and prevent the
offender from being harassed by multiple community members, it is an
emerging tradition to copy such letters to the german-faq mailing list
enabling the contributing regulars to synchronize their activities. It is
also great fun to share the answers, improving the &amp;ldquo;we-experience&amp;rdquo; once
more.&lt;/p&gt;
&lt;p&gt;We have yet to see second-time offenders.&lt;/p&gt;
&lt;h4 id=&#34;why-does-it-work&#34;&gt;
    &lt;a href=&#34;#why-does-it-work&#34;&gt;
	Why does it work?
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;For Patrons, The Library makes it much easier to create useful answers by
referencing the FAQ than to write an intelligent flame. Once this is
understood by a contributing regular, the default stress reaction shifts
from flaming to writing short and constructive articles containing pointers
to the relevant information. This greatly improves the morale within the
newsgroup, as flaming creates more flaming.&lt;/p&gt;
&lt;p&gt;For Clients, reading the provided FAQ reference is easier than to go at it
again in a followup posting. Asking followup questions is more work and has
a higher round-trip-time than simply reading on and learning something. As
long as the FAQ anticipates the next question along the path and provides
stuff that is easily understandable and properly documented, the Client will
not ask again but try to achieve something alone. This enhances the Clients
ability to work independently, Uplifting it further. It also cuts down on
the total number of posts to the group, lightening the load for the
contributors of answers.&lt;/p&gt;
&lt;p&gt;Also, FAQ solutions are tried and tested, have proper error handling and are
commented, making them more valuable than on-the-fly creations, thus the
Client will come to prefer FAQ quality answers over newsgroup quality
answers. It will turn to the FAQ immediately next time a problem arises,
becoming somewhat dependent on that information source.&lt;/p&gt;
&lt;p&gt;Writing FAQ pointers is a cheap way to gather Patron status for regulars, as
all components are available ready-made and need only deployment and slight
customization. Thus, even some recently Uplifted Client can begin to gather
Patron reputation by becoming a contributor of answers to the group. This
enables older Patrons to move on and perhaps become FAQ committers.&lt;/p&gt;
&lt;p&gt;Patrons becoming dependent on the library feel a growing desire to
contribute to The Library as soon as they hits holes multiple times when
writing answers. They feel that their business becomes significantly more
difficult in areas not covered by the FAQ, and start comitting new answers
or even new chapters. Since all articles in the FAQ bear the name of the
Patron who created it, adding to the FAQ is a way to gain status more
permanently than by writing newsgroup articles: Unlike newsgroup answers
which expire quickly, FAQ contributions tend to stay and keep the Patrons
name in the light for a much longer time.&lt;/p&gt;
&lt;p&gt;This effectively creates two processes:&lt;/p&gt;
&lt;p&gt;One process takes answers and threads from the newsgroup and compresses them
to reuseable, tested and tried articles. Context-dependent information from
a USENET thread, losely distributed over multiple articles, becomes
context-independent, is peer reviewed and available in the much tighter
format of a FAQ article. This process improves information.&lt;/p&gt;
&lt;p&gt;The second process is the process of Uplift, which educates contributors to
the group in USENET etiquette as well as in matters covered by the groups
charta, by turning them from Clients asking questions into Patrons providing
answers or even Senior Patrons contributing to the content of the FAQ. This
process improves people.&lt;/p&gt;
&lt;h4 id=&#34;dealing-with-atavism&#34;&gt;
    &lt;a href=&#34;#dealing-with-atavism&#34;&gt;
	Dealing with Atavism
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;USENET is showered with a constant rain of newbies. Usually, big loads of
newbies in a short time lead to group degeneration, spontaneous topic
combustion (&amp;ldquo;flamewars&amp;rdquo;) and loss of directed discussion activity at group
level. This phenomenon is called
&amp;ldquo;&lt;a href=&#34;http://www.catb.org/jargon/html/S/September-that-never-ended.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;September&lt;/a&gt;

&amp;rdquo;
because before 1993 the month of September was the time when new students at
the Universities hit the network.&lt;/p&gt;
&lt;p&gt;The Uplift process provides means to newsgroup regulars to deal with a
larger number of newbies sucessfully, avoiding burnout and flamewars.
Uplifting converts newbies into useful netizens faster than usual, too, and
uses these fresh converts to deal with even newer newbies if applied
successfully.&lt;/p&gt;
&lt;p&gt;Even with an Uplift process in place, a newsgroup may experience occasional
atavistic throws. This is usually the case when a Patron experiences
burnout, and lets himself go publicly. Often this is provoked by a
particularly clueless newbie posting, or an outright flame.&lt;/p&gt;
&lt;p&gt;To deal with atavism and have it not ruin the groups climate, it is
important to encourage Patrons to take their grievances to mail. This can be
done by using the FAQ maintenance mailing list, or by encouraging the Patron
to flame a newbie by mail and copy the flame to the FAQ maintenance mailing
list for the enjoyments of the others (and to inform than that this
particular case has been already taken care of). The german FAQ contains a
section titled&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.12 Warum bekomme ich Ermahnungsmails, wenn ich Autoren in der Gruppe auf
Netiquetteverstˆﬂe aufmerksam mache?&amp;ldquo;Why do I get reminder mails,
when I remind people publicly of netiquette violations?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and this one is listed BEFORE&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.13 Warum bekomme ich Ermahnungsmails?&amp;ldquo;Why am I mailed with netiquette
reminders?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not acceptable for a Patron to display behaviour which cannot be
tolerated in Clients, and besides it does not help ontopic discussion in the
group if meta-discussion swamps the forum.&lt;/p&gt;
&lt;p&gt;The full answer to question 1.12 is (translated from German):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;You are completely right: Some authors in this group violate the
netiquette as posted to de.newusers.infos, for example by posting without
a realname, by using invalid reply addresses or by posting HTML or vCards.
You need not tolerate this. In newsgroups, tone is as important as
content, though. The regulars of de.comp.lang.php are proud of the
friendly and helpful tone in their newsgroup. So if you want to remind
another author to keep to the netiquette, please do this by mail and not
in public. The very netiquette you are trying to enforce requires this -
you cannot validly demand conformity with this convention, and at the same
time violate it yourself without losing credibility. Please: Keep your
tone friendly in your mail as well. You are easier understood this way,
and it is more likely that you complete your mission this way. If you
believe that your article must be posted in public, for example in order
to forward discussion to another newsgroup, or because the mail address
given is invalid, or because the author in question has not been
cooperative in mail: Please keep your article friendly and constructive.
That is: Answer the question of the offender or offer a solution to his
problem as good as possible. Only after that remind him about the
netiquette. If you cannot contribute to the original problem, do not post
or write mail. You are not alone in this group and you do not need to save
the world alone. Somebody else who knows the proper answer will write a
public reply and probably will remind the original author of proper
behaviour.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This take-it-to-mail policy has been in force since beginning of March 2000,
and has been enforced several times since then between the regulars and by
themselves. Obviously the regulars in this group like the climate and tone
of their group and accept the offered conflict resolution solution as a
viable mode to deal with the problem and with offenders. Flamewars seldom
last for more than a day or two, if they happen at all.&lt;/p&gt;
&lt;p&gt;It is important for the users of the newsgroup to learn how to deal with
flames properly, taking them as failed attempts to communicate instead of
insults, and cooly pointing the offender to the relevant ressources to help
him state his problem correctly. The answer to 1.13 translates as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Not only in de.comp.lang.php, but in most other German newsgroups you
will be reminded of proper behaviour in newsgroups, if you post without a
proper realname, with an invalid return address, send unwanted
advertisements, post HTML or vCards, or post offtopic on purpose. The
oldtimers and regulars of USENET did not come up with their rules and
traditions for nothing. USENET has been in existence for some tens of
years, and the rules of communication on USENET have been proven in over
this time. There is an introduction in de.newusers.infos titled &amp;lsquo;Why
should I stick to the rules?&amp;rsquo; explaining why things are as they are and
how they came to be. If you want results from posting to de.comp.lang.php,
that is, if you expect technical help with PHP, you are well advised to
watch the outer form of your text and honor our traditions.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These two texts are usually sufficient to calm down the offender and the
flaming Patron and to tie them into one or two mail exchanges discussion
their behavior and offering counseling. Having shared the experience and
providing hints to deal with frustration is helpful.&lt;/p&gt;
&lt;p&gt;Sometimes productive behaviour emerges from such a mail exchange, making
this counseling rewarding for the person sending the mail. For example the
formerly flaming Patron may become motivated to work on the FAQ, or take up
another project which he believes would help him to compensate his anger.
The publicly visible component of the flamewar is usually silenced
immediately after the mail exchange starts, with sometimes some erroneous
postings by third parties coming in late.&lt;/p&gt;
&lt;h4 id=&#34;lessons-learned&#34;&gt;
    &lt;a href=&#34;#lessons-learned&#34;&gt;
	Lessons Learned
    &lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;It is possible to take control of the content and the traditions of a
USENET newsgroup for an extended amount of time, if the perceived change for
the majority of the regulars is a change for the better.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The tools for affecting the change are the creation of a recorded tradition
by the creation of a FAQ, making proper and improper behavioral standards
explicit and addressable for reference in a discussion, and a specific
procedure for teaching these standards to newcomers. This specific procedure
involves taking the newcomers problem serious, solving it and pushing
additional corrective information with that answer in a non-offensive and
non-degrading way at the newcomer.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 Jahre PHPLIB</title>
      <link>https://blog.koehntopp.info/2008/05/29/10-jahre-phplib.html</link>
      <pubDate>Thu, 29 May 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2008/05/29/10-jahre-phplib.html</guid>
      <description>&lt;p&gt;Vor etwas mehr als 10 Jahren, am 19. Mai 1998, schrieb ich
&lt;a href=&#34;http://marc.info/?l=php-general&amp;amp;m=90222497032618&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;auf php-general&lt;/a&gt;

 von einer PHP Standardbibliothek.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP should ship with, and install by default, a standard library. This
library should offer certain standard functionality that is often required
in larger web projects.The language itself does not need to support any of
the functionality that should be in the library (see below). In fact,
quite a lot of PHP special functions are probable candidates for library
functions that could (and perhaps should) be removed from the language
core, if you are into language purity (I am not). What PHP needs in my
personal opinion is a more stable, better debugged and better equipped
modularization mechanism (and better namespace management).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wenig später, Ende Juni, kam dann die Ankündigung
&lt;a href=&#34;http://marc.info/?l=php-general&amp;amp;m=90222503034131&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;von Sessionvariablen und Authentisierung&lt;/a&gt;


in einem runterladbaren Paket. Im Juli gab es dann die erste Version mit
&lt;a href=&#34;http://marc.info/?l=php-general&amp;amp;m=90222513232492&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP 3 Objekten&lt;/a&gt;

. Um diese Zeit ging dann auch
&lt;a href=&#34;http://marc.info/?l=php-general&amp;amp;m=90222513233868&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;die Supportsite&lt;/a&gt;

 online.
Das Projekt idlet jetzt unter anderer Führung auf
&lt;a href=&#34;http://phplib.sourceforge.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SourceForge&lt;/a&gt;

 rum - es hat sich inzwischen überlebt.&lt;/p&gt;
&lt;p&gt;Die Mails
&lt;a href=&#34;http://marc.info/?l=phplib&amp;amp;m=94064176914442&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keeping state at the server&lt;/a&gt;

 und
&lt;a href=&#34;http://marc.info/?l=phplib&amp;amp;m=94064176914442&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What was your name, again?&lt;/a&gt;

 erklären die Ideen
und Konzepte dahinter.&lt;/p&gt;
&lt;p&gt;PHPLIB hat das Konzept der Session in PHP eingeführt und war die
Default-Bibliothek dafür in PHP 3. Sascha Schumann hat den Code dann in PHP4
in den PHP-Kern selber überführt. PHPLIB hat außerdem das Konzept des
Datenbankwrappers in PHP eingeführt und eine der ersten
Template-Bibliotheken enthalten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parameterdeklarationen für Webseiten</title>
      <link>https://blog.koehntopp.info/2007/03/30/parameterdeklarationen-fur-webseiten.html</link>
      <pubDate>Fri, 30 Mar 2007 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2007/03/30/parameterdeklarationen-fur-webseiten.html</guid>
      <description>&lt;p&gt;Es ist mal wieder Zeit, sehr alte Hüte rauszukramen. Heute habe ich mir dienstlich eine Datenbank angesehen, die von PHP aus angesprochen wird. Das PHP, das dort verwendet wird, ist sehr loses PHP, also ohne die Verwendung eines großartiges Frameworks geschrieben. Entsprechend bin ich quasi sofort über SQL-Injections und XSS gefallen.&lt;/p&gt;
&lt;p&gt;Denn schon nach kurzem Suchen findet man Code wie den folgenden:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$theValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;theValue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$theValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$where&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; where theColumn = &amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$theValue&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Eigentlich hat der betrachtete Code eine &lt;code&gt;cleanup()&lt;/code&gt;-Funktion, die für jeden Wert aufgerufen werden soll, und die nicht nur den Typ des Wertes deklariert, sondern auch das notwendige Escapen der Werte &amp;ldquo;in place&amp;rdquo; vornimmt.&lt;/p&gt;
&lt;p&gt;Das ist aber in mehrfacher Hinsicht unschön.&lt;/p&gt;
&lt;p&gt;Wenn man Code wie&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;theValue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cleanup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;theValue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;schreibt, und vergisst diesen Cleanup-Aufruf einzufügen, dann haben wir keinen bemerkbaren Fehler: Der Folgecode, der auf &lt;code&gt;$_REQUEST[&#39;theValue&#39;]&lt;/code&gt; zugreift, bekommt Werte zu sehen und bleibt nicht mit einer Fehlermeldung &amp;ldquo;Keine Inputreinigung vorgenommen!&amp;rdquo; stehen.&lt;/p&gt;
&lt;p&gt;Außerdem sind die angewendeten Typprüfungen nicht flexibel genug und gehen nicht weit genug. &amp;lsquo;text&amp;rsquo; erzeugt im betrachteten Code gerade mal ein &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;, aber wendet keine weitergehenden Prüfungen auf den Eingabewert ein. Außerdem werden Eingabewerte, die für die Seite gar nicht da sein dürfen, trotzdem akzeptiert und dann vielleicht ignoriert – vielleicht aber auch nicht.&lt;/p&gt;
&lt;p&gt;(Das folgende Codebeispiel zum Runterladen: [input_validation.php.txt](/uploads/input_validation.php.txt&amp;quot; title=&amp;ldquo;input_validation.php.txt&amp;rdquo; target=&amp;quot;_blank))&lt;/p&gt;
&lt;p&gt;Kurz gesagt: Was ich möchte ist eigentlich eine Typdeklaration für eine PHP-Seite, die die Eingabeparameter mit Namen und Typprüfungen deklariert.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cleaners&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;county&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text_regex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pattern&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;[a-zA-Z0-9]+&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;int_minmax&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1834&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1864&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;quarter&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;int_enum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ich will dann eine Eingabeprüfung, die ein Input-Array durchgeht und die Cleaners der Reihe nach anwendet. Das Resultat ist eine optionale Liste von Fehlern und ein gesäubertes Input-Array &lt;code&gt;$_CLEAN&lt;/code&gt;, das vom &lt;code&gt;$_REQUEST&lt;/code&gt;-Array verschieden ist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// simulated input
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_REQUEST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;county&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;someword&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;quarter&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;bogus&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// collect error messages
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_ERROR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// clean it up
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_CLEAN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cleaners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_ERROR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// the cleaned input
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cleaned input&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_CLEAN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// the error messages
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;collected errors&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_ERROR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fehlt der &lt;code&gt;clean()&lt;/code&gt;-Aufruf am Anfang einer Seite, ist &lt;code&gt;$_CLEAN&lt;/code&gt; leer und späterer Code, der &lt;code&gt;$_CLEAN&lt;/code&gt; referenziert, kann nicht funktionieren – der Fehler wird sofort bemerkt.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$_CLEAN&lt;/code&gt; kann nur Werte enthalten, deren Namen als Keys in &lt;code&gt;$cleaners&lt;/code&gt; deklariert sind – undeklarierte Eingabewerte existieren nicht mehr in unserem Programm. &lt;code&gt;$_CLEAN&lt;/code&gt; kann außerdem nur Werte enthalten, für die die in &lt;code&gt;$cleaners[$k][&#39;check&#39;]&lt;/code&gt; deklarierten Checkerfunktionen existieren – Deklarationsfehler bei Checkerfunktionen führen zu Programmabbruch und werden so sofort bemerkt. Schließlich kann &lt;code&gt;$_CLEAN&lt;/code&gt; nur Werte enthalten, für die die angegebenen Checkerfunktionen erfolgreich waren.&lt;/p&gt;
&lt;p&gt;Eine Checkerfunktion hat den Namen &lt;code&gt;check_...&lt;/code&gt; und gibt ein Paar (Wert, Fehlermeldung) zurück. Wenn der Wert &lt;code&gt;NULL&lt;/code&gt; ist, ist eine Fehlermeldung vorhanden und kann eingesammelt werden – der Checker ist fehlgeschlagen. In allen anderen Fällen ist der Checker erfolgreich.&lt;/p&gt;
&lt;p&gt;Diese Bedingungen sind schnell runtergeschrieben und sehen in Code dann so aus:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cleaners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$E&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// collected results in $C, collect errors in $E (which is optional)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;$C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// scan the request variables
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$R&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Check for bogus values.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cleaners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*** WARNING: Skipped bogus value &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// If we make it to here, the value should be imported.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// generic cleanup
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;get_magic_quotes_gpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stripslashes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;function_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysql_real_escape_string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
               &lt;span class=&#34;nx&#34;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 
               &lt;span class=&#34;nx&#34;&gt;mysql_escape_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// The value can be imported only, if the specified cleaner exists.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$checkfun&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check_&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cleaners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;function_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$checkfun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// $c will then be the sanitized value
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$checkfun&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cleaners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*** ERROR: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; =&amp;gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; fails &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;because specified checkfun &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$checkfun&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; does not exist.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;// The value can be imported only, if the specified cleaner succeeded.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Import &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;s value of &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; as &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$c\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
      &lt;span class=&#34;nv&#34;&gt;$C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// collect error anyway
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*** WARNING: Not importing &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;because &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; failed &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$checkfun&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;$E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// collect error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jetzt müssen wir nur noch Checkfunktionen schreiben, die die eigentlichen Prüfungen ausführen. In unserem Fall wollen wir noch die folgenden Konventionen gelten lassen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jede &lt;code&gt;checkfun&lt;/code&gt; hat einen Parameter &lt;code&gt;default&lt;/code&gt;, der einen von &lt;code&gt;NULL&lt;/code&gt; verschiedenen Default-Wert definieren kann. In diesem Fall schlägt der Check nie fehl, sondern returned den spezifizierten Default-Wert. Eine eventuell erzeugte Fehlermeldung wird dennoch eingesammelt, hat dann aber mehr den Character einer Warnung.&lt;/li&gt;
&lt;li&gt;Für jeden Parameter &lt;code&gt;p&lt;/code&gt; einer checkfun wollen wir optional auch die Definition eines Fehlermeldungs-Parameters &lt;code&gt;p_err&lt;/code&gt; zulassen, mit dem die Fehlermeldung überschrieben werden kann, den die checkfun generiert, wenn der Test für &lt;code&gt;p&lt;/code&gt; fehlschlägt. Einige Beispiele werden das klarer machen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hier ist der &lt;code&gt;regexp&lt;/code&gt;-Test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_text_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$pattern&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$pattern_err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check_text_regex: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pattern_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pattern_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                 &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; did not match &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$pattern&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;In check_text_regex: k=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; v=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; pattern= &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$pattern\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/^&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$pattern\&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;$/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pattern_err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Der Test prüft, ob der Wert &lt;code&gt;$v&lt;/code&gt; dem regulären Ausdruck &lt;code&gt;$par[&#39;pattern&#39;]&lt;/code&gt; genügt. Wenn ja, wird &lt;code&gt;$v&lt;/code&gt; ohne Fehlermeldung zurückgegeben. Wenn nein, wird &lt;code&gt;$par[&#39;default&#39;]&lt;/code&gt; zusammen mit der Fehlermeldung &lt;code&gt;$par[&#39;pattern_err&#39;]&lt;/code&gt; zurückgegeben.&lt;/p&gt;
&lt;p&gt;Entsprechend der &lt;code&gt;minmax&lt;/code&gt;-Test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_int_minmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$min&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$min_err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check_int_minmax: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; 
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;min_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;min_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;lt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$min&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$max&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;max&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$max_err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check_int_minmax: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; 
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;max_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;max_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$max&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;In check_int_minmax: k=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; v=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; min=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$min&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; max=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$max\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;intval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$min_err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$max_err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dieser Test folgt demselben System: Wenn der Wert &lt;code&gt;$v&lt;/code&gt; zwischen &lt;code&gt;$min&lt;/code&gt; und &lt;code&gt;$max&lt;/code&gt; liegt, wird er ohne Fehlermeldung zurückgegeben. Andernfalls wird $default und eine Fehlermeldung erzeugt. Die Fehlermeldungen können dabei als &lt;code&gt;$min_err&lt;/code&gt; und &lt;code&gt;$max_err&lt;/code&gt; spezifiziert werden, der &lt;code&gt;$default&lt;/code&gt; ist &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Und der &lt;code&gt;int_enum&lt;/code&gt;-Test, um das Beispiel vollständig zu machen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_int_enum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$values&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$valuestring&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$values_err&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;check_int_enum: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;values_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;values_err&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; not in &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$valuestring&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_key_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$par&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;In check_int_enum: k=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$k&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; v=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; values=(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$valuestring&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;intval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array_search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$values_err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Auch hier werden die Konventionen befolgt: &lt;code&gt;$default&lt;/code&gt; und die Fehlermeldung &lt;code&gt;$values_err&lt;/code&gt;, wenn der gegebene Wert &lt;code&gt;$v&lt;/code&gt; nicht im &lt;code&gt;$values&lt;/code&gt;-Array vorkommt, sonst &lt;code&gt;$v&lt;/code&gt; und keine Fehlermeldung.&lt;/p&gt;
&lt;p&gt;Mit diesem Code und ein wenig Suchen und Ersetzen sollte sich jede framework-freie PHP-Seite schnell auf eine harte Deklaration von Eingabeparametern umstellen lassen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$cleaners&lt;/code&gt; definieren&lt;/li&gt;
&lt;li&gt;Alle Vorkommen von &lt;code&gt;$_REQUEST&lt;/code&gt; durch &lt;code&gt;$_CLEAN&lt;/code&gt; ersetzen&lt;/li&gt;
&lt;li&gt;globals &lt;code&gt;$_CLEAN&lt;/code&gt; nachrüsten, weil &lt;code&gt;$_CLEAN&lt;/code&gt; kein Superglobal ist&lt;/li&gt;
&lt;li&gt;Aufruf von &lt;code&gt;clean()&lt;/code&gt; an passender Stelle einfügen, ggf. Fehlerbehandlung in &lt;code&gt;$_ERROR&lt;/code&gt; vornehmen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nein, auch das ist nicht 100% wasserdicht, dürfte aber das meiste Feld-, Wald- und Wiesen-PHP schon mal gründlich gegen die größten Dummheiten schützen.&lt;/p&gt;
&lt;p&gt;Und das alles mit weniger als 60 Minuten Codieraufwand. Vielleicht sollte man eine Extension draus machen, und die so konfigurieren, daß sie die echten &lt;code&gt;$_REQUEST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_FILES&lt;/code&gt; und &lt;code&gt;$_COOKIE&lt;/code&gt; verbirgt und durch zwangsweise von &lt;code&gt;clean()&lt;/code&gt; generierte Arrays gleichen Namens ersetzt.PHP-Seiten ohne &lt;code&gt;$cleaners[]&lt;/code&gt;-Array können dann gar keine Parameter mehr im Zugriff haben.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webanwendungen und der FHS</title>
      <link>https://blog.koehntopp.info/2005/06/13/webanwendungen-und-der-fhs.html</link>
      <pubDate>Mon, 13 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/06/13/webanwendungen-und-der-fhs.html</guid>
      <description>&lt;p&gt;Auf der S9Y Mailingliste fragte ein zukünftiger Paketmaintainer nach, ob er Serendipity für seine Distribution packen solle und wir ihn dabei unterstützten wollen. Abgesehen von allgemeinen Überlegungen die dagegen sprechen, gibt es noch andere Gründe, die das nicht wünschenswert machen.&lt;/p&gt;
&lt;p&gt;In den Bereich der allgemeinen Überlegungen fallen zum Beispiel die Releasezyklen von Distributionen: Sie sind in der Regel sehr viel länger als die von Webanwendungen wie Serendipity. Insbesondere sehr langwellige Distributionen wie Debian verteilen mit ihren Paketen Versionen der Software, die die Entwickler von S9Y nicht mehr unterstützen können und wollen.&lt;/p&gt;
&lt;p&gt;Auch ist fraglich, welchen Gewinn ein solches Package bringen soll. Eine Anwendung wie S9Y installiert sich mit Download-Auspacken-Anklicken sowieso schon selber und ist dabei dann an keinerlei externes Packaging oder fremde Zyklen gebunden. Eine Installation mit Betriebssystem-Packages bringt da nur Nachteile und fehlende Flexibilität. Zum Beispiel ist es so nicht leicht möglich, mehr als eine Version von S9Y an mehr als einer Location im System zu installieren, denn das Packagemanagement der üblichen Distributionen unterstützt weder konkurrente Installation unterschiedlicher Paketversionen noch sind verschiebliche Pakete mit durch den Anwender bestimmter Package-Root allgemein üblich.&lt;/p&gt;
&lt;p&gt;Aber das ist nur die Spitze des Eisberges. Checkt man sich einmal
&lt;a href=&#34;https://alioth.debian.org/projects/webapps-common/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webapps-common&lt;/a&gt;

 aus und liest, was da drin steht - oder vielmehr nicht drin steht, sieht man, daß ein solches Packaging nur Nachteile haben kann:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;21-web-applications-and-the-fhs&#34;&gt;
    &lt;a href=&#34;#21-web-applications-and-the-fhs&#34;&gt;
	2.1 Web applications and the FHS
    &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Web applications should follow the same guidelines as any other software. most specifically, they should not make any assumption about how the administrator has arranged the file hierarchy outside of the FHS by placing files in non-standard places such as /var/www or /usr/local. Specifically, the following table should serve as guidelines for the location of files:&lt;/p&gt;
&lt;p&gt;| type of file                           | location                        |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+
| static web pages                       | /usr/share/PACKAGE/www          |
| dynamically interpreted web pages      | /usr/share/PACKAGE/www          |
| persistent application data            | /var/lib/PACKAGE                |
| dynamcially executed web pages         | /usr/lib/cgi-bin/PACKAGE        |
| application-specific libraries         | /usr/share/PACKAGE/include      |
| site configuration                     | /etc/PACKAGE                    |
| locally modifiable/overridable content | /etc/PACKAGE/templates          |
| php libraries                          | /usr/share/php/PACKAGE          |
| rrd, mrtg and other database files     | see database application policy |&lt;/p&gt;
&lt;p&gt;Fußnoten weggelassen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Das ist so kraß konsequent an der Realität vorbei, daß es mir persönlich schon wieder Respekt abnötigt.&lt;/p&gt;
&lt;p&gt;Webanwendungen sind überall für Webhostingumgebungen entwickelt, denn dies ist bei weitem die verbreiteste Form des Deployments für Webanwendungen. Webhostingumgebungen werden aber in der Regel per Filetransfer in ein Verzeichnis unterhalb der DocumentRoot der Kundendomain beschickt. Sicherheitsmechanismen in Webhostingumgebungen berücksichtigen das: Mit chroot() oder Virtual Base Directory versuchen sie, den Kunden auf seinen Verzeichnisteilbaum zu beschränken. mit einer UID und GID pro Kunde oder pro Kundendomain versuchen sie, Betriebssystem-Zugriffsrechte als Hilfsmittel zur Kundentrennung zu benutzen.&lt;/p&gt;
&lt;p&gt;Eine Webapp-Policy, die das komplett ignoriert und Webanwendungen atomisiert, um ihre Trümmer dann einmal durch das Dateisystem zu zerstäuben hat so überhaupt nichts mit der Realität zu tun, daß man im ersten Augenblick nur sprachlos daneben stehen kann.&lt;/p&gt;
&lt;p&gt;Okay, hier ist also einmal ein Katalog von Anforderungen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Policy muß chroot/virtual base directory jails unterstützen&lt;/li&gt;
&lt;li&gt;Policy muß UID pro Domain/GID pro Kunde oder ähnliche Setups unterstützen, die auf Apache suexec oder PHP safe_mode basieren&lt;/li&gt;
&lt;li&gt;Policy muß erlauben, daß die Anwendung mehr als einmal pro physikalischem Rechner installiert wird&lt;/li&gt;
&lt;li&gt;Policy muß erlauben, daß die Anwendung in mehr als einer Version pro physikalischem Rechner installier wird.&lt;/li&gt;
&lt;li&gt;Policy muß dem Kunden erlauben, seine Installation per ftp/scp/rsync zu sichern und zu modifizieren. Versionsmanagement muß erkennen, ob die modifizierte Anwendung danach noch automatisiert updatebar ist und ggf. einen Mergeprozeß unterstützen.&lt;/li&gt;
&lt;li&gt;Policy muß die Installation mehrerer unterschiedlicher Webanwendungen pro Vhost in unterschiedliche Directories unterhalb der DocRoot eines VHosts unterstützen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die Policy muß also ein Framework liefern, mit dem man Vhosts schnell erzeugen kann, mit dem man in einem Vhosts Features wie modlogan, perl, python, php, chroot Jail und andere Eigenschaften enablen und disablen kann, und mit dem man pro VHost eine oder mehrere Anwendungen in unterschiedlichen Verzeichnissen installieren und möglicherweise sogar sicher aktualisieren kann. Dabei muß die Anwendung durch Kopie aus einem Shared Repository installiert werden können, durch Hardlink auf das Repository um Platz zu sparen oder sie muß, wenn die Anwendung das unterstützt, shared installs (PEAR, S9Y, &amp;hellip;) möglich machen.&lt;/p&gt;
&lt;p&gt;All das ist natürlich mit dem FHS komplett inkompatibel. Aber kompatibel mit den Anforderungen des Webgeschäfts, das nun einmal mit dem FHS erst einmal genau gar nix zu tun hat.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zehn Jahre PHP</title>
      <link>https://blog.koehntopp.info/2005/06/07/zehn-jahre-php.html</link>
      <pubDate>Tue, 07 Jun 2005 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2005/06/07/zehn-jahre-php.html</guid>
      <description>&lt;p&gt;Wie
&lt;a href=&#34;http://blog.coggeshall.org/archives/203_A_Decade_of_PHP.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;anderswo&lt;/a&gt;


angemerkt, ist morgen der 8. Juni 2005, und damit der
&lt;a href=&#34;http://groups.google.ch/group/comp.infosystems.www.authoring.cgi/msg/cc7d43454d64d133&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10. Geburtstag&lt;/a&gt;


von PHP.&lt;/p&gt;
&lt;p&gt;Was als kleines Tools zur Erstellung der Bewerbung von Rasmus Lerdorf
angefangen hat, ist jetzt ein ausgewachsenes Tool zur Erstellung und
Handhabung von Webanwendungen. PHP glänzt vor allen Dingen durch seine
Integrationsfertigkeiten: es ist die Borg, die Glue Language des Web, die
alle anderen Bibliotheken und Kommunikationswege
&lt;a href=&#34;http://en.wikipedia.org/wiki/Assimilation_%28Star_Trek%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;assimiliert&lt;/a&gt;

 und zur
Erreichung der eigenen Perfektion integriert.&lt;/p&gt;
&lt;p&gt;Ich selber bin zu PHP wahrscheinlich irgendwann in 1997 oder 1998 gekommen.
Boris Erdmann hat damals mit PHP/FI (PHP2) herumexperimentiert und für SH
Online Shopsoftware in PHP entwickelt - das war viel bequemer als in Perl.
Und so kam es, daß ich mich auch schon bald mit PHP auseinandergesetzt
habe&amp;hellip;&lt;/p&gt;
&lt;p&gt;Denn mit Boris zusammen habe ich damals für einen Shop und das zugehörige
Prozeßbackend im Intranet eines großen Konzerns geerbt. Wir haben damals
sehr schnell gemerkt, daß wir ein Problem mit Persistenz haben und uns dann
eine generalisierte Methode zur Erzeugung von Sessionvariablen überlegt.&lt;/p&gt;
&lt;p&gt;Das Resultat dieser Überlegungen war PHPLIB. Am
&lt;a href=&#34;http://marc.theaimsgroup.com/?l=php-general&amp;amp;m=90222497032608&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;19. Mai 1998&lt;/a&gt;

 habe
ich auf der php-general-Liste zum ersten Mal nach Sessions gefragt (vom
selben Tag kommt übrigens auch die Idee für
&lt;a href=&#34;http://marc.theaimsgroup.com/?l=php-general&amp;amp;m=90222497032618&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHP Standard Library&lt;/a&gt;

).
Am 30. Juni haben Boris und ich dann
&lt;a href=&#34;http://marc.theaimsgroup.com/?l=php-general&amp;amp;m=90222503034131&amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PHPLIB released&lt;/a&gt;

. Was ich damals als&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have had some stability problems with our code (spontaneous
intermittent failures on some pages; &amp;ldquo;document contains no data&amp;rdquo;, but no
log messages and no PHP debugger output) which we are trying to track, but
we have had no success. These problems may be related to a general
instability of PHPs object features (we are using classes, subclasses and
objects throughout our code).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;war vermutlich der erste Versuch weltweit, die damals brandneuen
Objektfeatures von PHP3 anzuwenden und so kam es, daß Boris und ich ca. 50
Bugreports gegen die Release Candidates von PHP3 gefiled haben und
persönlich verantwortlich für 4 von 6 Release Candidates waren (indem wir
Showstopper Bugs entdeckt haben :).&lt;/p&gt;
&lt;p&gt;PHP ist für mich aber nicht nur eine schöne Sprache und eine reichhaltige
Plattform gewesen, sondern auch eine Erfahrung im Aufbau einer Gemeinschaft.&lt;/p&gt;
&lt;p&gt;Ich habe über die Beschäftigung mit der Sprache eine Menge von Leuten in
vielen Ländern kennegelernt. Ich habe eine
&lt;a href=&#34;http://groups-beta.google.com/group/de.admin.news.announce/msg/b4ce2ec6f6e5eafd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Newsgroup eingerichtet&lt;/a&gt;


und
&lt;a href=&#34;http://groups-beta.google.com/group/de.comp.lang.php/msg/74b8f8ea3c8a91ad&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;die FAQ&lt;/a&gt;


für die Gruppe zunächst alleine und dann mit einem wirklich guten Team
fortgeschrieben. Was damals für die FAQ gilt, ist im Grunde beschreibend für
die ganze kooperative Kultur, die um PHP herum entstanden ist:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warum funktioniert de.comp.lang.php?de.comp.lang.php funktioniert, weil
wir hier freundlich miteinander umgehen und weil wir Arbeit nicht zweimal
machen. dclp hat eine Kultur, und Ihr koennt diese Kultur mitgestalten.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Der 10. Geburtstag von PHP ist damit ein Anlaß für mich, um mich bei allen
den Leuten zu bedanken, die an diesem wirklich großen Projekt mitgearbeitet
haben und die durch Kooperation und den Willen, ohne besonderen Anlaß zu
einem gemeinsamen Ganzen beizutragen, die Sprache und die Gemeinschaft PHP
zu einer der bedeutendsten Plattformen für Webentwicklung weltweit gemacht
haben.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL FLOSS Exception</title>
      <link>https://blog.koehntopp.info/2004/07/19/mysql-floss-exception.html</link>
      <pubDate>Mon, 19 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2004/07/19/mysql-floss-exception.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_dolphin.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Bereits letzten Donnerstag hat Zak Greant, die Community-Kontaktperson bei
MySQL, die
&lt;a href=&#34;http://zak.greant.com:8888/licensing/getfile/licensing/FLOSS-exception.txt?v=1.5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Version 1.5 der MySQL FLOSS License Exception&lt;/a&gt;


veröffentlicht.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception IntentWe want specified Free/Libre and Open Source Software
(&amp;ldquo;FLOSS&amp;rdquo;) applications to be able to use specified GPL-licensed MySQL
client libraries (the &amp;ldquo;Program&amp;rdquo;) despite the fact that not all FLOSS
licenses are compatible with version 2 of the GNU General Public License
(the &amp;ldquo;GPL&amp;rdquo;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wir erinnern uns: Wie in
&lt;a href=&#34;https://blog.koehntopp.info/2004/03/14/mysql-und-die-lizenzen.html&#34;&gt;MySQL und die Lizenzen&lt;/a&gt;


dargestellt, hat MySQL mit der 4er Serie des MySQL-Paketes die Lizenz der
Client-Bibliotheken von LGPL auf GPL geändert. Dabei kam es zu den im
Artikel dargestellten Lizenzproblemen.&lt;/p&gt;
&lt;p&gt;Die MySQL FLOSS License Exception behebt (endlich!) dieses Problem.&lt;/p&gt;
&lt;p&gt;Grundidee der Lizenzänderung war&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are commercial, we are commercial. If you are Free and Open, we are
Free and Open.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL wollte also kommerziellen Programmen die Möglichkeit nehmen, die MySQL
Clientbibliotheken einzubinden ohne eine MySQL Lizenz zu erwerben. Doch
nicht alle freien Lizenzen sind kompatibel mit der GPL, und insbesondere ist
die PHP-Lizenz (eine Abwandlung der Apache-Lizenz) nicht mit der GPL
kompatibel.&lt;/p&gt;
&lt;p&gt;Damit man PHP weiter mit MySQL zusammen herstellen oder vertreiben darf, und
damit Linux-Distributionen weiter MySQL-Client und MySQL-Server zusammen
vertreiben dürfen, war die License Exception notwendig. Regelung &amp;ldquo;0.b&amp;rdquo; der
Exception stellt dabei Kompatibilität mit den in Regelung 1 genannten
Lizenzen her, Regelung &amp;ldquo;0.c&amp;rdquo; erlaubt die Verteilung von MySQL auf Linux
Distributionen, die auch Nicht-GPL Daten und Programme enthalten.&lt;/p&gt;
&lt;p&gt;Damit ist von der Seite der free software community nun endlich alles
geregelt. Von der MySQL-Seite aus bleibt das Schluploch mit dem SQL-Relay,
aber &amp;hellip; nunja.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why PHPLIB did vanish</title>
      <link>https://blog.koehntopp.info/2004/07/15/why-phplib-did-vanish.html</link>
      <pubDate>Thu, 15 Jul 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2004/07/15/why-phplib-did-vanish.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://phplens.com/phpeverywhere/?q=node/view/69&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;ADO-donkey&amp;rdquo; will prevail&lt;/a&gt;

, johnlim writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHPLib was the most popular database library for PHP3. Today it seems to be a bit old and is no longer popular. I have never talked to the PHPLib developers, but I can speculate on the reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHPLib has PHP3 functionality that is obsolete because it is provided natively by PHP today, such as sessions support.&lt;/li&gt;
&lt;li&gt;PHPLib tried to do too much. It handled both paging, templating and database access. Other more specialised database libraries have superseded it.&lt;/li&gt;
&lt;li&gt;The PHPLib developers are involved in other activities such as PEAR, or have lost interest perhaps?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;As one of the principal designers of PHPLIB, I am entitled to clear things up.&lt;/p&gt;
&lt;p&gt;PHPLIB was fallout. When I was doing web application design for
&lt;a href=&#34;http://www.netuse.de&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetUSE&lt;/a&gt;

/SHonline in the final days of PHP/FI and during the PHP3 RCs, I pretty quick came across the Session problem. I was at all times carrying around a large number of persistent variables in GET and POST requests, and was revalidating them over and over due to their source being the untrustworthy Internet.&lt;/p&gt;
&lt;p&gt;I asked on the PHP support mailing list, and got my hands on a piece of code by Rasmus, which serialized an array of at most three dimensions into a string. Together with Boris Erdmann, with whom I was working at that time, I wrote a more generic serializer, which could handle about any number and any type of variable including objects. This, plus an authentication and authorization scheme plus a very simple and lightweight database wrapper class became the
&lt;a href=&#34;https://marc.info/?l=php-general&amp;amp;amp;m=90222503034131&amp;amp;amp;w=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;core of PHPLIB&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;We released the code to our little library under the LGPL thanks to the generosity of the company we worked for, and in order to get other people to contribute to it, be it with documentation, testing or even code. And contributions we got, from inside of
&lt;a href=&#34;http://www.netuse.de&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetUSE&lt;/a&gt;

/SHonline by Ulf Wendel, and from the outside.&lt;/p&gt;
&lt;p&gt;Then two things happened: Sascha Schumann met the PHP team and started recoding the PHPLIB session handling into what became PHP 4, and SHonline was reintegrated into NetUSE and I moved on to other departments inside the company. Because I was no longer doing web development, and Sascha&amp;rsquo;s native PHP 4 session handling did just fine for my purposes, thank you, I no longer had any use for PHPLIBs code, perhaps besides the database wrapper.&lt;/p&gt;
&lt;p&gt;The PHPLIB database wrapper was never intended to be a database abstraction anyway - being raised on NeXTstep and its Enterprise Objects toolkit, I subscribe to many aspects of Jeremy&amp;rsquo;s essay
&lt;a href=&#34;http://jeremy.zawodny.com/blog/archives/002194.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Database Abstraction Layers must die!&lt;/a&gt;

. The database wrapper has its purpose mainly in that it encapsulates the database access information (user, password, host, database), and enforces proper error handling. It may also manage a connection pool, if the deployment environment has provisions for that. But there is little use for a unified database access API in PHP (or anywhere else).&lt;/p&gt;
&lt;p&gt;SQL dialects and the inner workings of SQL databases are suitably different so that different access strategies are needed for different databases. There is little use for &amp;ldquo;take a unified SQL statement and push it to whatever database happens to be below the application&amp;rdquo;, which is what most PHP database abstraction layers promise to do.&lt;/p&gt;
&lt;p&gt;What is needed is a persistence layer abstraction instead. Objects model the entities and relations of the storage model and provide the application with the data access API the application needs. Inside, the objects generate whatever suitably optimized statements are required to talk to the concrete persistence layer below the application and execute them.&lt;/p&gt;
&lt;p&gt;This is what EO did on NeXTstep and this is what makes sense, if you happen to be able to keep around database connections and ER model objects between requests, because otherwise the overhead in code and object instantiation is just to high - Ulf tried, I tried, we failed.&lt;/p&gt;
&lt;p&gt;Keeping instances of objects between requests requires an application server, things like PHP Bananas and the Vulcan Logic thingy or similar. PHP has no such deployment model that is production quality and so I did not pursue that avenue for development any further.&lt;/p&gt;
&lt;p&gt;To sum it up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yes, PHPLIB is obsolete. Use the native PHP session support for session management, use Smarty for templating and use AdoDB for database access. These are much more tailored to current PHP development styles than PHPLIB and they are under active development. Avoid PEAR, unless the class of choice can live without PEAR.php, which is fat and ugly.&lt;/li&gt;
&lt;li&gt;No, PHPLIB did never try to be a database abstraction library, it tried to be a web application development suite and it was fairly successful at that during its time.&lt;/li&gt;
&lt;li&gt;Yes, the PHPLIB developers have been moving on to things outside of the world of PHP.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MySQL und die Lizenzen</title>
      <link>https://blog.koehntopp.info/2004/03/14/mysql-und-die-lizenzen.html</link>
      <pubDate>Sun, 14 Mar 2004 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2004/03/14/mysql-und-die-lizenzen.html</guid>
      <description>&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_dolphin.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Früher war alles besser. Früher zum Beispiel konnte MySQL gar nichts, und der
Server stand unter der
&lt;a href=&#34;http://www.gnu.org/licenses/licenses.html#GPL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPL&lt;/a&gt;

, während der MySQL
Client unter der
&lt;a href=&#34;http://www.gnu.org/licenses/licenses.html#LGPL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LGPL&lt;/a&gt;

 stand und alles war
gut. So gut, daß zum Beispiel das PHP Projekt den MySQL Client den
PHP-Sourcen beigelegt hatte und daß man deswegen Mühe hatte, ein PHP zu
finden, das nicht mit einer MySQL-Datenbank reden konnte. Dieses Bundling
ist es unter anderem gewesen, das den Siegeszug der
&lt;a href=&#34;http://www.onlamp.com/pub/a/onlamp/2001/01/25/lamp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LAMP&lt;/a&gt;

 Plattform
begründet hat.&lt;/p&gt;
&lt;p&gt;Dann jedoch entschloss man sich bei MySQL einige Dinge zu tun: Erstens nahm
man Venture-Capital an, zweitens stellte man davon einen Haufen Leute ein
und drittens schob man auf diese Weise die Weiterentwicklung von MySQL
kräftig an. Die MySQL 4.x Serie entstand.&lt;/p&gt;
&lt;p&gt;Die Idee dahinter ist relativ offensichtlich: MySQL hat Datenbanken einen
vollkommen neuen Markt eröffnet. Vor zehn Jahren war SQL-Wissen noch
Spezialwissen und SQL-Datenbanken waren teure Dinge, die nur bei großen
Projekten eingesetzt wurden. Es ist das Verdienst von MySQL, diese Situation
von Grund auf verändert zu haben - heute hat jedes Script Kiddie
SQL-Kenntnisse und verwendet lieber MySQL als Flatfiles, um selbst eine
Highscore-Liste zu speichern. MySQL will nun mit Datenbanken das tun, was
Linux mit Unix-Betriebssystemen gemacht hat.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_linux-penguin.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;MySQL befindet sich dabei in mehr oder weniger derselben Situation wie Linux
1994: Natürlich ist das Produkt (noch!) nicht so feature-complete wie die
etablierten Spieler in diesem Markt, aber für den weitaus größten Teil der
Anwender ist das auch überhaupt nicht notwendig. Für diese Anwender zählen
nämlich nicht so sehr die fetten Enterprise-Feature-Listen, als vielmehr gute
Dokumentation und leichte Erlernbarkeit, die Verfügbarkeit von billigem
Personal mit Kenntnissen im Produkt, Einsatz in Hosting-Umgebungen (Datenbank
und Anwendung auf derselben Maschine, Trennung einer physikalischen in
mehrere logische Datenbanken, Ressource-Quotas usw) und leichte
Administrierbarkeit.&lt;/p&gt;
&lt;p&gt;MySQL hat seinen Kunden hier zugehört und unter der Häme und dem Spott der
etablierten Datenbankhersteller etwas entwickelt, das in erster Linie
Kundenwünsche erfüllt und erst jetzt, in den 4.x Versionen, anfängt
Datenbankhersteller-Kriterien zu erfüllen. Unterwegs hat MySQL aber einen
vollkommen neuen Markt geschaffen und definiert, und dem gesamten
Datenbankmarkt ein vollkommen neues und von den Benutzerzahlen her
gigantisches Low-End geschaffen. Von dort, und mit der dort erzeugten
Benutzerbasis, will MySQL jetzt den Datenbankmarkt von unten her kannibalisieren
und Datenbanken in ein Commodity-Produkt umwandeln - die Lizenzpreise
sprechen eine deutliche Sprache.&lt;/p&gt;
&lt;h3 id=&#34;ein-exkurs-in-lizensismus&#34;&gt;
    &lt;a href=&#34;#ein-exkurs-in-lizensismus&#34;&gt;
	Ein Exkurs in Lizensismus
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Der Markt hat jedoch anders reagiert, denn die Situation ist ein wenig
komplizierter als in der verklärten &amp;ldquo;Früher war alles besser&amp;rdquo;-Darstellung
von oben. Das Unheil begann damit, daß es im Grunde drei Klassen von
Lizenzen gab oder jedenfalls seit der&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mozilla.org/MPL/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mozilla Public License&lt;/a&gt;

 gibt. Da ist zum einen
die Edel-Lizenz GPL, die im Grunde nur mit sicher selber kompatibel ist
(denn alles, was man mit der GPL zusammenbaut wird selber GPL). Dann sind da
jede Menge freie Softwarelizenzen, die nicht mit der GPL kompatibel sind.
Freie Softwarelizenzen sind
&lt;a href=&#34;http://www.debian.org/social_contract.html#guidelines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DFSG-kompatible Lizenzen&lt;/a&gt;

 außer der
GPL selber, also so Dinge wie Apache, BSD, Mozilla-Derivate und so weiter
sowie die LGPL. Und dann sind da kommerzielle Lizenzen und die seltsame Idee
des Dual Licensing.&lt;/p&gt;
&lt;p&gt;Dual Licensing ist, was Managerköpfe zum Platzen bringt: Da der Erzeuger
eines urheberrechtlich geschützten Werkes dieses Werk selber nach Belieben
lizenzieren kann, ist dieser Urheber nicht darauf beschränkt, das Werk nur
unter einer einzigen Lizenz anzubieten. Man kann
Software-Funktionsbibliotheken also unter der GPL anbieten, und für Leute,
denen dies nicht gefällt, auch eine kommerzielle Lizenz zu verkaufen.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Ja, ist das nun frei oder nicht frei?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Für die Anbieter von Software, die selber GPL ist und welche die Bibliothek
unter Dual Licensing einbinden wollen, ist alles klar. Die nehmen die
Bibliothek unter der GPL und alles ist gut. Für Anbieter von Software, die
kommerziell ist, ist auch alles klar. Die nehmen die Software entweder unter
der kommerziellen Lizenz oder ein anderes, rein kommerzielles Produkt, weil
ihnen das alles zu verwirrend ist.&lt;/p&gt;
&lt;p&gt;Für die Anbieter von DFSG-Software ist alles unklar. Wenn ich eine
Software-Funktionsbibliothek in mein Programm einbinde, und die Bibliothek
selber ist GPL, dann muss mein Programm auch GPL sein. GPL, nicht &amp;ldquo;freie
Software nach DFSG&amp;rdquo;. Schlecht zum Beispiel für PHP, das inzwischen unter der
&lt;a href=&#34;http://www.php.net/license/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache-Lizenz&lt;/a&gt;

 steht.&lt;/p&gt;
&lt;p&gt;Intern verwendet PHP die Zend-Engine, die unter der
&lt;a href=&#34;http://www.trolltech.com/products/qt/freelicense.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QPL&lt;/a&gt;

 lizenziert wird.
Die QPL wiederum ist eine modifizierte MPL, falls man mir noch folgen kann.
PHP bindet außerdem Dutzende von anderen Projekten und Programmbibliotheken
selber ein, die unter den unterschiedlichsten Lizenzen stehen.&lt;/p&gt;
&lt;h3 id=&#34;warum-ist-das-für-mysql-ein-problem&#34;&gt;
    &lt;a href=&#34;#warum-ist-das-f%c3%bcr-mysql-ein-problem&#34;&gt;
	Warum ist das für MySQL ein Problem?
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_banker.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Mit MySQL 4.x hat MySQL, die Firma, das Tempo deutlich erhöht: Inzwischen
sitzen jede Menge kommerzielle Entwickler für Geld daran, MySQL
voranzubringen. Die Venture-Capital Investoren wollen für ihr Geld innerhalb
der nächsten drei bis fünf Jahre Return sehen.&lt;/p&gt;
&lt;p&gt;MySQL muss also mehr kommerzielle MySQL-Lizenzen verkaufen. Das genau ist bei
einem Produkt wie MySQL jedoch ein wenig schwierig: Der MySQL Server ist
GPL. Man kann ihn also problemlos irgendwo hinstellen und in Betrieb nehmen,
ohne daß man eine Lizenz kaufen müsste. Man kann, wenn man möchte, bei MySQL
kommerziellen Support kaufen, guten Support sogar, für relativ kleines Geld.
Dummerweise ist nur MySQL als Produkt viel zu gut, man kommt gut ohne
Support hin. Dummerweise ist der MySQL-Server GPL, und liegt deswegen im
Source vor. Falls man also genug technisches Wissen im Haus hat, kann man
sich auch leicht selber supporten.&lt;/p&gt;
&lt;p&gt;Der MySQL Client war LGPL. LGPL ist eine GPL ohne Zähne: Man kann
LGPL-Funktionsbibliotheken wie den MySQL Client in sein Programm einbauen,
ohne daß dieses Programm dann GPL oder LGPL sein müsste - es kann nahezu jede
beliebige Lizenz haben.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_kunden.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;Hersteller von kommerzieller Software haben also Programme entwickelt, die
die MySQL Client-Bibliotheken enthalten haben, ohne eine Lizenz zwingend zu
brauchen. Benutzer dieser Software haben sich also einen MySQL Server
hinstellen können, ohne für diesen eine Lizenz zwingend zu brauchen und die
haben die kommerzielle Software einsetzen können, ohne eine Lizenz zwingend
zu brauchen.&lt;/p&gt;
&lt;p&gt;Das hat funktioniert, solange MySQL, die Firma, ihr Wachstum aus den
Support-Einnahmen und anderen Quellen selber finanziert haben. Aber mit VC in
der Firma geht das nicht mehr.&lt;/p&gt;
&lt;p&gt;Der MySQL 4.x Client ist also GPL. Genaugenommen ist er Dual Licensed. Wenn
man also eine GPL-Anwendung schreibt, kann man den MySQL 4.x Client
benutzen. Wenn man eine Nicht-GPL-Anwendung schreibt, und das schließt alle
DFSG-freien, GPL-inkompatiblen Lizenzen mit ein, braucht man eine
kommerzielle Lizenz.&lt;/p&gt;
&lt;h3 id=&#34;schmerzen&#34;&gt;
    &lt;a href=&#34;#schmerzen&#34;&gt;
	Schmerzen
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Soweit so unklar.&lt;/p&gt;
&lt;p&gt;MySQL hat aber sich aus irgendeinem Grunde vorgenommen, an dieser Stelle
einmal &lt;strong&gt;nicht&lt;/strong&gt; auf ihre Kunden zu hören und die eigene Position mit den
Kundenwünschen abzustimmen, sondern diese Änderung quasi im Alleingang
durchzuziehen.&lt;/p&gt;
&lt;p&gt;MySQL hat dabei den mittleren Fall der DFSG-freien, GPL-inkompatiblen
Anwendungen vollkommen übersehen.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_sterling.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;MySQL hat sich außerdem entschlossen, die GPL auf eine sehr seltsame Weise
zu interpretieren:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://edwardbear.org/serendipity/archives/1193_My_Beef_with_MySQLs_License.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sterling Hughes&lt;/a&gt;


geht hier ausführlich in englischer Sprache darauf ein. MySQL argumentiert,
daß auch jede Reimplementation von deren Protokoll MySQLs geistiges Eigentum
wäre, weil es sich um ein abgeleitetes Werk handelt. Also ganz genau
&lt;a href=&#34;https://blog.koehntopp.info/2004/02/08/cooties.html&#34;&gt;die SCO Argumentation&lt;/a&gt;

.&lt;/p&gt;
&lt;p&gt;MySQL ist außerdem jetzt schon seit mehr als einem Jahr damit beschäftigt,
dieses Problem zu lösen.&lt;/p&gt;
&lt;h3 id=&#34;auflösungserscheinungen&#34;&gt;
    &lt;a href=&#34;#aufl%c3%b6sungserscheinungen&#34;&gt;
	Auflösungserscheinungen
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Konsequenzen:&lt;/p&gt;
&lt;p&gt;Die MySQL Client-Bibliotheken liegen PHP nicht mehr bei. Das wird inzwischen
nicht nur lizenzrechtlich, sondern auch technisch verargumentiert und wird
deswegen auch dann so bleiben, wenn (sobald) PHP und MySQL sich einigen.&lt;/p&gt;
&lt;p&gt;PHP liegen stattdessen SQLite Bibliotheken bei. SQLite ist eine Art
&amp;ldquo;Access ohne GUI&amp;rdquo;, also ein serverloses embedded SQL und daher
performancetechnisch mit MySQL nicht zu vergleichen. Die SQLite-Entwickler
haben in den letzten Wochen große Fortschritte gemacht, ihre SQL-Syntax
kompatibel mit MySQL SQL-Erweiterungen zu machen. Dennoch: Eine richtige
Alternative ist das nicht, eher ein Schritt zurück.&lt;/p&gt;
&lt;p&gt;MySQL hat
&lt;a href=&#34;http://buddhajohntwofish.com/archives/000620.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gerade gestern&lt;/a&gt;

 mit
einer speziellen
&lt;a href=&#34;http://zak.greant.com/archives/000618.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ausnahmeregelung&lt;/a&gt;

 versucht, das
Problem der GPL-inkompatiblen freien Softwarelizenzen zu regeln. Leider mit
einer statischen Liste statt mit einer Regel wie &amp;ldquo;Besorgt Euch eine
DFSG-Evaluation und dann ist alles gut&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Der meiner Meinung nach unhaltbare Standpunkt, daß unabhängige
Reimplementierungen des Protokolls auch abgeleitete Werke sind, wird von
MySQL weiter aufrecht erhalten. Das lässt darauf schließen, daß MySQL auch
lizenzrechtliche Bedenken gegen Middlewares wie
&lt;a href=&#34;http://sqlrelay.sourceforge.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQLRelay&lt;/a&gt;

 hat.&lt;/p&gt;
&lt;p&gt;SQLRelay ist selber GPL. Als Middleware legt SQLRelay einen Connection Pool
von z.B. MySQL Datenbankverbindungen an und spricht mit der MySQL-Datenbank.
Das ist lizenztechnisch unproblematisch. Auf der anderen Seite exponiert
SQLRelay eine eigene, von der MySQL-API verschiedene
Programmierschnittstelle. Da SQLRelay nicht wie MySQL den Standpunkt
vertritt, daß die GPL auch über TCP/IP &amp;ldquo;ansteckend&amp;rdquo; sei, kann also eine
kommerzielle Anwendung ohne MySQL-Lizenz mit SQLRelay reden. Zak Greant von
MySQL war gestern Abend im Chat zu diesem Thema nur der MySQL-Standardsatz
zu entlocken: &amp;ldquo;If you use us with closed source software, we recommend using
our commercial license.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_postgres.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.postgresql.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postgresql&lt;/a&gt;

 hat endlich (ich seh da jedes Jahr
mal nach oder so) eine Website, die den Namen verdient, und da gibt es sogar
so etwas ähnliches wie Dokumentation. Aktuelles Postgresql kann viele Dinge
besser als MySQL 3.23 und 4.0, Replikation bleibt ein Problem. Postgresql
ist unter der
&lt;a href=&#34;http://www.postgresql.org/licence.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BSD Lizenz&lt;/a&gt;

 verfügbar und
vollkommen problemlos mit allem möglichen integrierbar.&lt;/p&gt;
&lt;p&gt;&lt;p class=&#34;md__image&#34;&gt;
  &lt;img src=&#34;https://blog.koehntopp.info/uploads/20040314_firebird.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://firebird.sourceforge.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firebird&lt;/a&gt;

 soll ich mir auch dringend
einmal ansehen, sagt man mir. Die
&lt;a href=&#34;http://firebird.sourceforge.net/index.php?op=doc&amp;amp;id=ipl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lizenz&lt;/a&gt;

 habe ich
noch nicht gelesen.&lt;/p&gt;
&lt;h3 id=&#34;fazit&#34;&gt;
    &lt;a href=&#34;#fazit&#34;&gt;
	Fazit
    &lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Für mich persönlich nehme ich mehrere Erfahrungen mit:&lt;/p&gt;
&lt;p&gt;MySQL bemüht sich
immerhin mit sehr ernsthaft die Situation in Bewegung zu halten und
schließlich irgendwie zu lösen. Nach dem ich gestern abend im deutschen Irc
eine Diskussion über den originalen
&lt;a href=&#34;http://yro.slashdot.org/article.pl?sid=04/03/13/1414212&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artikel&lt;/a&gt;

 auf
Slashdot angezettelt habe, hatte ich binnen einer halben Stunde Zak Greant
am Rohr und wir haben den ganzen Kram inklusive SQLRelay versucht einmal
durchzudeklinieren. Auch wenn wir nicht in allen Punkten zu einem Abschluss
gekommen sind, bleibt doch der Eindruck, daß MySQL sich bewegt.&lt;/p&gt;
&lt;p&gt;Anderseits bewegt sich MySQL unglaublich langsam - das alles war ja schon
Thema auf dem Linuxtag 2003, wo sich die PHP- und MySQL-Spitzenleute
getroffen haben und man die im Slashdot-Artikel vorgestellte Lösung
inoffiziell bereits mehr oder weniger im Kasten hatte. In manchen Punkten
bewegt sich MySQL gar nicht: Der Punkt mit der seltsamen GPL-Interpretation
(&amp;ldquo;Ansteckung über TCP/IP&amp;rdquo;, &amp;ldquo;Reimplementierung des Protokolls&amp;rdquo;) bleibt offen,
und SQLRelay bleibt fragwürdig.&lt;/p&gt;
&lt;p&gt;Die Hochzeit zwischen PHP und MySQL ist jedenfalls mit MySQL 4.x definitiv
vorbei. MySQL braucht freundschaftlich, aber bestimmt Druck durch
Alternativen und Postgresql und Firebird brauchen Propaganda. Wir wollen
einmal sehen können, was wir da tun können.&lt;/p&gt;
&lt;p&gt;Dual Licensing - ich bin mir noch nicht abschließend sicher, ob das Teil des
Problemraums oder Teil des Lösungsraums ist. Bemerkenswerterweise (Beispiele
sind MySQL und Qt) wird in solchen Fällen die GPL eher als Restriktion denn
als Befreiung angesehen - unter anderem deswegen, weil alternative Projekte
mit weniger restriktiven Lizenzen vorhanden sind.&lt;/p&gt;
&lt;p&gt;Die FSF und das GNU-Projekt sind seltsam still in dieser Sache: Während sie
sonst immer schnell dabei sind, die Überlegenheit der GPL gegenüber der LGPL
zu verargumentieren, wird die FSF allgemein eher dem Gnome (LGPL) denn dem
KDE/Qt (GPL)-Lager zugerechnet. Seltsam auch, daß die Projekte mit
kommerziellem Backing (KDE/Qt - Troll, MySQL Database - MySQL AB) genau die
GPL verfechen, während die Projekte mit nicht kommerziellem Hintergrund
(Gnome, Postgresql) weniger &amp;ldquo;pure&amp;rdquo; Lizenzmodelle (auf der RMS-Skala)
vertreten.&lt;/p&gt;
&lt;p&gt;Der Standpunkt von RMS war ja sonst immer &amp;ldquo;Die LGPL ist nur ein Notbehelf
und wird letztendlich verschwinden (müssen). Wir brauchen sie nur, bis GNU
eine lauffähige eigene Betriebssystemplattform hat, damit wir uns mit
existierenden kommerziellen Foundations integrieren können. Generell ist die
GPL der LGPL jedoch dringend zu bevorzugen.&amp;rdquo; So ganz wirklich vertreten die
diesen Standpunkt dann doch nicht, wenn es darauf ankommt.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

