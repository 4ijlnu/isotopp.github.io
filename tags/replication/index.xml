<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>replication on Die wunderbare Welt von Isotopp</title>
    <link>https://blog.koehntopp.info/tags/replication.html</link>
    <description>Recent content in replication on Die wunderbare Welt von Isotopp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Oct 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.koehntopp.info/tags/replication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 5.6.7-RC: GTID vs. MyISAM</title>
      <link>https://blog.koehntopp.info/2012/10/02/mysql-5-6-7-rc-gtid-vs-myisam.html</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2012/10/02/mysql-5-6-7-rc-gtid-vs-myisam.html</guid>
      <description>So we tested the 5.6.7-RC. And ran into a strange problem:
Because of a test, a preexisting configuration with GTID enabled existed, and suddenly we did not have properly initialized grants in mysql.* created for a new installation. Turns out: GTID and non-transactional tables are no friends, and that is even documented .
 When using GTIDs, updates to tables using nontransactional storage engines such as MyISAM are not supported. This is because updates to such tables mixed with updates to tables that use a transactional storage engine such as InnoDB can result in multiple GTIDs being assigned to the same transaction.</description>
    </item>
    
    <item>
      <title>MySQL Replication Load Monitor</title>
      <link>https://blog.koehntopp.info/2012/09/28/mysql-replication-load-monitor.html</link>
      <pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2012/09/28/mysql-replication-load-monitor.html</guid>
      <description>Mein Kollege Dennis Kaarsemaker hat jetzt einen Artikel zu dem Replication Load Monitor von Booking.com gebloggt. Der Monitor basiert auf Arbeiten von Mark Leith .
Möge er Euch allen nützen.</description>
    </item>
    
    <item>
      <title>Ein Ring mit zwei MySQL-Servern und auto_increment_increment</title>
      <link>https://blog.koehntopp.info/2010/08/17/ein-ring-mit-zwei-mysql-servern-und-auto-increment-increment.html</link>
      <pubDate>Tue, 17 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/08/17/ein-ring-mit-zwei-mysql-servern-und-auto-increment-increment.html</guid>
      <description>Lalufu fragte in den Kommentaren von Master-Master :
 Ich habe eine MM-Replikation mit zwei Servern.
Beide haben auto_increment_increment=10,
Server A hat auto_increment_offset=0 und Server B hat auto_increment_offset=1.
Ich lege mir eine Tabelle mit einem auto_increment-Feld (id) an und mache auf Server A einen INSERT, dann kriegt die row id=0, und wird auf B repliziert, richtig?
Dann noch einen INSERT auf A, die row kriegt id=10, und wird auf B repliziert.</description>
    </item>
    
    <item>
      <title>Master-Master und Distributed Transactions</title>
      <link>https://blog.koehntopp.info/2010/08/16/master-master-und-distributed-transactions.html</link>
      <pubDate>Mon, 16 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.koehntopp.info/2010/08/16/master-master-und-distributed-transactions.html</guid>
      <description>Immer mal wieder kommt jemand im Internet auf die Idee, wie man Master-Master und verteilte Transaktionen ganz einfach realisieren kann. MySQL verteilte Daten von Okami ist ein gutes Beispiel für diese Idee:
 Wir nutzen dabei aus, dass MySQL bei zusammengesetzten Indizes einen AUTO_INCREMENT-Wert pro distinktem Schlüsselpräfix zählt. Das heißt ganz konkret: Wir legen einen Primär-Schlüssel aus zwei Spalten zusammen. In der ersten Spalte verwenden wir einen sehr kleinen Wert, der die Quelle der Daten kennzeichnet: Source tinyint unsigned NOT NULL; Den zweiten Teil legen wir als einfache ID int unsigned NOT NULL AUTO_INCREMENT an.</description>
    </item>
    
  </channel>
</rss>
